cmake_minimum_required(VERSION 2.6)


#############################################################################
#
# Find all dependencies and report anything missing.
#
#############################################################################
MESSAGE(STATUS "Looking for dependencies:")
FIND_PACKAGE(PythonInterpEx)
FIND_PACKAGE(PythonLibsEx)
FIND_PACKAGE(TINYXML2)
FIND_PACKAGE(ZeroMQ)
FIND_PACKAGE(CryptoPP)
FIND_PACKAGE(LUA)
FIND_PACKAGE(PROTOC_GEN_LUA)
FIND_PACKAGE(GoogleProtoBuf)
FIND_PACKAGE(GoogleBreakpad COMPONENTS common exception_handler crash_report_sender crash_generation_client)
FIND_PACKAGE(OpenSSL)
FIND_PACKAGE(Boost COMPONENTS system filesystem thread regex date_time program_options python)
IF(WIN32)
	FIND_PACKAGE(PSDK_61)
	FIND_PACKAGE(PSDK_2003)
ELSE(WIN32)
	FIND_PACKAGE(Threads REQUIRED)
#	FIND_PACKAGE(ICU REQUIRED)
ENDIF(WIN32)
MESSAGE(STATUS "Found dependencies:")
IF(PYTHONINTERP_FOUND)
	MESSAGE(STATUS " - python(exe) found: ${PYTHON_EXECUTABLE}")
ELSE(PYTHONINTERP_FOUND)
	MESSAGE(STATUS " ! python(exe) not found: TODO")
ENDIF(PYTHONINTERP_FOUND)
IF(PYTHONLIBSEX_FOUND)
	MESSAGE(STATUS " - python(lib) found: ${PYTHON_LIBRARY}")
ELSE(PYTHONLIBSEX_FOUND)
	MESSAGE(STATUS " ! python(lib) not found: TODO")
ENDIF(PYTHONLIBSEX_FOUND)
IF (TINYXML2_FOUND)
	MESSAGE(STATUS " - tinyXML found: ${TINYXML2_INCLUDE_DIR}")
ELSE(TINYXML2_FOUND)
	MESSAGE(STATUS " ! tinyXML not found: TODO")
ENDIF(TINYXML2_FOUND)
IF (ZEROMQ_FOUND)
	MESSAGE(STATUS " - zeroMQ found in: ZEROMQ_LIBRARY=${ZEROMQ_LIBRARY}")
ELSE(ZEROMQ_FOUND)
	MESSAGE(STATUS " ! zeroMQ not found: ZEROMQ_ROOT=${ZEROMQ_ROOT}")
ENDIF (ZEROMQ_FOUND)
IF(CRYPTOPP_FOUND)
	IF(CRYPTOPP_IS_LIB)
		MESSAGE(STATUS " - crypto++(lib) found in: ${CRYPTOPP_INCLUDE_DIR}")
	ELSE(CRYPTOPP_IS_LIB)
		MESSAGE(STATUS " - crypto++(source) found in: ${CRYPTOPP_INCLUDE_DIR} (will build library)")
	ENDIF(CRYPTOPP_IS_LIB)
ELSE(CRYPTOPP_FOUND)
	MESSAGE(STATUS " ! crypto++ not found: CRYPTOPP_DIR=${CRYPTOPP_DIR}")
ENDIF(CRYPTOPP_FOUND)
IF (LUA_FOUND)
	MESSAGE(STATUS " - lua found in ${LUA_INCLUE_DIR}")
ELSE(LUA_FOUND)
	MESSAGE(STATUS " ! lua not found: LUA_INCLUE_DIR=${LUA_INCLUE_DIR}")
ENDIF(LUA_FOUND)
IF(PROTOC_GEN_LUA_FOUND)
	MESSAGE(STATUS " - lua.protocol_buffers found in: ${PROTOC_GEN_LUA_BIN}")
ELSE(PROTOC_GEN_LUA_FOUND)
	MESSAGE(STATUS " ! lua.protocol_buffers not found: PROTOC_GEN_LUA=${PROTOC_GEN_LUA_BIN}")
ENDIF(PROTOC_GEN_LUA_FOUND)
IF(PROTOBUF_FOUND)
	MESSAGE(STATUS " - protocol buffers found in: ${PROTOBUF_INCLUDE_DIR} (${PROTOBUF_PROTOC_EXECUTABLE})")
ELSE(PROTOBUF_FOUND)
	MESSAGE(STATUS " ! protocol buffers not foun: PROTOBUF_ROOT=${PROTOBUF_ROOT}")
ENDIF(PROTOBUF_FOUND)
IF(BREAKPAD_FOUND)
	MESSAGE(STATUS " - google breakpad found in: ${BREAKPAD_INCLUDE_DIR}")
ELSE(BREAKPAD_FOUND)
	MESSAGE(STATUS " ! google breakpad not found: TODO=${BREAKPAD_EXCEPTION_HANDLER_INCLUDE_DIR}")
ENDIF(BREAKPAD_FOUND)
IF(OPENSSL_FOUND)
	MESSAGE(STATUS " - OpenSSL found in: ${OPENSSL_INCLUDE_DIR}")
ELSE(OPENSSL_FOUND)
	MESSAGE(STATUS " ! OpenSSL not found TODO=${OPENSSL_INCLUDE_DIR}")
ENDIF(OPENSSL_FOUND)
IF(Boost_FOUND)
	MESSAGE(STATUS " - boost found in: ${Boost_INCLUDE_DIRS} / ${Boost_LIBRARY_DIRS}")
ELSE(Boost_FOUND)
	MESSAGE(STATUS " ! boost not found: BOOST_ROOT=${BOOST_ROOT}")
ENDIF(Boost_FOUND)
IF(WIN32)
	IF(PSDK_61_FOUND)
		MESSAGE(STATUS " - plattform sdk(6.1) found in: ${PSDK_61_INCLUDE_DIRS} (${PSDK_61_LIBRARY_DIRS})")
	ELSE(PSDK_61_FOUND)
		MESSAGE(STATUS " ! plattform sdk(6.1) not found: TODO=${PSDK_61_INCLUDE_DIRS}")
	ENDIF(PSDK_61_FOUND)
	IF(PSDK_61_FOUND)
		MESSAGE(STATUS " - plattform sdk(2003) found in: ${PSDK_2003_INCLUDE_DIRS} (${PSDK_2003_LIBRARY_DIRS})")
	ELSE(PSDK_61_FOUND)
		MESSAGE(STATUS " ! plattform sdk(2003) not found: TODO=${PSDK_2003_INCLUDE_DIRS}")
	ENDIF(PSDK_61_FOUND)
ENDIF(WIN32)
IF(NOT WIN32)
	IF(CMAKE_USE_PTHREADS_INIT)
		MESSAGE(STATUS " - POSIX threads found: TODO")
	 ELSE(CMAKE_USE_PTHREADS_INIT)
		MESSAGE(STATUS " ! POSIX threads not found: TODO")
	ENDIF(CMAKE_USE_PTHREADS_INIT)
#	IF(NOT ICU_FOUND)
#		MESSAGE(STATUS "ICU package not found.")
#	ELSE(NOT ICU_FOUND)
#		ADD_DEFINITIONS( -DSI_CONVERT_ICU )
#	ENDIF(NOT ICU_FOUND)
ENDIF(NOT WIN32)


