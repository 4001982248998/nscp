// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Plugin {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Plugin {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Plugin_Common__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common, global::Plugin.Common.Builder> internal__static_Plugin_Common__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_AnyDataType__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.AnyDataType, global::Plugin.Common.Types.AnyDataType.Builder> internal__static_Plugin_Common_AnyDataType__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_KeyValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.KeyValue, global::Plugin.Common.Types.KeyValue.Builder> internal__static_Plugin_Common_KeyValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_Host__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Host, global::Plugin.Common.Types.Host.Builder> internal__static_Plugin_Common_Host__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Header, global::Plugin.Common.Types.Header.Builder> internal__static_Plugin_Common_Header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_Attachment__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Attachment, global::Plugin.Common.Types.Attachment.Builder> internal__static_Plugin_Common_Attachment__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData, global::Plugin.Common.Types.PerformanceData.Builder> internal__static_Plugin_Common_PerformanceData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData_IntValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.IntValue, global::Plugin.Common.Types.PerformanceData.Types.IntValue.Builder> internal__static_Plugin_Common_PerformanceData_IntValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData_StringValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.StringValue, global::Plugin.Common.Types.PerformanceData.Types.StringValue.Builder> internal__static_Plugin_Common_PerformanceData_StringValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData_FloatValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.FloatValue, global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Builder> internal__static_Plugin_Common_PerformanceData_FloatValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_PerformanceData_BoolValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.BoolValue, global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Builder> internal__static_Plugin_Common_PerformanceData_BoolValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Common_Status__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Status, global::Plugin.Common.Types.Status.Builder> internal__static_Plugin_Common_Status__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryRequestMessage, global::Plugin.QueryRequestMessage.Builder> internal__static_Plugin_QueryRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryRequestMessage_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryRequestMessage.Types.Request, global::Plugin.QueryRequestMessage.Types.Request.Builder> internal__static_Plugin_QueryRequestMessage_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage, global::Plugin.QueryResponseMessage.Builder> internal__static_Plugin_QueryResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QueryResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage.Types.Response, global::Plugin.QueryResponseMessage.Types.Response.Builder> internal__static_Plugin_QueryResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteRequestMessage, global::Plugin.ExecuteRequestMessage.Builder> internal__static_Plugin_ExecuteRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteRequestMessage_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteRequestMessage.Types.Request, global::Plugin.ExecuteRequestMessage.Types.Request.Builder> internal__static_Plugin_ExecuteRequestMessage_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage, global::Plugin.ExecuteResponseMessage.Builder> internal__static_Plugin_ExecuteResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response, global::Plugin.ExecuteResponseMessage.Types.Response.Builder> internal__static_Plugin_ExecuteResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Builder> internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataCell__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell.Builder> internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataCell__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataRow__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.Builder> internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataRow__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SubmitRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitRequestMessage, global::Plugin.SubmitRequestMessage.Builder> internal__static_Plugin_SubmitRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SubmitResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitResponseMessage, global::Plugin.SubmitResponseMessage.Builder> internal__static_Plugin_SubmitResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_SubmitResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitResponseMessage.Types.Response, global::Plugin.SubmitResponseMessage.Types.Response.Builder> internal__static_Plugin_SubmitResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Settings__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings, global::Plugin.Settings.Builder> internal__static_Plugin_Settings__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Settings_Node__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Node, global::Plugin.Settings.Types.Node.Builder> internal__static_Plugin_Settings_Node__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_Settings_Node_Path__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Node.Types.Path, global::Plugin.Settings.Types.Node.Types.Path.Builder> internal__static_Plugin_Settings_Node_Path__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QuerySettingsRequestMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsRequestMessage, global::Plugin.QuerySettingsRequestMessage.Builder> internal__static_Plugin_QuerySettingsRequestMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QuerySettingsRequestMessage_Request__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsRequestMessage.Types.Request, global::Plugin.QuerySettingsRequestMessage.Types.Request.Builder> internal__static_Plugin_QuerySettingsRequestMessage_Request__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QuerySettingsResponseMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsResponseMessage, global::Plugin.QuerySettingsResponseMessage.Builder> internal__static_Plugin_QuerySettingsResponseMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QuerySettingsResponseMessage_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsResponseMessage.Types.Response, global::Plugin.QuerySettingsResponseMessage.Types.Response.Builder> internal__static_Plugin_QuerySettingsResponseMessage_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_QuerySettingsResponseMessage_Response_SectionKeys__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys, global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.Builder> internal__static_Plugin_QuerySettingsResponseMessage_Response_SectionKeys__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_LogEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.LogEntry, global::Plugin.LogEntry.Builder> internal__static_Plugin_LogEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Plugin_LogEntry_Entry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Plugin.LogEntry.Types.Entry, global::Plugin.LogEntry.Types.Entry.Builder> internal__static_Plugin_LogEntry_Entry__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Plugin() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgxwbHVnaW4ucHJvdG8SBlBsdWdpbiK1DQoGQ29tbW9uGoIBCgtBbnlEYXRh" + 
          "VHlwZRIlCgR0eXBlGAEgAigOMhcuUGx1Z2luLkNvbW1vbi5EYXRhVHlwZRIT" + 
          "CgtzdHJpbmdfZGF0YRgCIAEoCRIQCghpbnRfZGF0YRgDIAEoAxISCgpmbG9h" + 
          "dF9kYXRhGAQgASgBEhEKCWJvb2xfZGF0YRgFIAEoCBo0CghLZXlWYWx1ZRIL" + 
          "CgNrZXkYASACKAkSDQoFdmFsdWUYAiACKAkSDAoEZGF0YRgDIAMoCRqNAQoE" + 
          "SG9zdBIKCgJpZBgBIAEoCRIMCgRob3N0GAIgASgJEg8KB2FkZHJlc3MYAyAB" + 
          "KAkSEAoIcHJvdG9jb2wYBCABKAkSDwoHY29tbWVudBgFIAEoCRIpCghtZXRh" + 
          "ZGF0YRgGIAMoCzIXLlBsdWdpbi5Db21tb24uS2V5VmFsdWUSDAoEdGFncxgH" + 
          "IAMoCRqtAgoGSGVhZGVyEicKB3ZlcnNpb24YASACKA4yFi5QbHVnaW4uQ29t" + 
          "bW9uLlZlcnNpb24SNQoVbWF4X3N1cHBvcnRlZF92ZXJzaW9uGAIgASgOMhYu" + 
          "UGx1Z2luLkNvbW1vbi5WZXJzaW9uEhEKCXNvdXJjZV9pZBgDIAEoCRIRCglz" + 
          "ZW5kZXJfaWQYBCABKAkSFAoMcmVjaXBpZW50X2lkGAUgASgJEhYKDmRlc3Rp" + 
          "bmF0aW9uX2lkGAYgASgJEhIKCm1lc3NhZ2VfaWQYECABKAMSKQoIbWV0YWRh" + 
          "dGEYCCADKAsyFy5QbHVnaW4uQ29tbW9uLktleVZhbHVlEgwKBHRhZ3MYCSAD" + 
          "KAkSIgoFaG9zdHMYCiADKAsyEy5QbHVnaW4uQ29tbW9uLkhvc3QabQoKQXR0" + 
          "YWNobWVudBIKCgJpZBgBIAEoAxIMCgR0eXBlGAIgAigJEikKCG1ldGFkYXRh" + 
          "GAMgAygLMhcuUGx1Z2luLkNvbW1vbi5LZXlWYWx1ZRIMCgR0YWdzGAQgAygJ" + 
          "EgwKBGRhdGEYBSACKAkajAUKD1BlcmZvcm1hbmNlRGF0YRINCgVhbGlhcxgB" + 
          "IAIoCRIlCgR0eXBlGAIgAigOMhcuUGx1Z2luLkNvbW1vbi5EYXRhVHlwZRI6" + 
          "CglpbnRfdmFsdWUYAyABKAsyJy5QbHVnaW4uQ29tbW9uLlBlcmZvcm1hbmNl" + 
          "RGF0YS5JbnRWYWx1ZRJACgxzdHJpbmdfdmFsdWUYBCABKAsyKi5QbHVnaW4u" + 
          "Q29tbW9uLlBlcmZvcm1hbmNlRGF0YS5TdHJpbmdWYWx1ZRI+CgtmbG9hdF92" + 
          "YWx1ZRgFIAEoCzIpLlBsdWdpbi5Db21tb24uUGVyZm9ybWFuY2VEYXRhLkZs" + 
          "b2F0VmFsdWUSPAoKYm9vbF92YWx1ZRgGIAEoCzIoLlBsdWdpbi5Db21tb24u" + 
          "UGVyZm9ybWFuY2VEYXRhLkJvb2xWYWx1ZRpsCghJbnRWYWx1ZRINCgV2YWx1" + 
          "ZRgBIAIoAxIMCgR1bml0GAIgASgJEg8KB3dhcm5pbmcYAyABKAMSEAoIY3Jp" + 
          "dGljYWwYBCABKAMSDwoHbWluaW11bRgGIAEoAxIPCgdtYXhpbXVtGAcgASgD" + 
          "GhwKC1N0cmluZ1ZhbHVlEg0KBXZhbHVlGAEgAigJGm4KCkZsb2F0VmFsdWUS" + 
          "DQoFdmFsdWUYASACKAESDAoEdW5pdBgCIAEoCRIPCgd3YXJuaW5nGAMgASgB" + 
          "EhAKCGNyaXRpY2FsGAQgASgBEg8KB21pbmltdW0YBiABKAESDwoHbWF4aW11" + 
          "bRgHIAEoARpLCglCb29sVmFsdWUSDQoFdmFsdWUYASACKAgSDAoEdW5pdBgC" + 
          "IAEoCRIPCgd3YXJuaW5nGAMgASgIEhAKCGNyaXRpY2FsGAQgASgIGqQBCgZT" + 
          "dGF0dXMSMAoGc3RhdHVzGAEgAigOMiAuUGx1Z2luLkNvbW1vbi5TdGF0dXMu" + 
          "U3RhdHVzVHlwZRIPCgdtZXNzYWdlGAIgASgJEgwKBGRhdGEYAyABKAkiSQoK" + 
          "U3RhdHVzVHlwZRIGCgJPSxAAEgsKB1dBUk5JTkcQARILCgdQUk9CTEVNEAIS" + 
          "DAoIQ1JJVElDQUwQAxILCgdVTktOT1dOEAoiOwoKUmVzdWx0Q29kZRIGCgJP" + 
          "SxAAEgsKB1dBUk5JTkcQARILCgdDUklUQ0FMEAISCwoHVU5LTk9XThADIjQK" + 
          "CERhdGFUeXBlEgcKA0lOVBABEgoKBlNUUklORxABEgkKBUZMT0FUEAESCAoE" + 
          "Qk9PTBABIhgKB1ZlcnNpb24SDQoJVkVSU0lPTl8xEAEirQIKE1F1ZXJ5UmVx" + 
          "dWVzdE1lc3NhZ2USJQoGaGVhZGVyGAEgAigLMhUuUGx1Z2luLkNvbW1vbi5I" + 
          "ZWFkZXISNAoHcGF5bG9hZBgCIAMoCzIjLlBsdWdpbi5RdWVyeVJlcXVlc3RN" + 
          "ZXNzYWdlLlJlcXVlc3QSLgoLYXR0YWNobWVudHMYAyADKAsyGS5QbHVnaW4u" + 
          "Q29tbW9uLkF0dGFjaG1lbnQaiAEKB1JlcXVlc3QSCgoCaWQYASABKAUSDgoG" + 
          "dGFyZ2V0GAcgASgJEg8KB2NvbW1hbmQYAiACKAkSDQoFYWxpYXMYAyABKAkS" + 
          "EQoJYXJndW1lbnRzGAQgAygJEi4KC2F0dGFjaG1lbnRzGBEgAygLMhkuUGx1" + 
          "Z2luLkNvbW1vbi5BdHRhY2htZW50IpsDChRRdWVyeVJlc3BvbnNlTWVzc2Fn" + 
          "ZRIlCgZoZWFkZXIYASACKAsyFS5QbHVnaW4uQ29tbW9uLkhlYWRlchI2Cgdw" + 
          "YXlsb2FkGAIgAygLMiUuUGx1Z2luLlF1ZXJ5UmVzcG9uc2VNZXNzYWdlLlJl" + 
          "c3BvbnNlEi4KC2F0dGFjaG1lbnRzGAMgAygLMhkuUGx1Z2luLkNvbW1vbi5B" + 
          "dHRhY2htZW50GvMBCghSZXNwb25zZRIKCgJpZBgBIAEoBRIOCgZzb3VyY2UY" + 
          "ByABKAkSDwoHY29tbWFuZBgCIAIoCRINCgVhbGlhcxgDIAEoCRIRCglhcmd1" + 
          "bWVudHMYECADKAkSKQoGcmVzdWx0GAQgAigOMhkuUGx1Z2luLkNvbW1vbi5S" + 
          "ZXN1bHRDb2RlEg8KB21lc3NhZ2UYBSACKAkSLAoEcGVyZhgGIAMoCzIeLlBs" + 
          "dWdpbi5Db21tb24uUGVyZm9ybWFuY2VEYXRhEi4KC2F0dGFjaG1lbnRzGBEg" + 
          "AygLMhkuUGx1Z2luLkNvbW1vbi5BdHRhY2htZW50IpECChVFeGVjdXRlUmVx" + 
          "dWVzdE1lc3NhZ2USJQoGaGVhZGVyGAEgAigLMhUuUGx1Z2luLkNvbW1vbi5I" + 
          "ZWFkZXISNgoHcGF5bG9hZBgCIAMoCzIlLlBsdWdpbi5FeGVjdXRlUmVxdWVz" + 
          "dE1lc3NhZ2UuUmVxdWVzdBIuCgthdHRhY2htZW50cxgDIAMoCzIZLlBsdWdp" + 
          "bi5Db21tb24uQXR0YWNobWVudBppCgdSZXF1ZXN0EgoKAmlkGAEgASgFEg8K" + 
          "B2NvbW1hbmQYAiACKAkSEQoJYXJndW1lbnRzGAMgAygJEi4KC2F0dGFjaG1l" + 
          "bnRzGBEgAygLMhkuUGx1Z2luLkNvbW1vbi5BdHRhY2htZW50IpUGChZFeGVj" + 
          "dXRlUmVzcG9uc2VNZXNzYWdlEiUKBmhlYWRlchgBIAIoCzIVLlBsdWdpbi5D" + 
          "b21tb24uSGVhZGVyEjgKB3BheWxvYWQYAiADKAsyJy5QbHVnaW4uRXhlY3V0" + 
          "ZVJlc3BvbnNlTWVzc2FnZS5SZXNwb25zZRIuCgthdHRhY2htZW50cxgDIAMo" + 
          "CzIZLlBsdWdpbi5Db21tb24uQXR0YWNobWVudBrpBAoIUmVzcG9uc2USCgoC" + 
          "aWQYAiABKAUSDwoHY29tbWFuZBgFIAIoCRIRCglhcmd1bWVudHMYECADKAkS" + 
          "KQoGcmVzdWx0GAkgAigOMhkuUGx1Z2luLkNvbW1vbi5SZXN1bHRDb2RlEg8K" + 
          "B21lc3NhZ2UYCiACKAkSQgoEZGF0YRgLIAEoCzI0LlBsdWdpbi5FeGVjdXRl" + 
          "UmVzcG9uc2VNZXNzYWdlLlJlc3BvbnNlLlJlc3BvbnNlRGF0YRIuCgthdHRh" + 
          "Y2htZW50cxgRIAMoCzIZLlBsdWdpbi5Db21tb24uQXR0YWNobWVudBr8AgoM" + 
          "UmVzcG9uc2VEYXRhEg0KBWFsaWFzGAEgAigJElUKB2hlYWRlcnMYAiABKAsy" + 
          "RC5QbHVnaW4uRXhlY3V0ZVJlc3BvbnNlTWVzc2FnZS5SZXNwb25zZS5SZXNw" + 
          "b25zZURhdGEuUmVzcG9uc2VEYXRhUm93ElIKBHJvd3MYAyADKAsyRC5QbHVn" + 
          "aW4uRXhlY3V0ZVJlc3BvbnNlTWVzc2FnZS5SZXNwb25zZS5SZXNwb25zZURh" + 
          "dGEuUmVzcG9uc2VEYXRhUm93GkkKEFJlc3BvbnNlRGF0YUNlbGwSKAoEZGF0" + 
          "YRgBIAIoCzIaLlBsdWdpbi5Db21tb24uQW55RGF0YVR5cGUSCwoDdGFnGAIg" + 
          "ASgJGmcKD1Jlc3BvbnNlRGF0YVJvdxJUCgVjZWxscxgBIAMoCzJFLlBsdWdp" + 
          "bi5FeGVjdXRlUmVzcG9uc2VNZXNzYWdlLlJlc3BvbnNlLlJlc3BvbnNlRGF0" + 
          "YS5SZXNwb25zZURhdGFDZWxsIrYBChRTdWJtaXRSZXF1ZXN0TWVzc2FnZRIl" + 
          "CgZoZWFkZXIYASACKAsyFS5QbHVnaW4uQ29tbW9uLkhlYWRlchIPCgdjaGFu" + 
          "bmVsGAIgAigJEjYKB3BheWxvYWQYAyADKAsyJS5QbHVnaW4uUXVlcnlSZXNw" + 
          "b25zZU1lc3NhZ2UuUmVzcG9uc2USLgoLYXR0YWNobWVudHMYBCADKAsyGS5Q" + 
          "bHVnaW4uQ29tbW9uLkF0dGFjaG1lbnQipwIKFVN1Ym1pdFJlc3BvbnNlTWVz" + 
          "c2FnZRIlCgZoZWFkZXIYASACKAsyFS5QbHVnaW4uQ29tbW9uLkhlYWRlchI3" + 
          "CgdwYXlsb2FkGAIgAygLMiYuUGx1Z2luLlN1Ym1pdFJlc3BvbnNlTWVzc2Fn" + 
          "ZS5SZXNwb25zZRIuCgthdHRhY2htZW50cxgDIAMoCzIZLlBsdWdpbi5Db21t" + 
          "b24uQXR0YWNobWVudBp+CghSZXNwb25zZRIKCgJpZBgBIAEoBRIPCgdjb21t" + 
          "YW5kGAIgAigJEiUKBnN0YXR1cxgDIAIoCzIVLlBsdWdpbi5Db21tb24uU3Rh" + 
          "dHVzEi4KC2F0dGFjaG1lbnRzGBEgAygLMhkuUGx1Z2luLkNvbW1vbi5BdHRh" + 
          "Y2htZW50InMKCFNldHRpbmdzGmcKBE5vZGUSKAoEcGF0aBgBIAEoCzIaLlBs" + 
          "dWdpbi5TZXR0aW5ncy5Ob2RlLlBhdGgSEgoKZXhwcmVzc2lvbhgCIAEoCRoh" + 
          "CgRQYXRoEgwKBHBhdGgYASACKAkSCwoDa2V5GAIgASgJIpUCChtRdWVyeVNl" + 
          "dHRpbmdzUmVxdWVzdE1lc3NhZ2USJQoGaGVhZGVyGAEgAigLMhUuUGx1Z2lu" + 
          "LkNvbW1vbi5IZWFkZXISPAoHcGF5bG9hZBgCIAMoCzIrLlBsdWdpbi5RdWVy" + 
          "eVNldHRpbmdzUmVxdWVzdE1lc3NhZ2UuUmVxdWVzdBqQAQoHUmVxdWVzdBIK" + 
          "CgJpZBgBIAEoAxIeCgRub2RlGAIgAigLMhAuUGx1Z2luLlNldHRpbmdzEg8K" + 
          "B2RlZmF1bHQYAyABKAkSGgoSZmV0Y2hfZGVzY3JpcHRpb25zGAQgASgIEiwK" + 
          "C3JldHVybl90eXBlGBEgASgOMhcuUGx1Z2luLkNvbW1vbi5EYXRhVHlwZSKi" + 
          "AwocUXVlcnlTZXR0aW5nc1Jlc3BvbnNlTWVzc2FnZRIlCgZoZWFkZXIYASAC" + 
          "KAsyFS5QbHVnaW4uQ29tbW9uLkhlYWRlchI+CgdwYXlsb2FkGAIgAygLMi0u" + 
          "UGx1Z2luLlF1ZXJ5U2V0dGluZ3NSZXNwb25zZU1lc3NhZ2UuUmVzcG9uc2Ua" + 
          "mgIKCFJlc3BvbnNlEgoKAmlkGAEgASgDEh4KBG5vZGUYAiACKAsyEC5QbHVn" + 
          "aW4uU2V0dGluZ3MSKQoFdmFsdWUYBCABKAsyGi5QbHVnaW4uQ29tbW9uLkFu" + 
          "eURhdGFUeXBlEkcKBGtleXMYBSABKAsyOS5QbHVnaW4uUXVlcnlTZXR0aW5n" + 
          "c1Jlc3BvbnNlTWVzc2FnZS5SZXNwb25zZS5TZWN0aW9uS2V5cxINCgV0aXRs" + 
          "ZRgGIAEoCRITCgtkZXNjcmlwdGlvbhgHIAEoCRIuCg1yZXF1aXJlZF90eXBl" + 
          "GBEgASgOMhcuUGx1Z2luLkNvbW1vbi5EYXRhVHlwZRoaCgtTZWN0aW9uS2V5" + 
          "cxILCgNrZXkYASADKAkijQIKCExvZ0VudHJ5EiUKBWVudHJ5GAEgAygLMhYu" + 
          "UGx1Z2luLkxvZ0VudHJ5LkVudHJ5GtkBCgVFbnRyeRIrCgVsZXZlbBgBIAIo" + 
          "DjIcLlBsdWdpbi5Mb2dFbnRyeS5FbnRyeS5MZXZlbBIOCgZzZW5kZXIYAiAB" + 
          "KAkSDAoEZmlsZRgDIAEoCRIMCgRsaW5lGAQgASgFEg8KB21lc3NhZ2UYBSAB" + 
          "KAkSDAoEZGF0ZRgGIAEoBSJYCgVMZXZlbBIOCglMT0dfREVCVUcQ9AMSDQoI" + 
          "TE9HX0lORk8QlgESDwoLTE9HX1dBUk5JTkcQMhINCglMT0dfRVJST1IQChIQ" + 
          "CgxMT0dfQ1JJVElDQUwQAQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Plugin_Common__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Plugin_Common__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common, global::Plugin.Common.Builder>(internal__static_Plugin_Common__Descriptor,
                new string[] { });
        internal__static_Plugin_Common_AnyDataType__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[0];
        internal__static_Plugin_Common_AnyDataType__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.AnyDataType, global::Plugin.Common.Types.AnyDataType.Builder>(internal__static_Plugin_Common_AnyDataType__Descriptor,
                new string[] { "Type", "StringData", "IntData", "FloatData", "BoolData", });
        internal__static_Plugin_Common_KeyValue__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[1];
        internal__static_Plugin_Common_KeyValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.KeyValue, global::Plugin.Common.Types.KeyValue.Builder>(internal__static_Plugin_Common_KeyValue__Descriptor,
                new string[] { "Key", "Value", "Data", });
        internal__static_Plugin_Common_Host__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[2];
        internal__static_Plugin_Common_Host__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Host, global::Plugin.Common.Types.Host.Builder>(internal__static_Plugin_Common_Host__Descriptor,
                new string[] { "Id", "Host_", "Address", "Protocol", "Comment", "Metadata", "Tags", });
        internal__static_Plugin_Common_Header__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[3];
        internal__static_Plugin_Common_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Header, global::Plugin.Common.Types.Header.Builder>(internal__static_Plugin_Common_Header__Descriptor,
                new string[] { "Version", "MaxSupportedVersion", "SourceId", "SenderId", "RecipientId", "DestinationId", "MessageId", "Metadata", "Tags", "Hosts", });
        internal__static_Plugin_Common_Attachment__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[4];
        internal__static_Plugin_Common_Attachment__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Attachment, global::Plugin.Common.Types.Attachment.Builder>(internal__static_Plugin_Common_Attachment__Descriptor,
                new string[] { "Id", "Type", "Metadata", "Tags", "Data", });
        internal__static_Plugin_Common_PerformanceData__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[5];
        internal__static_Plugin_Common_PerformanceData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData, global::Plugin.Common.Types.PerformanceData.Builder>(internal__static_Plugin_Common_PerformanceData__Descriptor,
                new string[] { "Alias", "Type", "IntValue", "StringValue", "FloatValue", "BoolValue", });
        internal__static_Plugin_Common_PerformanceData_IntValue__Descriptor = internal__static_Plugin_Common_PerformanceData__Descriptor.NestedTypes[0];
        internal__static_Plugin_Common_PerformanceData_IntValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.IntValue, global::Plugin.Common.Types.PerformanceData.Types.IntValue.Builder>(internal__static_Plugin_Common_PerformanceData_IntValue__Descriptor,
                new string[] { "Value", "Unit", "Warning", "Critical", "Minimum", "Maximum", });
        internal__static_Plugin_Common_PerformanceData_StringValue__Descriptor = internal__static_Plugin_Common_PerformanceData__Descriptor.NestedTypes[1];
        internal__static_Plugin_Common_PerformanceData_StringValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.StringValue, global::Plugin.Common.Types.PerformanceData.Types.StringValue.Builder>(internal__static_Plugin_Common_PerformanceData_StringValue__Descriptor,
                new string[] { "Value", });
        internal__static_Plugin_Common_PerformanceData_FloatValue__Descriptor = internal__static_Plugin_Common_PerformanceData__Descriptor.NestedTypes[2];
        internal__static_Plugin_Common_PerformanceData_FloatValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.FloatValue, global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Builder>(internal__static_Plugin_Common_PerformanceData_FloatValue__Descriptor,
                new string[] { "Value", "Unit", "Warning", "Critical", "Minimum", "Maximum", });
        internal__static_Plugin_Common_PerformanceData_BoolValue__Descriptor = internal__static_Plugin_Common_PerformanceData__Descriptor.NestedTypes[3];
        internal__static_Plugin_Common_PerformanceData_BoolValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.PerformanceData.Types.BoolValue, global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Builder>(internal__static_Plugin_Common_PerformanceData_BoolValue__Descriptor,
                new string[] { "Value", "Unit", "Warning", "Critical", });
        internal__static_Plugin_Common_Status__Descriptor = internal__static_Plugin_Common__Descriptor.NestedTypes[6];
        internal__static_Plugin_Common_Status__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Common.Types.Status, global::Plugin.Common.Types.Status.Builder>(internal__static_Plugin_Common_Status__Descriptor,
                new string[] { "Status_", "Message", "Data", });
        internal__static_Plugin_QueryRequestMessage__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Plugin_QueryRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryRequestMessage, global::Plugin.QueryRequestMessage.Builder>(internal__static_Plugin_QueryRequestMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_QueryRequestMessage_Request__Descriptor = internal__static_Plugin_QueryRequestMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_QueryRequestMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryRequestMessage.Types.Request, global::Plugin.QueryRequestMessage.Types.Request.Builder>(internal__static_Plugin_QueryRequestMessage_Request__Descriptor,
                new string[] { "Id", "Target", "Command", "Alias", "Arguments", "Attachments", });
        internal__static_Plugin_QueryResponseMessage__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Plugin_QueryResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage, global::Plugin.QueryResponseMessage.Builder>(internal__static_Plugin_QueryResponseMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_QueryResponseMessage_Response__Descriptor = internal__static_Plugin_QueryResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_QueryResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QueryResponseMessage.Types.Response, global::Plugin.QueryResponseMessage.Types.Response.Builder>(internal__static_Plugin_QueryResponseMessage_Response__Descriptor,
                new string[] { "Id", "Source", "Command", "Alias", "Arguments", "Result", "Message", "Perf", "Attachments", });
        internal__static_Plugin_ExecuteRequestMessage__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Plugin_ExecuteRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteRequestMessage, global::Plugin.ExecuteRequestMessage.Builder>(internal__static_Plugin_ExecuteRequestMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_ExecuteRequestMessage_Request__Descriptor = internal__static_Plugin_ExecuteRequestMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_ExecuteRequestMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteRequestMessage.Types.Request, global::Plugin.ExecuteRequestMessage.Types.Request.Builder>(internal__static_Plugin_ExecuteRequestMessage_Request__Descriptor,
                new string[] { "Id", "Command", "Arguments", "Attachments", });
        internal__static_Plugin_ExecuteResponseMessage__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Plugin_ExecuteResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage, global::Plugin.ExecuteResponseMessage.Builder>(internal__static_Plugin_ExecuteResponseMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor = internal__static_Plugin_ExecuteResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_ExecuteResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response, global::Plugin.ExecuteResponseMessage.Types.Response.Builder>(internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor,
                new string[] { "Id", "Command", "Arguments", "Result", "Message", "Data", "Attachments", });
        internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__Descriptor = internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor.NestedTypes[0];
        internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Builder>(internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__Descriptor,
                new string[] { "Alias", "Headers", "Rows", });
        internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataCell__Descriptor = internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__Descriptor.NestedTypes[0];
        internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataCell__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell.Builder>(internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataCell__Descriptor,
                new string[] { "Data", "Tag", });
        internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataRow__Descriptor = internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__Descriptor.NestedTypes[1];
        internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataRow__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.Builder>(internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataRow__Descriptor,
                new string[] { "Cells", });
        internal__static_Plugin_SubmitRequestMessage__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Plugin_SubmitRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitRequestMessage, global::Plugin.SubmitRequestMessage.Builder>(internal__static_Plugin_SubmitRequestMessage__Descriptor,
                new string[] { "Header", "Channel", "Payload", "Attachments", });
        internal__static_Plugin_SubmitResponseMessage__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Plugin_SubmitResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitResponseMessage, global::Plugin.SubmitResponseMessage.Builder>(internal__static_Plugin_SubmitResponseMessage__Descriptor,
                new string[] { "Header", "Payload", "Attachments", });
        internal__static_Plugin_SubmitResponseMessage_Response__Descriptor = internal__static_Plugin_SubmitResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_SubmitResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.SubmitResponseMessage.Types.Response, global::Plugin.SubmitResponseMessage.Types.Response.Builder>(internal__static_Plugin_SubmitResponseMessage_Response__Descriptor,
                new string[] { "Id", "Command", "Status", "Attachments", });
        internal__static_Plugin_Settings__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Plugin_Settings__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings, global::Plugin.Settings.Builder>(internal__static_Plugin_Settings__Descriptor,
                new string[] { });
        internal__static_Plugin_Settings_Node__Descriptor = internal__static_Plugin_Settings__Descriptor.NestedTypes[0];
        internal__static_Plugin_Settings_Node__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Node, global::Plugin.Settings.Types.Node.Builder>(internal__static_Plugin_Settings_Node__Descriptor,
                new string[] { "Path", "Expression", });
        internal__static_Plugin_Settings_Node_Path__Descriptor = internal__static_Plugin_Settings_Node__Descriptor.NestedTypes[0];
        internal__static_Plugin_Settings_Node_Path__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.Settings.Types.Node.Types.Path, global::Plugin.Settings.Types.Node.Types.Path.Builder>(internal__static_Plugin_Settings_Node_Path__Descriptor,
                new string[] { "Path_", "Key", });
        internal__static_Plugin_QuerySettingsRequestMessage__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Plugin_QuerySettingsRequestMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsRequestMessage, global::Plugin.QuerySettingsRequestMessage.Builder>(internal__static_Plugin_QuerySettingsRequestMessage__Descriptor,
                new string[] { "Header", "Payload", });
        internal__static_Plugin_QuerySettingsRequestMessage_Request__Descriptor = internal__static_Plugin_QuerySettingsRequestMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_QuerySettingsRequestMessage_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsRequestMessage.Types.Request, global::Plugin.QuerySettingsRequestMessage.Types.Request.Builder>(internal__static_Plugin_QuerySettingsRequestMessage_Request__Descriptor,
                new string[] { "Id", "Node", "Default", "FetchDescriptions", "ReturnType", });
        internal__static_Plugin_QuerySettingsResponseMessage__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Plugin_QuerySettingsResponseMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsResponseMessage, global::Plugin.QuerySettingsResponseMessage.Builder>(internal__static_Plugin_QuerySettingsResponseMessage__Descriptor,
                new string[] { "Header", "Payload", });
        internal__static_Plugin_QuerySettingsResponseMessage_Response__Descriptor = internal__static_Plugin_QuerySettingsResponseMessage__Descriptor.NestedTypes[0];
        internal__static_Plugin_QuerySettingsResponseMessage_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsResponseMessage.Types.Response, global::Plugin.QuerySettingsResponseMessage.Types.Response.Builder>(internal__static_Plugin_QuerySettingsResponseMessage_Response__Descriptor,
                new string[] { "Id", "Node", "Value", "Keys", "Title", "Description", "RequiredType", });
        internal__static_Plugin_QuerySettingsResponseMessage_Response_SectionKeys__Descriptor = internal__static_Plugin_QuerySettingsResponseMessage_Response__Descriptor.NestedTypes[0];
        internal__static_Plugin_QuerySettingsResponseMessage_Response_SectionKeys__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys, global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.Builder>(internal__static_Plugin_QuerySettingsResponseMessage_Response_SectionKeys__Descriptor,
                new string[] { "Key", });
        internal__static_Plugin_LogEntry__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Plugin_LogEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.LogEntry, global::Plugin.LogEntry.Builder>(internal__static_Plugin_LogEntry__Descriptor,
                new string[] { "Entry", });
        internal__static_Plugin_LogEntry_Entry__Descriptor = internal__static_Plugin_LogEntry__Descriptor.NestedTypes[0];
        internal__static_Plugin_LogEntry_Entry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Plugin.LogEntry.Types.Entry, global::Plugin.LogEntry.Types.Entry.Builder>(internal__static_Plugin_LogEntry_Entry__Descriptor,
                new string[] { "Level", "Sender", "File", "Line", "Message", "Date", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Common : pb::GeneratedMessage<Common, Common.Builder> {
    private Common() { }
    private static readonly Common defaultInstance = new Common().MakeReadOnly();
    private static readonly string[] _commonFieldNames = new string[] {  };
    private static readonly uint[] _commonFieldTags = new uint[] {  };
    public static Common DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Common DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Common ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_Common__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Common, Common.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_Common__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum ResultCode {
        OK = 0,
        WARNING = 1,
        CRITCAL = 2,
        UNKNOWN = 3,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum DataType {
        INT = 1,
        STRING = 1,
        FLOAT = 1,
        BOOL = 1,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Version {
        VERSION_1 = 1,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class AnyDataType : pb::GeneratedMessage<AnyDataType, AnyDataType.Builder> {
        private AnyDataType() { }
        private static readonly AnyDataType defaultInstance = new AnyDataType().MakeReadOnly();
        private static readonly string[] _anyDataTypeFieldNames = new string[] { "bool_data", "float_data", "int_data", "string_data", "type" };
        private static readonly uint[] _anyDataTypeFieldTags = new uint[] { 40, 33, 24, 18, 8 };
        public static AnyDataType DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override AnyDataType DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override AnyDataType ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_AnyDataType__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<AnyDataType, AnyDataType.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_AnyDataType__FieldAccessorTable; }
        }
        
        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::Plugin.Common.Types.DataType type_ = global::Plugin.Common.Types.DataType.INT;
        public bool HasType {
          get { return hasType; }
        }
        public global::Plugin.Common.Types.DataType Type {
          get { return type_; }
        }
        
        public const int StringDataFieldNumber = 2;
        private bool hasStringData;
        private string stringData_ = "";
        public bool HasStringData {
          get { return hasStringData; }
        }
        public string StringData {
          get { return stringData_; }
        }
        
        public const int IntDataFieldNumber = 3;
        private bool hasIntData;
        private long intData_;
        public bool HasIntData {
          get { return hasIntData; }
        }
        public long IntData {
          get { return intData_; }
        }
        
        public const int FloatDataFieldNumber = 4;
        private bool hasFloatData;
        private double floatData_;
        public bool HasFloatData {
          get { return hasFloatData; }
        }
        public double FloatData {
          get { return floatData_; }
        }
        
        public const int BoolDataFieldNumber = 5;
        private bool hasBoolData;
        private bool boolData_;
        public bool HasBoolData {
          get { return hasBoolData; }
        }
        public bool BoolData {
          get { return boolData_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasType) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _anyDataTypeFieldNames;
          if (hasType) {
            output.WriteEnum(1, field_names[4], (int) Type, Type);
          }
          if (hasStringData) {
            output.WriteString(2, field_names[3], StringData);
          }
          if (hasIntData) {
            output.WriteInt64(3, field_names[2], IntData);
          }
          if (hasFloatData) {
            output.WriteDouble(4, field_names[1], FloatData);
          }
          if (hasBoolData) {
            output.WriteBool(5, field_names[0], BoolData);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasType) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
            }
            if (hasStringData) {
              size += pb::CodedOutputStream.ComputeStringSize(2, StringData);
            }
            if (hasIntData) {
              size += pb::CodedOutputStream.ComputeInt64Size(3, IntData);
            }
            if (hasFloatData) {
              size += pb::CodedOutputStream.ComputeDoubleSize(4, FloatData);
            }
            if (hasBoolData) {
              size += pb::CodedOutputStream.ComputeBoolSize(5, BoolData);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static AnyDataType ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AnyDataType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AnyDataType ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AnyDataType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AnyDataType ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AnyDataType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AnyDataType ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AnyDataType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AnyDataType ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AnyDataType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AnyDataType MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AnyDataType prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<AnyDataType, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AnyDataType cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private AnyDataType result;
          
          private AnyDataType PrepareBuilder() {
            if (resultIsReadOnly) {
              AnyDataType original = result;
              result = new AnyDataType();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override AnyDataType MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.AnyDataType.Descriptor; }
          }
          
          public override AnyDataType DefaultInstanceForType {
            get { return global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
          }
          
          public override AnyDataType BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AnyDataType) {
              return MergeFrom((AnyDataType) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(AnyDataType other) {
            if (other == global::Plugin.Common.Types.AnyDataType.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasStringData) {
              StringData = other.StringData;
            }
            if (other.HasIntData) {
              IntData = other.IntData;
            }
            if (other.HasFloatData) {
              FloatData = other.FloatData;
            }
            if (other.HasBoolData) {
              BoolData = other.BoolData;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_anyDataTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _anyDataTypeFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 18: {
                  result.hasStringData = input.ReadString(ref result.stringData_);
                  break;
                }
                case 24: {
                  result.hasIntData = input.ReadInt64(ref result.intData_);
                  break;
                }
                case 33: {
                  result.hasFloatData = input.ReadDouble(ref result.floatData_);
                  break;
                }
                case 40: {
                  result.hasBoolData = input.ReadBool(ref result.boolData_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasType {
           get { return result.hasType; }
          }
          public global::Plugin.Common.Types.DataType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::Plugin.Common.Types.DataType value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::Plugin.Common.Types.DataType.INT;
            return this;
          }
          
          public bool HasStringData {
            get { return result.hasStringData; }
          }
          public string StringData {
            get { return result.StringData; }
            set { SetStringData(value); }
          }
          public Builder SetStringData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStringData = true;
            result.stringData_ = value;
            return this;
          }
          public Builder ClearStringData() {
            PrepareBuilder();
            result.hasStringData = false;
            result.stringData_ = "";
            return this;
          }
          
          public bool HasIntData {
            get { return result.hasIntData; }
          }
          public long IntData {
            get { return result.IntData; }
            set { SetIntData(value); }
          }
          public Builder SetIntData(long value) {
            PrepareBuilder();
            result.hasIntData = true;
            result.intData_ = value;
            return this;
          }
          public Builder ClearIntData() {
            PrepareBuilder();
            result.hasIntData = false;
            result.intData_ = 0L;
            return this;
          }
          
          public bool HasFloatData {
            get { return result.hasFloatData; }
          }
          public double FloatData {
            get { return result.FloatData; }
            set { SetFloatData(value); }
          }
          public Builder SetFloatData(double value) {
            PrepareBuilder();
            result.hasFloatData = true;
            result.floatData_ = value;
            return this;
          }
          public Builder ClearFloatData() {
            PrepareBuilder();
            result.hasFloatData = false;
            result.floatData_ = 0D;
            return this;
          }
          
          public bool HasBoolData {
            get { return result.hasBoolData; }
          }
          public bool BoolData {
            get { return result.BoolData; }
            set { SetBoolData(value); }
          }
          public Builder SetBoolData(bool value) {
            PrepareBuilder();
            result.hasBoolData = true;
            result.boolData_ = value;
            return this;
          }
          public Builder ClearBoolData() {
            PrepareBuilder();
            result.hasBoolData = false;
            result.boolData_ = false;
            return this;
          }
        }
        static AnyDataType() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class KeyValue : pb::GeneratedMessage<KeyValue, KeyValue.Builder> {
        private KeyValue() { }
        private static readonly KeyValue defaultInstance = new KeyValue().MakeReadOnly();
        private static readonly string[] _keyValueFieldNames = new string[] { "data", "key", "value" };
        private static readonly uint[] _keyValueFieldTags = new uint[] { 26, 10, 18 };
        public static KeyValue DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override KeyValue DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override KeyValue ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_KeyValue__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<KeyValue, KeyValue.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_KeyValue__FieldAccessorTable; }
        }
        
        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private string key_ = "";
        public bool HasKey {
          get { return hasKey; }
        }
        public string Key {
          get { return key_; }
        }
        
        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private string value_ = "";
        public bool HasValue {
          get { return hasValue; }
        }
        public string Value {
          get { return value_; }
        }
        
        public const int DataFieldNumber = 3;
        private pbc::PopsicleList<string> data_ = new pbc::PopsicleList<string>();
        public scg::IList<string> DataList {
          get { return pbc::Lists.AsReadOnly(data_); }
        }
        public int DataCount {
          get { return data_.Count; }
        }
        public string GetData(int index) {
          return data_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasKey) return false;
            if (!hasValue) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _keyValueFieldNames;
          if (hasKey) {
            output.WriteString(1, field_names[1], Key);
          }
          if (hasValue) {
            output.WriteString(2, field_names[2], Value);
          }
          if (data_.Count > 0) {
            output.WriteStringArray(3, field_names[0], data_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasKey) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Key);
            }
            if (hasValue) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Value);
            }
            {
              int dataSize = 0;
              foreach (string element in DataList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * data_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static KeyValue ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValue ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValue ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KeyValue ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KeyValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KeyValue ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KeyValue MakeReadOnly() {
          data_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KeyValue prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<KeyValue, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(KeyValue cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private KeyValue result;
          
          private KeyValue PrepareBuilder() {
            if (resultIsReadOnly) {
              KeyValue original = result;
              result = new KeyValue();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override KeyValue MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.KeyValue.Descriptor; }
          }
          
          public override KeyValue DefaultInstanceForType {
            get { return global::Plugin.Common.Types.KeyValue.DefaultInstance; }
          }
          
          public override KeyValue BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is KeyValue) {
              return MergeFrom((KeyValue) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(KeyValue other) {
            if (other == global::Plugin.Common.Types.KeyValue.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasKey) {
              Key = other.Key;
            }
            if (other.HasValue) {
              Value = other.Value;
            }
            if (other.data_.Count != 0) {
              result.data_.Add(other.data_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_keyValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _keyValueFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasKey = input.ReadString(ref result.key_);
                  break;
                }
                case 18: {
                  result.hasValue = input.ReadString(ref result.value_);
                  break;
                }
                case 26: {
                  input.ReadStringArray(tag, field_name, result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasKey {
            get { return result.hasKey; }
          }
          public string Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasKey = true;
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.hasKey = false;
            result.key_ = "";
            return this;
          }
          
          public bool HasValue {
            get { return result.hasValue; }
          }
          public string Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> DataList {
            get { return PrepareBuilder().data_; }
          }
          public int DataCount {
            get { return result.DataCount; }
          }
          public string GetData(int index) {
            return result.GetData(index);
          }
          public Builder SetData(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.data_[index] = value;
            return this;
          }
          public Builder AddData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.data_.Add(value);
            return this;
          }
          public Builder AddRangeData(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.data_.Add(values);
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.data_.Clear();
            return this;
          }
        }
        static KeyValue() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Host : pb::GeneratedMessage<Host, Host.Builder> {
        private Host() { }
        private static readonly Host defaultInstance = new Host().MakeReadOnly();
        private static readonly string[] _hostFieldNames = new string[] { "address", "comment", "host", "id", "metadata", "protocol", "tags" };
        private static readonly uint[] _hostFieldTags = new uint[] { 26, 42, 18, 10, 50, 34, 58 };
        public static Host DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Host DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Host ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Host__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Host, Host.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Host__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private string id_ = "";
        public bool HasId {
          get { return hasId; }
        }
        public string Id {
          get { return id_; }
        }
        
        public const int Host_FieldNumber = 2;
        private bool hasHost_;
        private string host_ = "";
        public bool HasHost_ {
          get { return hasHost_; }
        }
        public string Host_ {
          get { return host_; }
        }
        
        public const int AddressFieldNumber = 3;
        private bool hasAddress;
        private string address_ = "";
        public bool HasAddress {
          get { return hasAddress; }
        }
        public string Address {
          get { return address_; }
        }
        
        public const int ProtocolFieldNumber = 4;
        private bool hasProtocol;
        private string protocol_ = "";
        public bool HasProtocol {
          get { return hasProtocol; }
        }
        public string Protocol {
          get { return protocol_; }
        }
        
        public const int CommentFieldNumber = 5;
        private bool hasComment;
        private string comment_ = "";
        public bool HasComment {
          get { return hasComment; }
        }
        public string Comment {
          get { return comment_; }
        }
        
        public const int MetadataFieldNumber = 6;
        private pbc::PopsicleList<global::Plugin.Common.Types.KeyValue> metadata_ = new pbc::PopsicleList<global::Plugin.Common.Types.KeyValue>();
        public scg::IList<global::Plugin.Common.Types.KeyValue> MetadataList {
          get { return metadata_; }
        }
        public int MetadataCount {
          get { return metadata_.Count; }
        }
        public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
          return metadata_[index];
        }
        
        public const int TagsFieldNumber = 7;
        private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
        public scg::IList<string> TagsList {
          get { return pbc::Lists.AsReadOnly(tags_); }
        }
        public int TagsCount {
          get { return tags_.Count; }
        }
        public string GetTags(int index) {
          return tags_[index];
        }
        
        public override bool IsInitialized {
          get {
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _hostFieldNames;
          if (hasId) {
            output.WriteString(1, field_names[3], Id);
          }
          if (hasHost_) {
            output.WriteString(2, field_names[2], Host_);
          }
          if (hasAddress) {
            output.WriteString(3, field_names[0], Address);
          }
          if (hasProtocol) {
            output.WriteString(4, field_names[5], Protocol);
          }
          if (hasComment) {
            output.WriteString(5, field_names[1], Comment);
          }
          if (metadata_.Count > 0) {
            output.WriteMessageArray(6, field_names[4], metadata_);
          }
          if (tags_.Count > 0) {
            output.WriteStringArray(7, field_names[6], tags_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Id);
            }
            if (hasHost_) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Host_);
            }
            if (hasAddress) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Address);
            }
            if (hasProtocol) {
              size += pb::CodedOutputStream.ComputeStringSize(4, Protocol);
            }
            if (hasComment) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Comment);
            }
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              size += pb::CodedOutputStream.ComputeMessageSize(6, element);
            }
            {
              int dataSize = 0;
              foreach (string element in TagsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * tags_.Count;
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Host ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Host ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Host ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Host ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Host ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Host ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Host ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Host ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Host ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Host ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Host MakeReadOnly() {
          metadata_.MakeReadOnly();
          tags_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Host prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Host, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Host cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Host result;
          
          private Host PrepareBuilder() {
            if (resultIsReadOnly) {
              Host original = result;
              result = new Host();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Host MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.Host.Descriptor; }
          }
          
          public override Host DefaultInstanceForType {
            get { return global::Plugin.Common.Types.Host.DefaultInstance; }
          }
          
          public override Host BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Host) {
              return MergeFrom((Host) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Host other) {
            if (other == global::Plugin.Common.Types.Host.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasHost_) {
              Host_ = other.Host_;
            }
            if (other.HasAddress) {
              Address = other.Address;
            }
            if (other.HasProtocol) {
              Protocol = other.Protocol;
            }
            if (other.HasComment) {
              Comment = other.Comment;
            }
            if (other.metadata_.Count != 0) {
              result.metadata_.Add(other.metadata_);
            }
            if (other.tags_.Count != 0) {
              result.tags_.Add(other.tags_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_hostFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _hostFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasId = input.ReadString(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasHost_ = input.ReadString(ref result.host_);
                  break;
                }
                case 26: {
                  result.hasAddress = input.ReadString(ref result.address_);
                  break;
                }
                case 34: {
                  result.hasProtocol = input.ReadString(ref result.protocol_);
                  break;
                }
                case 42: {
                  result.hasComment = input.ReadString(ref result.comment_);
                  break;
                }
                case 50: {
                  input.ReadMessageArray(tag, field_name, result.metadata_, global::Plugin.Common.Types.KeyValue.DefaultInstance, extensionRegistry);
                  break;
                }
                case 58: {
                  input.ReadStringArray(tag, field_name, result.tags_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public string Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = "";
            return this;
          }
          
          public bool HasHost_ {
            get { return result.hasHost_; }
          }
          public string Host_ {
            get { return result.Host_; }
            set { SetHost_(value); }
          }
          public Builder SetHost_(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasHost_ = true;
            result.host_ = value;
            return this;
          }
          public Builder ClearHost_() {
            PrepareBuilder();
            result.hasHost_ = false;
            result.host_ = "";
            return this;
          }
          
          public bool HasAddress {
            get { return result.hasAddress; }
          }
          public string Address {
            get { return result.Address; }
            set { SetAddress(value); }
          }
          public Builder SetAddress(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAddress = true;
            result.address_ = value;
            return this;
          }
          public Builder ClearAddress() {
            PrepareBuilder();
            result.hasAddress = false;
            result.address_ = "";
            return this;
          }
          
          public bool HasProtocol {
            get { return result.hasProtocol; }
          }
          public string Protocol {
            get { return result.Protocol; }
            set { SetProtocol(value); }
          }
          public Builder SetProtocol(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasProtocol = true;
            result.protocol_ = value;
            return this;
          }
          public Builder ClearProtocol() {
            PrepareBuilder();
            result.hasProtocol = false;
            result.protocol_ = "";
            return this;
          }
          
          public bool HasComment {
            get { return result.hasComment; }
          }
          public string Comment {
            get { return result.Comment; }
            set { SetComment(value); }
          }
          public Builder SetComment(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasComment = true;
            result.comment_ = value;
            return this;
          }
          public Builder ClearComment() {
            PrepareBuilder();
            result.hasComment = false;
            result.comment_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.KeyValue> MetadataList {
            get { return PrepareBuilder().metadata_; }
          }
          public int MetadataCount {
            get { return result.MetadataCount; }
          }
          public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
            return result.GetMetadata(index);
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_[index] = value;
            return this;
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_.Add(value);
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeMetadata(scg::IEnumerable<global::Plugin.Common.Types.KeyValue> values) {
            PrepareBuilder();
            result.metadata_.Add(values);
            return this;
          }
          public Builder ClearMetadata() {
            PrepareBuilder();
            result.metadata_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<string> TagsList {
            get { return PrepareBuilder().tags_; }
          }
          public int TagsCount {
            get { return result.TagsCount; }
          }
          public string GetTags(int index) {
            return result.GetTags(index);
          }
          public Builder SetTags(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_[index] = value;
            return this;
          }
          public Builder AddTags(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_.Add(value);
            return this;
          }
          public Builder AddRangeTags(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.tags_.Add(values);
            return this;
          }
          public Builder ClearTags() {
            PrepareBuilder();
            result.tags_.Clear();
            return this;
          }
        }
        static Host() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
        private Header() { }
        private static readonly Header defaultInstance = new Header().MakeReadOnly();
        private static readonly string[] _headerFieldNames = new string[] { "destination_id", "hosts", "max_supported_version", "message_id", "metadata", "recipient_id", "sender_id", "source_id", "tags", "version" };
        private static readonly uint[] _headerFieldTags = new uint[] { 50, 82, 16, 128, 66, 42, 34, 26, 74, 8 };
        public static Header DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Header DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Header ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Header__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Header__FieldAccessorTable; }
        }
        
        public const int VersionFieldNumber = 1;
        private bool hasVersion;
        private global::Plugin.Common.Types.Version version_ = global::Plugin.Common.Types.Version.VERSION_1;
        public bool HasVersion {
          get { return hasVersion; }
        }
        public global::Plugin.Common.Types.Version Version {
          get { return version_; }
        }
        
        public const int MaxSupportedVersionFieldNumber = 2;
        private bool hasMaxSupportedVersion;
        private global::Plugin.Common.Types.Version maxSupportedVersion_ = global::Plugin.Common.Types.Version.VERSION_1;
        public bool HasMaxSupportedVersion {
          get { return hasMaxSupportedVersion; }
        }
        public global::Plugin.Common.Types.Version MaxSupportedVersion {
          get { return maxSupportedVersion_; }
        }
        
        public const int SourceIdFieldNumber = 3;
        private bool hasSourceId;
        private string sourceId_ = "";
        public bool HasSourceId {
          get { return hasSourceId; }
        }
        public string SourceId {
          get { return sourceId_; }
        }
        
        public const int SenderIdFieldNumber = 4;
        private bool hasSenderId;
        private string senderId_ = "";
        public bool HasSenderId {
          get { return hasSenderId; }
        }
        public string SenderId {
          get { return senderId_; }
        }
        
        public const int RecipientIdFieldNumber = 5;
        private bool hasRecipientId;
        private string recipientId_ = "";
        public bool HasRecipientId {
          get { return hasRecipientId; }
        }
        public string RecipientId {
          get { return recipientId_; }
        }
        
        public const int DestinationIdFieldNumber = 6;
        private bool hasDestinationId;
        private string destinationId_ = "";
        public bool HasDestinationId {
          get { return hasDestinationId; }
        }
        public string DestinationId {
          get { return destinationId_; }
        }
        
        public const int MessageIdFieldNumber = 16;
        private bool hasMessageId;
        private long messageId_;
        public bool HasMessageId {
          get { return hasMessageId; }
        }
        public long MessageId {
          get { return messageId_; }
        }
        
        public const int MetadataFieldNumber = 8;
        private pbc::PopsicleList<global::Plugin.Common.Types.KeyValue> metadata_ = new pbc::PopsicleList<global::Plugin.Common.Types.KeyValue>();
        public scg::IList<global::Plugin.Common.Types.KeyValue> MetadataList {
          get { return metadata_; }
        }
        public int MetadataCount {
          get { return metadata_.Count; }
        }
        public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
          return metadata_[index];
        }
        
        public const int TagsFieldNumber = 9;
        private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
        public scg::IList<string> TagsList {
          get { return pbc::Lists.AsReadOnly(tags_); }
        }
        public int TagsCount {
          get { return tags_.Count; }
        }
        public string GetTags(int index) {
          return tags_[index];
        }
        
        public const int HostsFieldNumber = 10;
        private pbc::PopsicleList<global::Plugin.Common.Types.Host> hosts_ = new pbc::PopsicleList<global::Plugin.Common.Types.Host>();
        public scg::IList<global::Plugin.Common.Types.Host> HostsList {
          get { return hosts_; }
        }
        public int HostsCount {
          get { return hosts_.Count; }
        }
        public global::Plugin.Common.Types.Host GetHosts(int index) {
          return hosts_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasVersion) return false;
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              if (!element.IsInitialized) return false;
            }
            foreach (global::Plugin.Common.Types.Host element in HostsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _headerFieldNames;
          if (hasVersion) {
            output.WriteEnum(1, field_names[9], (int) Version, Version);
          }
          if (hasMaxSupportedVersion) {
            output.WriteEnum(2, field_names[2], (int) MaxSupportedVersion, MaxSupportedVersion);
          }
          if (hasSourceId) {
            output.WriteString(3, field_names[7], SourceId);
          }
          if (hasSenderId) {
            output.WriteString(4, field_names[6], SenderId);
          }
          if (hasRecipientId) {
            output.WriteString(5, field_names[5], RecipientId);
          }
          if (hasDestinationId) {
            output.WriteString(6, field_names[0], DestinationId);
          }
          if (metadata_.Count > 0) {
            output.WriteMessageArray(8, field_names[4], metadata_);
          }
          if (tags_.Count > 0) {
            output.WriteStringArray(9, field_names[8], tags_);
          }
          if (hosts_.Count > 0) {
            output.WriteMessageArray(10, field_names[1], hosts_);
          }
          if (hasMessageId) {
            output.WriteInt64(16, field_names[3], MessageId);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasVersion) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Version);
            }
            if (hasMaxSupportedVersion) {
              size += pb::CodedOutputStream.ComputeEnumSize(2, (int) MaxSupportedVersion);
            }
            if (hasSourceId) {
              size += pb::CodedOutputStream.ComputeStringSize(3, SourceId);
            }
            if (hasSenderId) {
              size += pb::CodedOutputStream.ComputeStringSize(4, SenderId);
            }
            if (hasRecipientId) {
              size += pb::CodedOutputStream.ComputeStringSize(5, RecipientId);
            }
            if (hasDestinationId) {
              size += pb::CodedOutputStream.ComputeStringSize(6, DestinationId);
            }
            if (hasMessageId) {
              size += pb::CodedOutputStream.ComputeInt64Size(16, MessageId);
            }
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              size += pb::CodedOutputStream.ComputeMessageSize(8, element);
            }
            {
              int dataSize = 0;
              foreach (string element in TagsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * tags_.Count;
            }
            foreach (global::Plugin.Common.Types.Host element in HostsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(10, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Header ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Header ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Header ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Header ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Header MakeReadOnly() {
          metadata_.MakeReadOnly();
          tags_.MakeReadOnly();
          hosts_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Header prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Header cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Header result;
          
          private Header PrepareBuilder() {
            if (resultIsReadOnly) {
              Header original = result;
              result = new Header();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Header MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.Header.Descriptor; }
          }
          
          public override Header DefaultInstanceForType {
            get { return global::Plugin.Common.Types.Header.DefaultInstance; }
          }
          
          public override Header BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Header) {
              return MergeFrom((Header) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Header other) {
            if (other == global::Plugin.Common.Types.Header.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasVersion) {
              Version = other.Version;
            }
            if (other.HasMaxSupportedVersion) {
              MaxSupportedVersion = other.MaxSupportedVersion;
            }
            if (other.HasSourceId) {
              SourceId = other.SourceId;
            }
            if (other.HasSenderId) {
              SenderId = other.SenderId;
            }
            if (other.HasRecipientId) {
              RecipientId = other.RecipientId;
            }
            if (other.HasDestinationId) {
              DestinationId = other.DestinationId;
            }
            if (other.HasMessageId) {
              MessageId = other.MessageId;
            }
            if (other.metadata_.Count != 0) {
              result.metadata_.Add(other.metadata_);
            }
            if (other.tags_.Count != 0) {
              result.tags_.Add(other.tags_);
            }
            if (other.hosts_.Count != 0) {
              result.hosts_.Add(other.hosts_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_headerFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _headerFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.version_, out unknown)) {
                    result.hasVersion = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.maxSupportedVersion_, out unknown)) {
                    result.hasMaxSupportedVersion = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(2, (ulong)(int)unknown);
                  }
                  break;
                }
                case 26: {
                  result.hasSourceId = input.ReadString(ref result.sourceId_);
                  break;
                }
                case 34: {
                  result.hasSenderId = input.ReadString(ref result.senderId_);
                  break;
                }
                case 42: {
                  result.hasRecipientId = input.ReadString(ref result.recipientId_);
                  break;
                }
                case 50: {
                  result.hasDestinationId = input.ReadString(ref result.destinationId_);
                  break;
                }
                case 66: {
                  input.ReadMessageArray(tag, field_name, result.metadata_, global::Plugin.Common.Types.KeyValue.DefaultInstance, extensionRegistry);
                  break;
                }
                case 74: {
                  input.ReadStringArray(tag, field_name, result.tags_);
                  break;
                }
                case 82: {
                  input.ReadMessageArray(tag, field_name, result.hosts_, global::Plugin.Common.Types.Host.DefaultInstance, extensionRegistry);
                  break;
                }
                case 128: {
                  result.hasMessageId = input.ReadInt64(ref result.messageId_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasVersion {
           get { return result.hasVersion; }
          }
          public global::Plugin.Common.Types.Version Version {
            get { return result.Version; }
            set { SetVersion(value); }
          }
          public Builder SetVersion(global::Plugin.Common.Types.Version value) {
            PrepareBuilder();
            result.hasVersion = true;
            result.version_ = value;
            return this;
          }
          public Builder ClearVersion() {
            PrepareBuilder();
            result.hasVersion = false;
            result.version_ = global::Plugin.Common.Types.Version.VERSION_1;
            return this;
          }
          
          public bool HasMaxSupportedVersion {
           get { return result.hasMaxSupportedVersion; }
          }
          public global::Plugin.Common.Types.Version MaxSupportedVersion {
            get { return result.MaxSupportedVersion; }
            set { SetMaxSupportedVersion(value); }
          }
          public Builder SetMaxSupportedVersion(global::Plugin.Common.Types.Version value) {
            PrepareBuilder();
            result.hasMaxSupportedVersion = true;
            result.maxSupportedVersion_ = value;
            return this;
          }
          public Builder ClearMaxSupportedVersion() {
            PrepareBuilder();
            result.hasMaxSupportedVersion = false;
            result.maxSupportedVersion_ = global::Plugin.Common.Types.Version.VERSION_1;
            return this;
          }
          
          public bool HasSourceId {
            get { return result.hasSourceId; }
          }
          public string SourceId {
            get { return result.SourceId; }
            set { SetSourceId(value); }
          }
          public Builder SetSourceId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSourceId = true;
            result.sourceId_ = value;
            return this;
          }
          public Builder ClearSourceId() {
            PrepareBuilder();
            result.hasSourceId = false;
            result.sourceId_ = "";
            return this;
          }
          
          public bool HasSenderId {
            get { return result.hasSenderId; }
          }
          public string SenderId {
            get { return result.SenderId; }
            set { SetSenderId(value); }
          }
          public Builder SetSenderId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSenderId = true;
            result.senderId_ = value;
            return this;
          }
          public Builder ClearSenderId() {
            PrepareBuilder();
            result.hasSenderId = false;
            result.senderId_ = "";
            return this;
          }
          
          public bool HasRecipientId {
            get { return result.hasRecipientId; }
          }
          public string RecipientId {
            get { return result.RecipientId; }
            set { SetRecipientId(value); }
          }
          public Builder SetRecipientId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRecipientId = true;
            result.recipientId_ = value;
            return this;
          }
          public Builder ClearRecipientId() {
            PrepareBuilder();
            result.hasRecipientId = false;
            result.recipientId_ = "";
            return this;
          }
          
          public bool HasDestinationId {
            get { return result.hasDestinationId; }
          }
          public string DestinationId {
            get { return result.DestinationId; }
            set { SetDestinationId(value); }
          }
          public Builder SetDestinationId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDestinationId = true;
            result.destinationId_ = value;
            return this;
          }
          public Builder ClearDestinationId() {
            PrepareBuilder();
            result.hasDestinationId = false;
            result.destinationId_ = "";
            return this;
          }
          
          public bool HasMessageId {
            get { return result.hasMessageId; }
          }
          public long MessageId {
            get { return result.MessageId; }
            set { SetMessageId(value); }
          }
          public Builder SetMessageId(long value) {
            PrepareBuilder();
            result.hasMessageId = true;
            result.messageId_ = value;
            return this;
          }
          public Builder ClearMessageId() {
            PrepareBuilder();
            result.hasMessageId = false;
            result.messageId_ = 0L;
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.KeyValue> MetadataList {
            get { return PrepareBuilder().metadata_; }
          }
          public int MetadataCount {
            get { return result.MetadataCount; }
          }
          public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
            return result.GetMetadata(index);
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_[index] = value;
            return this;
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_.Add(value);
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeMetadata(scg::IEnumerable<global::Plugin.Common.Types.KeyValue> values) {
            PrepareBuilder();
            result.metadata_.Add(values);
            return this;
          }
          public Builder ClearMetadata() {
            PrepareBuilder();
            result.metadata_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<string> TagsList {
            get { return PrepareBuilder().tags_; }
          }
          public int TagsCount {
            get { return result.TagsCount; }
          }
          public string GetTags(int index) {
            return result.GetTags(index);
          }
          public Builder SetTags(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_[index] = value;
            return this;
          }
          public Builder AddTags(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_.Add(value);
            return this;
          }
          public Builder AddRangeTags(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.tags_.Add(values);
            return this;
          }
          public Builder ClearTags() {
            PrepareBuilder();
            result.tags_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Host> HostsList {
            get { return PrepareBuilder().hosts_; }
          }
          public int HostsCount {
            get { return result.HostsCount; }
          }
          public global::Plugin.Common.Types.Host GetHosts(int index) {
            return result.GetHosts(index);
          }
          public Builder SetHosts(int index, global::Plugin.Common.Types.Host value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hosts_[index] = value;
            return this;
          }
          public Builder SetHosts(int index, global::Plugin.Common.Types.Host.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hosts_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddHosts(global::Plugin.Common.Types.Host value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hosts_.Add(value);
            return this;
          }
          public Builder AddHosts(global::Plugin.Common.Types.Host.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hosts_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeHosts(scg::IEnumerable<global::Plugin.Common.Types.Host> values) {
            PrepareBuilder();
            result.hosts_.Add(values);
            return this;
          }
          public Builder ClearHosts() {
            PrepareBuilder();
            result.hosts_.Clear();
            return this;
          }
        }
        static Header() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Attachment : pb::GeneratedMessage<Attachment, Attachment.Builder> {
        private Attachment() { }
        private static readonly Attachment defaultInstance = new Attachment().MakeReadOnly();
        private static readonly string[] _attachmentFieldNames = new string[] { "data", "id", "metadata", "tags", "type" };
        private static readonly uint[] _attachmentFieldTags = new uint[] { 42, 8, 26, 34, 18 };
        public static Attachment DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Attachment DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Attachment ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Attachment__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Attachment, Attachment.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Attachment__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int TypeFieldNumber = 2;
        private bool hasType;
        private string type_ = "";
        public bool HasType {
          get { return hasType; }
        }
        public string Type {
          get { return type_; }
        }
        
        public const int MetadataFieldNumber = 3;
        private pbc::PopsicleList<global::Plugin.Common.Types.KeyValue> metadata_ = new pbc::PopsicleList<global::Plugin.Common.Types.KeyValue>();
        public scg::IList<global::Plugin.Common.Types.KeyValue> MetadataList {
          get { return metadata_; }
        }
        public int MetadataCount {
          get { return metadata_.Count; }
        }
        public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
          return metadata_[index];
        }
        
        public const int TagsFieldNumber = 4;
        private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
        public scg::IList<string> TagsList {
          get { return pbc::Lists.AsReadOnly(tags_); }
        }
        public int TagsCount {
          get { return tags_.Count; }
        }
        public string GetTags(int index) {
          return tags_[index];
        }
        
        public const int DataFieldNumber = 5;
        private bool hasData;
        private string data_ = "";
        public bool HasData {
          get { return hasData; }
        }
        public string Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasType) return false;
            if (!hasData) return false;
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _attachmentFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[1], Id);
          }
          if (hasType) {
            output.WriteString(2, field_names[4], Type);
          }
          if (metadata_.Count > 0) {
            output.WriteMessageArray(3, field_names[2], metadata_);
          }
          if (tags_.Count > 0) {
            output.WriteStringArray(4, field_names[3], tags_);
          }
          if (hasData) {
            output.WriteString(5, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasType) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Type);
            }
            foreach (global::Plugin.Common.Types.KeyValue element in MetadataList) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, element);
            }
            {
              int dataSize = 0;
              foreach (string element in TagsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * tags_.Count;
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Attachment ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Attachment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Attachment ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Attachment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Attachment ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Attachment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Attachment ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Attachment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Attachment ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Attachment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Attachment MakeReadOnly() {
          metadata_.MakeReadOnly();
          tags_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Attachment prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Attachment, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Attachment cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Attachment result;
          
          private Attachment PrepareBuilder() {
            if (resultIsReadOnly) {
              Attachment original = result;
              result = new Attachment();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Attachment MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.Attachment.Descriptor; }
          }
          
          public override Attachment DefaultInstanceForType {
            get { return global::Plugin.Common.Types.Attachment.DefaultInstance; }
          }
          
          public override Attachment BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Attachment) {
              return MergeFrom((Attachment) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Attachment other) {
            if (other == global::Plugin.Common.Types.Attachment.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.metadata_.Count != 0) {
              result.metadata_.Add(other.metadata_);
            }
            if (other.tags_.Count != 0) {
              result.tags_.Add(other.tags_);
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_attachmentFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _attachmentFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasType = input.ReadString(ref result.type_);
                  break;
                }
                case 26: {
                  input.ReadMessageArray(tag, field_name, result.metadata_, global::Plugin.Common.Types.KeyValue.DefaultInstance, extensionRegistry);
                  break;
                }
                case 34: {
                  input.ReadStringArray(tag, field_name, result.tags_);
                  break;
                }
                case 42: {
                  result.hasData = input.ReadString(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasType {
            get { return result.hasType; }
          }
          public string Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.KeyValue> MetadataList {
            get { return PrepareBuilder().metadata_; }
          }
          public int MetadataCount {
            get { return result.MetadataCount; }
          }
          public global::Plugin.Common.Types.KeyValue GetMetadata(int index) {
            return result.GetMetadata(index);
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_[index] = value;
            return this;
          }
          public Builder SetMetadata(int index, global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.metadata_.Add(value);
            return this;
          }
          public Builder AddMetadata(global::Plugin.Common.Types.KeyValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.metadata_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeMetadata(scg::IEnumerable<global::Plugin.Common.Types.KeyValue> values) {
            PrepareBuilder();
            result.metadata_.Add(values);
            return this;
          }
          public Builder ClearMetadata() {
            PrepareBuilder();
            result.metadata_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<string> TagsList {
            get { return PrepareBuilder().tags_; }
          }
          public int TagsCount {
            get { return result.TagsCount; }
          }
          public string GetTags(int index) {
            return result.GetTags(index);
          }
          public Builder SetTags(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_[index] = value;
            return this;
          }
          public Builder AddTags(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.tags_.Add(value);
            return this;
          }
          public Builder AddRangeTags(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.tags_.Add(values);
            return this;
          }
          public Builder ClearTags() {
            PrepareBuilder();
            result.tags_.Clear();
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public string Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = "";
            return this;
          }
        }
        static Attachment() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class PerformanceData : pb::GeneratedMessage<PerformanceData, PerformanceData.Builder> {
        private PerformanceData() { }
        private static readonly PerformanceData defaultInstance = new PerformanceData().MakeReadOnly();
        private static readonly string[] _performanceDataFieldNames = new string[] { "alias", "bool_value", "float_value", "int_value", "string_value", "type" };
        private static readonly uint[] _performanceDataFieldTags = new uint[] { 10, 50, 42, 26, 34, 16 };
        public static PerformanceData DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override PerformanceData DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override PerformanceData ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<PerformanceData, PerformanceData.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public static class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public sealed partial class IntValue : pb::GeneratedMessage<IntValue, IntValue.Builder> {
            private IntValue() { }
            private static readonly IntValue defaultInstance = new IntValue().MakeReadOnly();
            private static readonly string[] _intValueFieldNames = new string[] { "critical", "maximum", "minimum", "unit", "value", "warning" };
            private static readonly uint[] _intValueFieldTags = new uint[] { 32, 56, 48, 18, 8, 24 };
            public static IntValue DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override IntValue DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override IntValue ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_IntValue__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<IntValue, IntValue.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_IntValue__FieldAccessorTable; }
            }
            
            public const int ValueFieldNumber = 1;
            private bool hasValue;
            private long value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public long Value {
              get { return value_; }
            }
            
            public const int UnitFieldNumber = 2;
            private bool hasUnit;
            private string unit_ = "";
            public bool HasUnit {
              get { return hasUnit; }
            }
            public string Unit {
              get { return unit_; }
            }
            
            public const int WarningFieldNumber = 3;
            private bool hasWarning;
            private long warning_;
            public bool HasWarning {
              get { return hasWarning; }
            }
            public long Warning {
              get { return warning_; }
            }
            
            public const int CriticalFieldNumber = 4;
            private bool hasCritical;
            private long critical_;
            public bool HasCritical {
              get { return hasCritical; }
            }
            public long Critical {
              get { return critical_; }
            }
            
            public const int MinimumFieldNumber = 6;
            private bool hasMinimum;
            private long minimum_;
            public bool HasMinimum {
              get { return hasMinimum; }
            }
            public long Minimum {
              get { return minimum_; }
            }
            
            public const int MaximumFieldNumber = 7;
            private bool hasMaximum;
            private long maximum_;
            public bool HasMaximum {
              get { return hasMaximum; }
            }
            public long Maximum {
              get { return maximum_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasValue) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _intValueFieldNames;
              if (hasValue) {
                output.WriteInt64(1, field_names[4], Value);
              }
              if (hasUnit) {
                output.WriteString(2, field_names[3], Unit);
              }
              if (hasWarning) {
                output.WriteInt64(3, field_names[5], Warning);
              }
              if (hasCritical) {
                output.WriteInt64(4, field_names[0], Critical);
              }
              if (hasMinimum) {
                output.WriteInt64(6, field_names[2], Minimum);
              }
              if (hasMaximum) {
                output.WriteInt64(7, field_names[1], Maximum);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeInt64Size(1, Value);
                }
                if (hasUnit) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Unit);
                }
                if (hasWarning) {
                  size += pb::CodedOutputStream.ComputeInt64Size(3, Warning);
                }
                if (hasCritical) {
                  size += pb::CodedOutputStream.ComputeInt64Size(4, Critical);
                }
                if (hasMinimum) {
                  size += pb::CodedOutputStream.ComputeInt64Size(6, Minimum);
                }
                if (hasMaximum) {
                  size += pb::CodedOutputStream.ComputeInt64Size(7, Maximum);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static IntValue ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static IntValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static IntValue ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static IntValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static IntValue ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static IntValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static IntValue ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static IntValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static IntValue ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static IntValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private IntValue MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(IntValue prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
            public sealed partial class Builder : pb::GeneratedBuilder<IntValue, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(IntValue cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private IntValue result;
              
              private IntValue PrepareBuilder() {
                if (resultIsReadOnly) {
                  IntValue original = result;
                  result = new IntValue();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override IntValue MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.IntValue.Descriptor; }
              }
              
              public override IntValue DefaultInstanceForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.IntValue.DefaultInstance; }
              }
              
              public override IntValue BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is IntValue) {
                  return MergeFrom((IntValue) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(IntValue other) {
                if (other == global::Plugin.Common.Types.PerformanceData.Types.IntValue.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue) {
                  Value = other.Value;
                }
                if (other.HasUnit) {
                  Unit = other.Unit;
                }
                if (other.HasWarning) {
                  Warning = other.Warning;
                }
                if (other.HasCritical) {
                  Critical = other.Critical;
                }
                if (other.HasMinimum) {
                  Minimum = other.Minimum;
                }
                if (other.HasMaximum) {
                  Maximum = other.Maximum;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_intValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _intValueFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasValue = input.ReadInt64(ref result.value_);
                      break;
                    }
                    case 18: {
                      result.hasUnit = input.ReadString(ref result.unit_);
                      break;
                    }
                    case 24: {
                      result.hasWarning = input.ReadInt64(ref result.warning_);
                      break;
                    }
                    case 32: {
                      result.hasCritical = input.ReadInt64(ref result.critical_);
                      break;
                    }
                    case 48: {
                      result.hasMinimum = input.ReadInt64(ref result.minimum_);
                      break;
                    }
                    case 56: {
                      result.hasMaximum = input.ReadInt64(ref result.maximum_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasValue {
                get { return result.hasValue; }
              }
              public long Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(long value) {
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = 0L;
                return this;
              }
              
              public bool HasUnit {
                get { return result.hasUnit; }
              }
              public string Unit {
                get { return result.Unit; }
                set { SetUnit(value); }
              }
              public Builder SetUnit(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUnit = true;
                result.unit_ = value;
                return this;
              }
              public Builder ClearUnit() {
                PrepareBuilder();
                result.hasUnit = false;
                result.unit_ = "";
                return this;
              }
              
              public bool HasWarning {
                get { return result.hasWarning; }
              }
              public long Warning {
                get { return result.Warning; }
                set { SetWarning(value); }
              }
              public Builder SetWarning(long value) {
                PrepareBuilder();
                result.hasWarning = true;
                result.warning_ = value;
                return this;
              }
              public Builder ClearWarning() {
                PrepareBuilder();
                result.hasWarning = false;
                result.warning_ = 0L;
                return this;
              }
              
              public bool HasCritical {
                get { return result.hasCritical; }
              }
              public long Critical {
                get { return result.Critical; }
                set { SetCritical(value); }
              }
              public Builder SetCritical(long value) {
                PrepareBuilder();
                result.hasCritical = true;
                result.critical_ = value;
                return this;
              }
              public Builder ClearCritical() {
                PrepareBuilder();
                result.hasCritical = false;
                result.critical_ = 0L;
                return this;
              }
              
              public bool HasMinimum {
                get { return result.hasMinimum; }
              }
              public long Minimum {
                get { return result.Minimum; }
                set { SetMinimum(value); }
              }
              public Builder SetMinimum(long value) {
                PrepareBuilder();
                result.hasMinimum = true;
                result.minimum_ = value;
                return this;
              }
              public Builder ClearMinimum() {
                PrepareBuilder();
                result.hasMinimum = false;
                result.minimum_ = 0L;
                return this;
              }
              
              public bool HasMaximum {
                get { return result.hasMaximum; }
              }
              public long Maximum {
                get { return result.Maximum; }
                set { SetMaximum(value); }
              }
              public Builder SetMaximum(long value) {
                PrepareBuilder();
                result.hasMaximum = true;
                result.maximum_ = value;
                return this;
              }
              public Builder ClearMaximum() {
                PrepareBuilder();
                result.hasMaximum = false;
                result.maximum_ = 0L;
                return this;
              }
            }
            static IntValue() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public sealed partial class StringValue : pb::GeneratedMessage<StringValue, StringValue.Builder> {
            private StringValue() { }
            private static readonly StringValue defaultInstance = new StringValue().MakeReadOnly();
            private static readonly string[] _stringValueFieldNames = new string[] { "value" };
            private static readonly uint[] _stringValueFieldTags = new uint[] { 10 };
            public static StringValue DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override StringValue DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override StringValue ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_StringValue__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<StringValue, StringValue.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_StringValue__FieldAccessorTable; }
            }
            
            public const int ValueFieldNumber = 1;
            private bool hasValue;
            private string value_ = "";
            public bool HasValue {
              get { return hasValue; }
            }
            public string Value {
              get { return value_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasValue) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _stringValueFieldNames;
              if (hasValue) {
                output.WriteString(1, field_names[0], Value);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeStringSize(1, Value);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static StringValue ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static StringValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static StringValue ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static StringValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static StringValue ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static StringValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static StringValue ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static StringValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static StringValue ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static StringValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private StringValue MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(StringValue prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
            public sealed partial class Builder : pb::GeneratedBuilder<StringValue, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(StringValue cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private StringValue result;
              
              private StringValue PrepareBuilder() {
                if (resultIsReadOnly) {
                  StringValue original = result;
                  result = new StringValue();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override StringValue MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.StringValue.Descriptor; }
              }
              
              public override StringValue DefaultInstanceForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.StringValue.DefaultInstance; }
              }
              
              public override StringValue BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is StringValue) {
                  return MergeFrom((StringValue) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(StringValue other) {
                if (other == global::Plugin.Common.Types.PerformanceData.Types.StringValue.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue) {
                  Value = other.Value;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_stringValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _stringValueFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasValue = input.ReadString(ref result.value_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasValue {
                get { return result.hasValue; }
              }
              public string Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = "";
                return this;
              }
            }
            static StringValue() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public sealed partial class FloatValue : pb::GeneratedMessage<FloatValue, FloatValue.Builder> {
            private FloatValue() { }
            private static readonly FloatValue defaultInstance = new FloatValue().MakeReadOnly();
            private static readonly string[] _floatValueFieldNames = new string[] { "critical", "maximum", "minimum", "unit", "value", "warning" };
            private static readonly uint[] _floatValueFieldTags = new uint[] { 33, 57, 49, 18, 9, 25 };
            public static FloatValue DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override FloatValue DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override FloatValue ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_FloatValue__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<FloatValue, FloatValue.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_FloatValue__FieldAccessorTable; }
            }
            
            public const int ValueFieldNumber = 1;
            private bool hasValue;
            private double value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public double Value {
              get { return value_; }
            }
            
            public const int UnitFieldNumber = 2;
            private bool hasUnit;
            private string unit_ = "";
            public bool HasUnit {
              get { return hasUnit; }
            }
            public string Unit {
              get { return unit_; }
            }
            
            public const int WarningFieldNumber = 3;
            private bool hasWarning;
            private double warning_;
            public bool HasWarning {
              get { return hasWarning; }
            }
            public double Warning {
              get { return warning_; }
            }
            
            public const int CriticalFieldNumber = 4;
            private bool hasCritical;
            private double critical_;
            public bool HasCritical {
              get { return hasCritical; }
            }
            public double Critical {
              get { return critical_; }
            }
            
            public const int MinimumFieldNumber = 6;
            private bool hasMinimum;
            private double minimum_;
            public bool HasMinimum {
              get { return hasMinimum; }
            }
            public double Minimum {
              get { return minimum_; }
            }
            
            public const int MaximumFieldNumber = 7;
            private bool hasMaximum;
            private double maximum_;
            public bool HasMaximum {
              get { return hasMaximum; }
            }
            public double Maximum {
              get { return maximum_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasValue) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _floatValueFieldNames;
              if (hasValue) {
                output.WriteDouble(1, field_names[4], Value);
              }
              if (hasUnit) {
                output.WriteString(2, field_names[3], Unit);
              }
              if (hasWarning) {
                output.WriteDouble(3, field_names[5], Warning);
              }
              if (hasCritical) {
                output.WriteDouble(4, field_names[0], Critical);
              }
              if (hasMinimum) {
                output.WriteDouble(6, field_names[2], Minimum);
              }
              if (hasMaximum) {
                output.WriteDouble(7, field_names[1], Maximum);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(1, Value);
                }
                if (hasUnit) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Unit);
                }
                if (hasWarning) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(3, Warning);
                }
                if (hasCritical) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(4, Critical);
                }
                if (hasMinimum) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(6, Minimum);
                }
                if (hasMaximum) {
                  size += pb::CodedOutputStream.ComputeDoubleSize(7, Maximum);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static FloatValue ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static FloatValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static FloatValue ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static FloatValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static FloatValue ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static FloatValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static FloatValue ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static FloatValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static FloatValue ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static FloatValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private FloatValue MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(FloatValue prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
            public sealed partial class Builder : pb::GeneratedBuilder<FloatValue, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(FloatValue cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private FloatValue result;
              
              private FloatValue PrepareBuilder() {
                if (resultIsReadOnly) {
                  FloatValue original = result;
                  result = new FloatValue();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override FloatValue MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Descriptor; }
              }
              
              public override FloatValue DefaultInstanceForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.FloatValue.DefaultInstance; }
              }
              
              public override FloatValue BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is FloatValue) {
                  return MergeFrom((FloatValue) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(FloatValue other) {
                if (other == global::Plugin.Common.Types.PerformanceData.Types.FloatValue.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue) {
                  Value = other.Value;
                }
                if (other.HasUnit) {
                  Unit = other.Unit;
                }
                if (other.HasWarning) {
                  Warning = other.Warning;
                }
                if (other.HasCritical) {
                  Critical = other.Critical;
                }
                if (other.HasMinimum) {
                  Minimum = other.Minimum;
                }
                if (other.HasMaximum) {
                  Maximum = other.Maximum;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_floatValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _floatValueFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 9: {
                      result.hasValue = input.ReadDouble(ref result.value_);
                      break;
                    }
                    case 18: {
                      result.hasUnit = input.ReadString(ref result.unit_);
                      break;
                    }
                    case 25: {
                      result.hasWarning = input.ReadDouble(ref result.warning_);
                      break;
                    }
                    case 33: {
                      result.hasCritical = input.ReadDouble(ref result.critical_);
                      break;
                    }
                    case 49: {
                      result.hasMinimum = input.ReadDouble(ref result.minimum_);
                      break;
                    }
                    case 57: {
                      result.hasMaximum = input.ReadDouble(ref result.maximum_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasValue {
                get { return result.hasValue; }
              }
              public double Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(double value) {
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = 0D;
                return this;
              }
              
              public bool HasUnit {
                get { return result.hasUnit; }
              }
              public string Unit {
                get { return result.Unit; }
                set { SetUnit(value); }
              }
              public Builder SetUnit(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUnit = true;
                result.unit_ = value;
                return this;
              }
              public Builder ClearUnit() {
                PrepareBuilder();
                result.hasUnit = false;
                result.unit_ = "";
                return this;
              }
              
              public bool HasWarning {
                get { return result.hasWarning; }
              }
              public double Warning {
                get { return result.Warning; }
                set { SetWarning(value); }
              }
              public Builder SetWarning(double value) {
                PrepareBuilder();
                result.hasWarning = true;
                result.warning_ = value;
                return this;
              }
              public Builder ClearWarning() {
                PrepareBuilder();
                result.hasWarning = false;
                result.warning_ = 0D;
                return this;
              }
              
              public bool HasCritical {
                get { return result.hasCritical; }
              }
              public double Critical {
                get { return result.Critical; }
                set { SetCritical(value); }
              }
              public Builder SetCritical(double value) {
                PrepareBuilder();
                result.hasCritical = true;
                result.critical_ = value;
                return this;
              }
              public Builder ClearCritical() {
                PrepareBuilder();
                result.hasCritical = false;
                result.critical_ = 0D;
                return this;
              }
              
              public bool HasMinimum {
                get { return result.hasMinimum; }
              }
              public double Minimum {
                get { return result.Minimum; }
                set { SetMinimum(value); }
              }
              public Builder SetMinimum(double value) {
                PrepareBuilder();
                result.hasMinimum = true;
                result.minimum_ = value;
                return this;
              }
              public Builder ClearMinimum() {
                PrepareBuilder();
                result.hasMinimum = false;
                result.minimum_ = 0D;
                return this;
              }
              
              public bool HasMaximum {
                get { return result.hasMaximum; }
              }
              public double Maximum {
                get { return result.Maximum; }
                set { SetMaximum(value); }
              }
              public Builder SetMaximum(double value) {
                PrepareBuilder();
                result.hasMaximum = true;
                result.maximum_ = value;
                return this;
              }
              public Builder ClearMaximum() {
                PrepareBuilder();
                result.hasMaximum = false;
                result.maximum_ = 0D;
                return this;
              }
            }
            static FloatValue() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public sealed partial class BoolValue : pb::GeneratedMessage<BoolValue, BoolValue.Builder> {
            private BoolValue() { }
            private static readonly BoolValue defaultInstance = new BoolValue().MakeReadOnly();
            private static readonly string[] _boolValueFieldNames = new string[] { "critical", "unit", "value", "warning" };
            private static readonly uint[] _boolValueFieldTags = new uint[] { 32, 18, 8, 24 };
            public static BoolValue DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override BoolValue DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override BoolValue ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_BoolValue__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<BoolValue, BoolValue.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Common_PerformanceData_BoolValue__FieldAccessorTable; }
            }
            
            public const int ValueFieldNumber = 1;
            private bool hasValue;
            private bool value_;
            public bool HasValue {
              get { return hasValue; }
            }
            public bool Value {
              get { return value_; }
            }
            
            public const int UnitFieldNumber = 2;
            private bool hasUnit;
            private string unit_ = "";
            public bool HasUnit {
              get { return hasUnit; }
            }
            public string Unit {
              get { return unit_; }
            }
            
            public const int WarningFieldNumber = 3;
            private bool hasWarning;
            private bool warning_;
            public bool HasWarning {
              get { return hasWarning; }
            }
            public bool Warning {
              get { return warning_; }
            }
            
            public const int CriticalFieldNumber = 4;
            private bool hasCritical;
            private bool critical_;
            public bool HasCritical {
              get { return hasCritical; }
            }
            public bool Critical {
              get { return critical_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasValue) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _boolValueFieldNames;
              if (hasValue) {
                output.WriteBool(1, field_names[2], Value);
              }
              if (hasUnit) {
                output.WriteString(2, field_names[1], Unit);
              }
              if (hasWarning) {
                output.WriteBool(3, field_names[3], Warning);
              }
              if (hasCritical) {
                output.WriteBool(4, field_names[0], Critical);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasValue) {
                  size += pb::CodedOutputStream.ComputeBoolSize(1, Value);
                }
                if (hasUnit) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Unit);
                }
                if (hasWarning) {
                  size += pb::CodedOutputStream.ComputeBoolSize(3, Warning);
                }
                if (hasCritical) {
                  size += pb::CodedOutputStream.ComputeBoolSize(4, Critical);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static BoolValue ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static BoolValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static BoolValue ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static BoolValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static BoolValue ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static BoolValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static BoolValue ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static BoolValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static BoolValue ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static BoolValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private BoolValue MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(BoolValue prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
            public sealed partial class Builder : pb::GeneratedBuilder<BoolValue, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(BoolValue cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private BoolValue result;
              
              private BoolValue PrepareBuilder() {
                if (resultIsReadOnly) {
                  BoolValue original = result;
                  result = new BoolValue();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override BoolValue MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Descriptor; }
              }
              
              public override BoolValue DefaultInstanceForType {
                get { return global::Plugin.Common.Types.PerformanceData.Types.BoolValue.DefaultInstance; }
              }
              
              public override BoolValue BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is BoolValue) {
                  return MergeFrom((BoolValue) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(BoolValue other) {
                if (other == global::Plugin.Common.Types.PerformanceData.Types.BoolValue.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue) {
                  Value = other.Value;
                }
                if (other.HasUnit) {
                  Unit = other.Unit;
                }
                if (other.HasWarning) {
                  Warning = other.Warning;
                }
                if (other.HasCritical) {
                  Critical = other.Critical;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_boolValueFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _boolValueFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasValue = input.ReadBool(ref result.value_);
                      break;
                    }
                    case 18: {
                      result.hasUnit = input.ReadString(ref result.unit_);
                      break;
                    }
                    case 24: {
                      result.hasWarning = input.ReadBool(ref result.warning_);
                      break;
                    }
                    case 32: {
                      result.hasCritical = input.ReadBool(ref result.critical_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasValue {
                get { return result.hasValue; }
              }
              public bool Value {
                get { return result.Value; }
                set { SetValue(value); }
              }
              public Builder SetValue(bool value) {
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
              }
              public Builder ClearValue() {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = false;
                return this;
              }
              
              public bool HasUnit {
                get { return result.hasUnit; }
              }
              public string Unit {
                get { return result.Unit; }
                set { SetUnit(value); }
              }
              public Builder SetUnit(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUnit = true;
                result.unit_ = value;
                return this;
              }
              public Builder ClearUnit() {
                PrepareBuilder();
                result.hasUnit = false;
                result.unit_ = "";
                return this;
              }
              
              public bool HasWarning {
                get { return result.hasWarning; }
              }
              public bool Warning {
                get { return result.Warning; }
                set { SetWarning(value); }
              }
              public Builder SetWarning(bool value) {
                PrepareBuilder();
                result.hasWarning = true;
                result.warning_ = value;
                return this;
              }
              public Builder ClearWarning() {
                PrepareBuilder();
                result.hasWarning = false;
                result.warning_ = false;
                return this;
              }
              
              public bool HasCritical {
                get { return result.hasCritical; }
              }
              public bool Critical {
                get { return result.Critical; }
                set { SetCritical(value); }
              }
              public Builder SetCritical(bool value) {
                PrepareBuilder();
                result.hasCritical = true;
                result.critical_ = value;
                return this;
              }
              public Builder ClearCritical() {
                PrepareBuilder();
                result.hasCritical = false;
                result.critical_ = false;
                return this;
              }
            }
            static BoolValue() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int AliasFieldNumber = 1;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias {
          get { return hasAlias; }
        }
        public string Alias {
          get { return alias_; }
        }
        
        public const int TypeFieldNumber = 2;
        private bool hasType;
        private global::Plugin.Common.Types.DataType type_ = global::Plugin.Common.Types.DataType.INT;
        public bool HasType {
          get { return hasType; }
        }
        public global::Plugin.Common.Types.DataType Type {
          get { return type_; }
        }
        
        public const int IntValueFieldNumber = 3;
        private bool hasIntValue;
        private global::Plugin.Common.Types.PerformanceData.Types.IntValue intValue_;
        public bool HasIntValue {
          get { return hasIntValue; }
        }
        public global::Plugin.Common.Types.PerformanceData.Types.IntValue IntValue {
          get { return intValue_ ?? global::Plugin.Common.Types.PerformanceData.Types.IntValue.DefaultInstance; }
        }
        
        public const int StringValueFieldNumber = 4;
        private bool hasStringValue;
        private global::Plugin.Common.Types.PerformanceData.Types.StringValue stringValue_;
        public bool HasStringValue {
          get { return hasStringValue; }
        }
        public global::Plugin.Common.Types.PerformanceData.Types.StringValue StringValue {
          get { return stringValue_ ?? global::Plugin.Common.Types.PerformanceData.Types.StringValue.DefaultInstance; }
        }
        
        public const int FloatValueFieldNumber = 5;
        private bool hasFloatValue;
        private global::Plugin.Common.Types.PerformanceData.Types.FloatValue floatValue_;
        public bool HasFloatValue {
          get { return hasFloatValue; }
        }
        public global::Plugin.Common.Types.PerformanceData.Types.FloatValue FloatValue {
          get { return floatValue_ ?? global::Plugin.Common.Types.PerformanceData.Types.FloatValue.DefaultInstance; }
        }
        
        public const int BoolValueFieldNumber = 6;
        private bool hasBoolValue;
        private global::Plugin.Common.Types.PerformanceData.Types.BoolValue boolValue_;
        public bool HasBoolValue {
          get { return hasBoolValue; }
        }
        public global::Plugin.Common.Types.PerformanceData.Types.BoolValue BoolValue {
          get { return boolValue_ ?? global::Plugin.Common.Types.PerformanceData.Types.BoolValue.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasAlias) return false;
            if (!hasType) return false;
            if (HasIntValue) {
              if (!IntValue.IsInitialized) return false;
            }
            if (HasStringValue) {
              if (!StringValue.IsInitialized) return false;
            }
            if (HasFloatValue) {
              if (!FloatValue.IsInitialized) return false;
            }
            if (HasBoolValue) {
              if (!BoolValue.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _performanceDataFieldNames;
          if (hasAlias) {
            output.WriteString(1, field_names[0], Alias);
          }
          if (hasType) {
            output.WriteEnum(2, field_names[5], (int) Type, Type);
          }
          if (hasIntValue) {
            output.WriteMessage(3, field_names[3], IntValue);
          }
          if (hasStringValue) {
            output.WriteMessage(4, field_names[4], StringValue);
          }
          if (hasFloatValue) {
            output.WriteMessage(5, field_names[2], FloatValue);
          }
          if (hasBoolValue) {
            output.WriteMessage(6, field_names[1], BoolValue);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasAlias) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Alias);
            }
            if (hasType) {
              size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
            }
            if (hasIntValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, IntValue);
            }
            if (hasStringValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(4, StringValue);
            }
            if (hasFloatValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(5, FloatValue);
            }
            if (hasBoolValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(6, BoolValue);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static PerformanceData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PerformanceData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PerformanceData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PerformanceData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PerformanceData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PerformanceData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PerformanceData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PerformanceData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PerformanceData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PerformanceData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PerformanceData MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PerformanceData prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<PerformanceData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(PerformanceData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private PerformanceData result;
          
          private PerformanceData PrepareBuilder() {
            if (resultIsReadOnly) {
              PerformanceData original = result;
              result = new PerformanceData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override PerformanceData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.PerformanceData.Descriptor; }
          }
          
          public override PerformanceData DefaultInstanceForType {
            get { return global::Plugin.Common.Types.PerformanceData.DefaultInstance; }
          }
          
          public override PerformanceData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is PerformanceData) {
              return MergeFrom((PerformanceData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(PerformanceData other) {
            if (other == global::Plugin.Common.Types.PerformanceData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasAlias) {
              Alias = other.Alias;
            }
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasIntValue) {
              MergeIntValue(other.IntValue);
            }
            if (other.HasStringValue) {
              MergeStringValue(other.StringValue);
            }
            if (other.HasFloatValue) {
              MergeFloatValue(other.FloatValue);
            }
            if (other.HasBoolValue) {
              MergeBoolValue(other.BoolValue);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_performanceDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _performanceDataFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasAlias = input.ReadString(ref result.alias_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(2, (ulong)(int)unknown);
                  }
                  break;
                }
                case 26: {
                  global::Plugin.Common.Types.PerformanceData.Types.IntValue.Builder subBuilder = global::Plugin.Common.Types.PerformanceData.Types.IntValue.CreateBuilder();
                  if (result.hasIntValue) {
                    subBuilder.MergeFrom(IntValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  IntValue = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Plugin.Common.Types.PerformanceData.Types.StringValue.Builder subBuilder = global::Plugin.Common.Types.PerformanceData.Types.StringValue.CreateBuilder();
                  if (result.hasStringValue) {
                    subBuilder.MergeFrom(StringValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  StringValue = subBuilder.BuildPartial();
                  break;
                }
                case 42: {
                  global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Builder subBuilder = global::Plugin.Common.Types.PerformanceData.Types.FloatValue.CreateBuilder();
                  if (result.hasFloatValue) {
                    subBuilder.MergeFrom(FloatValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  FloatValue = subBuilder.BuildPartial();
                  break;
                }
                case 50: {
                  global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Builder subBuilder = global::Plugin.Common.Types.PerformanceData.Types.BoolValue.CreateBuilder();
                  if (result.hasBoolValue) {
                    subBuilder.MergeFrom(BoolValue);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  BoolValue = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasAlias {
            get { return result.hasAlias; }
          }
          public string Alias {
            get { return result.Alias; }
            set { SetAlias(value); }
          }
          public Builder SetAlias(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAlias = true;
            result.alias_ = value;
            return this;
          }
          public Builder ClearAlias() {
            PrepareBuilder();
            result.hasAlias = false;
            result.alias_ = "";
            return this;
          }
          
          public bool HasType {
           get { return result.hasType; }
          }
          public global::Plugin.Common.Types.DataType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::Plugin.Common.Types.DataType value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::Plugin.Common.Types.DataType.INT;
            return this;
          }
          
          public bool HasIntValue {
           get { return result.hasIntValue; }
          }
          public global::Plugin.Common.Types.PerformanceData.Types.IntValue IntValue {
            get { return result.IntValue; }
            set { SetIntValue(value); }
          }
          public Builder SetIntValue(global::Plugin.Common.Types.PerformanceData.Types.IntValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasIntValue = true;
            result.intValue_ = value;
            return this;
          }
          public Builder SetIntValue(global::Plugin.Common.Types.PerformanceData.Types.IntValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasIntValue = true;
            result.intValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeIntValue(global::Plugin.Common.Types.PerformanceData.Types.IntValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasIntValue &&
                result.intValue_ != global::Plugin.Common.Types.PerformanceData.Types.IntValue.DefaultInstance) {
                result.intValue_ = global::Plugin.Common.Types.PerformanceData.Types.IntValue.CreateBuilder(result.intValue_).MergeFrom(value).BuildPartial();
            } else {
              result.intValue_ = value;
            }
            result.hasIntValue = true;
            return this;
          }
          public Builder ClearIntValue() {
            PrepareBuilder();
            result.hasIntValue = false;
            result.intValue_ = null;
            return this;
          }
          
          public bool HasStringValue {
           get { return result.hasStringValue; }
          }
          public global::Plugin.Common.Types.PerformanceData.Types.StringValue StringValue {
            get { return result.StringValue; }
            set { SetStringValue(value); }
          }
          public Builder SetStringValue(global::Plugin.Common.Types.PerformanceData.Types.StringValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStringValue = true;
            result.stringValue_ = value;
            return this;
          }
          public Builder SetStringValue(global::Plugin.Common.Types.PerformanceData.Types.StringValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasStringValue = true;
            result.stringValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeStringValue(global::Plugin.Common.Types.PerformanceData.Types.StringValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasStringValue &&
                result.stringValue_ != global::Plugin.Common.Types.PerformanceData.Types.StringValue.DefaultInstance) {
                result.stringValue_ = global::Plugin.Common.Types.PerformanceData.Types.StringValue.CreateBuilder(result.stringValue_).MergeFrom(value).BuildPartial();
            } else {
              result.stringValue_ = value;
            }
            result.hasStringValue = true;
            return this;
          }
          public Builder ClearStringValue() {
            PrepareBuilder();
            result.hasStringValue = false;
            result.stringValue_ = null;
            return this;
          }
          
          public bool HasFloatValue {
           get { return result.hasFloatValue; }
          }
          public global::Plugin.Common.Types.PerformanceData.Types.FloatValue FloatValue {
            get { return result.FloatValue; }
            set { SetFloatValue(value); }
          }
          public Builder SetFloatValue(global::Plugin.Common.Types.PerformanceData.Types.FloatValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasFloatValue = true;
            result.floatValue_ = value;
            return this;
          }
          public Builder SetFloatValue(global::Plugin.Common.Types.PerformanceData.Types.FloatValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasFloatValue = true;
            result.floatValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeFloatValue(global::Plugin.Common.Types.PerformanceData.Types.FloatValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasFloatValue &&
                result.floatValue_ != global::Plugin.Common.Types.PerformanceData.Types.FloatValue.DefaultInstance) {
                result.floatValue_ = global::Plugin.Common.Types.PerformanceData.Types.FloatValue.CreateBuilder(result.floatValue_).MergeFrom(value).BuildPartial();
            } else {
              result.floatValue_ = value;
            }
            result.hasFloatValue = true;
            return this;
          }
          public Builder ClearFloatValue() {
            PrepareBuilder();
            result.hasFloatValue = false;
            result.floatValue_ = null;
            return this;
          }
          
          public bool HasBoolValue {
           get { return result.hasBoolValue; }
          }
          public global::Plugin.Common.Types.PerformanceData.Types.BoolValue BoolValue {
            get { return result.BoolValue; }
            set { SetBoolValue(value); }
          }
          public Builder SetBoolValue(global::Plugin.Common.Types.PerformanceData.Types.BoolValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasBoolValue = true;
            result.boolValue_ = value;
            return this;
          }
          public Builder SetBoolValue(global::Plugin.Common.Types.PerformanceData.Types.BoolValue.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasBoolValue = true;
            result.boolValue_ = builderForValue.Build();
            return this;
          }
          public Builder MergeBoolValue(global::Plugin.Common.Types.PerformanceData.Types.BoolValue value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasBoolValue &&
                result.boolValue_ != global::Plugin.Common.Types.PerformanceData.Types.BoolValue.DefaultInstance) {
                result.boolValue_ = global::Plugin.Common.Types.PerformanceData.Types.BoolValue.CreateBuilder(result.boolValue_).MergeFrom(value).BuildPartial();
            } else {
              result.boolValue_ = value;
            }
            result.hasBoolValue = true;
            return this;
          }
          public Builder ClearBoolValue() {
            PrepareBuilder();
            result.hasBoolValue = false;
            result.boolValue_ = null;
            return this;
          }
        }
        static PerformanceData() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Status : pb::GeneratedMessage<Status, Status.Builder> {
        private Status() { }
        private static readonly Status defaultInstance = new Status().MakeReadOnly();
        private static readonly string[] _statusFieldNames = new string[] { "data", "message", "status" };
        private static readonly uint[] _statusFieldTags = new uint[] { 26, 18, 8 };
        public static Status DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Status DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Status ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Status__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Status, Status.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Common_Status__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public static class Types {
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public enum StatusType {
            OK = 0,
            WARNING = 1,
            PROBLEM = 2,
            CRITICAL = 3,
            UNKNOWN = 10,
          }
          
        }
        #endregion
        
        public const int Status_FieldNumber = 1;
        private bool hasStatus_;
        private global::Plugin.Common.Types.Status.Types.StatusType status_ = global::Plugin.Common.Types.Status.Types.StatusType.OK;
        public bool HasStatus_ {
          get { return hasStatus_; }
        }
        public global::Plugin.Common.Types.Status.Types.StatusType Status_ {
          get { return status_; }
        }
        
        public const int MessageFieldNumber = 2;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }
        
        public const int DataFieldNumber = 3;
        private bool hasData;
        private string data_ = "";
        public bool HasData {
          get { return hasData; }
        }
        public string Data {
          get { return data_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasStatus_) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _statusFieldNames;
          if (hasStatus_) {
            output.WriteEnum(1, field_names[2], (int) Status_, Status_);
          }
          if (hasMessage) {
            output.WriteString(2, field_names[1], Message);
          }
          if (hasData) {
            output.WriteString(3, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasStatus_) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Status_);
            }
            if (hasMessage) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Message);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Status ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Status ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Status ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Status ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Status ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Status ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Status ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Status ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Status ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Status ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Status MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Status prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Status, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Status cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Status result;
          
          private Status PrepareBuilder() {
            if (resultIsReadOnly) {
              Status original = result;
              result = new Status();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Status MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Common.Types.Status.Descriptor; }
          }
          
          public override Status DefaultInstanceForType {
            get { return global::Plugin.Common.Types.Status.DefaultInstance; }
          }
          
          public override Status BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Status) {
              return MergeFrom((Status) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Status other) {
            if (other == global::Plugin.Common.Types.Status.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasStatus_) {
              Status_ = other.Status_;
            }
            if (other.HasMessage) {
              Message = other.Message;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_statusFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _statusFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.status_, out unknown)) {
                    result.hasStatus_ = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 18: {
                  result.hasMessage = input.ReadString(ref result.message_);
                  break;
                }
                case 26: {
                  result.hasData = input.ReadString(ref result.data_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasStatus_ {
           get { return result.hasStatus_; }
          }
          public global::Plugin.Common.Types.Status.Types.StatusType Status_ {
            get { return result.Status_; }
            set { SetStatus_(value); }
          }
          public Builder SetStatus_(global::Plugin.Common.Types.Status.Types.StatusType value) {
            PrepareBuilder();
            result.hasStatus_ = true;
            result.status_ = value;
            return this;
          }
          public Builder ClearStatus_() {
            PrepareBuilder();
            result.hasStatus_ = false;
            result.status_ = global::Plugin.Common.Types.Status.Types.StatusType.OK;
            return this;
          }
          
          public bool HasMessage {
            get { return result.hasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
          
          public bool HasData {
            get { return result.hasData; }
          }
          public string Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = "";
            return this;
          }
        }
        static Status() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commonFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Common ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Common ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Common ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Common ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Common ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Common ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Common ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Common ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Common ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Common ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Common MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Common prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Common, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Common cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Common result;
      
      private Common PrepareBuilder() {
        if (resultIsReadOnly) {
          Common original = result;
          result = new Common();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Common MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.Common.Descriptor; }
      }
      
      public override Common DefaultInstanceForType {
        get { return global::Plugin.Common.DefaultInstance; }
      }
      
      public override Common BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Common) {
          return MergeFrom((Common) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Common other) {
        if (other == global::Plugin.Common.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commonFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commonFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Common() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QueryRequestMessage : pb::GeneratedMessage<QueryRequestMessage, QueryRequestMessage.Builder> {
    private QueryRequestMessage() { }
    private static readonly QueryRequestMessage defaultInstance = new QueryRequestMessage().MakeReadOnly();
    private static readonly string[] _queryRequestMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _queryRequestMessageFieldTags = new uint[] { 26, 10, 18 };
    public static QueryRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_QueryRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryRequestMessage, QueryRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_QueryRequestMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
        private Request() { }
        private static readonly Request defaultInstance = new Request().MakeReadOnly();
        private static readonly string[] _requestFieldNames = new string[] { "alias", "arguments", "attachments", "command", "id", "target" };
        private static readonly uint[] _requestFieldTags = new uint[] { 26, 34, 138, 18, 8, 58 };
        public static Request DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Request DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Request ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_QueryRequestMessage_Request__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_QueryRequestMessage_Request__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int TargetFieldNumber = 7;
        private bool hasTarget;
        private string target_ = "";
        public bool HasTarget {
          get { return hasTarget; }
        }
        public string Target {
          get { return target_; }
        }
        
        public const int CommandFieldNumber = 2;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int AliasFieldNumber = 3;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias {
          get { return hasAlias; }
        }
        public string Alias {
          get { return alias_; }
        }
        
        public const int ArgumentsFieldNumber = 4;
        private pbc::PopsicleList<string> arguments_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ArgumentsList {
          get { return pbc::Lists.AsReadOnly(arguments_); }
        }
        public int ArgumentsCount {
          get { return arguments_.Count; }
        }
        public string GetArguments(int index) {
          return arguments_[index];
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _requestFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[4], Id);
          }
          if (hasCommand) {
            output.WriteString(2, field_names[3], Command);
          }
          if (hasAlias) {
            output.WriteString(3, field_names[0], Alias);
          }
          if (arguments_.Count > 0) {
            output.WriteStringArray(4, field_names[1], arguments_);
          }
          if (hasTarget) {
            output.WriteString(7, field_names[5], Target);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[2], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasTarget) {
              size += pb::CodedOutputStream.ComputeStringSize(7, Target);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Command);
            }
            if (hasAlias) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Alias);
            }
            {
              int dataSize = 0;
              foreach (string element in ArgumentsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * arguments_.Count;
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Request ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Request MakeReadOnly() {
          arguments_.MakeReadOnly();
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Request prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Request cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Request result;
          
          private Request PrepareBuilder() {
            if (resultIsReadOnly) {
              Request original = result;
              result = new Request();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Request MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.QueryRequestMessage.Types.Request.Descriptor; }
          }
          
          public override Request DefaultInstanceForType {
            get { return global::Plugin.QueryRequestMessage.Types.Request.DefaultInstance; }
          }
          
          public override Request BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Request) {
              return MergeFrom((Request) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Request other) {
            if (other == global::Plugin.QueryRequestMessage.Types.Request.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasTarget) {
              Target = other.Target;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.HasAlias) {
              Alias = other.Alias;
            }
            if (other.arguments_.Count != 0) {
              result.arguments_.Add(other.arguments_);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 26: {
                  result.hasAlias = input.ReadString(ref result.alias_);
                  break;
                }
                case 34: {
                  input.ReadStringArray(tag, field_name, result.arguments_);
                  break;
                }
                case 58: {
                  result.hasTarget = input.ReadString(ref result.target_);
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasTarget {
            get { return result.hasTarget; }
          }
          public string Target {
            get { return result.Target; }
            set { SetTarget(value); }
          }
          public Builder SetTarget(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasTarget = true;
            result.target_ = value;
            return this;
          }
          public Builder ClearTarget() {
            PrepareBuilder();
            result.hasTarget = false;
            result.target_ = "";
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public bool HasAlias {
            get { return result.hasAlias; }
          }
          public string Alias {
            get { return result.Alias; }
            set { SetAlias(value); }
          }
          public Builder SetAlias(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAlias = true;
            result.alias_ = value;
            return this;
          }
          public Builder ClearAlias() {
            PrepareBuilder();
            result.hasAlias = false;
            result.alias_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> ArgumentsList {
            get { return PrepareBuilder().arguments_; }
          }
          public int ArgumentsCount {
            get { return result.ArgumentsCount; }
          }
          public string GetArguments(int index) {
            return result.GetArguments(index);
          }
          public Builder SetArguments(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_[index] = value;
            return this;
          }
          public Builder AddArguments(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_.Add(value);
            return this;
          }
          public Builder AddRangeArguments(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.arguments_.Add(values);
            return this;
          }
          public Builder ClearArguments() {
            PrepareBuilder();
            result.arguments_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Request() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.QueryRequestMessage.Types.Request> payload_ = new pbc::PopsicleList<global::Plugin.QueryRequestMessage.Types.Request>();
    public scg::IList<global::Plugin.QueryRequestMessage.Types.Request> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.QueryRequestMessage.Types.Request GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        foreach (global::Plugin.QueryRequestMessage.Types.Request element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queryRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.QueryRequestMessage.Types.Request element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryRequestMessage result;
      
      private QueryRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryRequestMessage original = result;
          result = new QueryRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.QueryRequestMessage.Descriptor; }
      }
      
      public override QueryRequestMessage DefaultInstanceForType {
        get { return global::Plugin.QueryRequestMessage.DefaultInstance; }
      }
      
      public override QueryRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryRequestMessage) {
          return MergeFrom((QueryRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryRequestMessage other) {
        if (other == global::Plugin.QueryRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.QueryRequestMessage.Types.Request.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.QueryRequestMessage.Types.Request> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.QueryRequestMessage.Types.Request GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.QueryRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.QueryRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.QueryRequestMessage.Types.Request> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static QueryRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QueryResponseMessage : pb::GeneratedMessage<QueryResponseMessage, QueryResponseMessage.Builder> {
    private QueryResponseMessage() { }
    private static readonly QueryResponseMessage defaultInstance = new QueryResponseMessage().MakeReadOnly();
    private static readonly string[] _queryResponseMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _queryResponseMessageFieldTags = new uint[] { 26, 10, 18 };
    public static QueryResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryResponseMessage, QueryResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "alias", "arguments", "attachments", "command", "id", "message", "perf", "result", "source" };
        private static readonly uint[] _responseFieldTags = new uint[] { 26, 130, 138, 18, 8, 42, 50, 32, 58 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_QueryResponseMessage_Response__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int SourceFieldNumber = 7;
        private bool hasSource;
        private string source_ = "";
        public bool HasSource {
          get { return hasSource; }
        }
        public string Source {
          get { return source_; }
        }
        
        public const int CommandFieldNumber = 2;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int AliasFieldNumber = 3;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias {
          get { return hasAlias; }
        }
        public string Alias {
          get { return alias_; }
        }
        
        public const int ArgumentsFieldNumber = 16;
        private pbc::PopsicleList<string> arguments_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ArgumentsList {
          get { return pbc::Lists.AsReadOnly(arguments_); }
        }
        public int ArgumentsCount {
          get { return arguments_.Count; }
        }
        public string GetArguments(int index) {
          return arguments_[index];
        }
        
        public const int ResultFieldNumber = 4;
        private bool hasResult;
        private global::Plugin.Common.Types.ResultCode result_ = global::Plugin.Common.Types.ResultCode.OK;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::Plugin.Common.Types.ResultCode Result {
          get { return result_; }
        }
        
        public const int MessageFieldNumber = 5;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }
        
        public const int PerfFieldNumber = 6;
        private pbc::PopsicleList<global::Plugin.Common.Types.PerformanceData> perf_ = new pbc::PopsicleList<global::Plugin.Common.Types.PerformanceData>();
        public scg::IList<global::Plugin.Common.Types.PerformanceData> PerfList {
          get { return perf_; }
        }
        public int PerfCount {
          get { return perf_.Count; }
        }
        public global::Plugin.Common.Types.PerformanceData GetPerf(int index) {
          return perf_[index];
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            if (!hasResult) return false;
            if (!hasMessage) return false;
            foreach (global::Plugin.Common.Types.PerformanceData element in PerfList) {
              if (!element.IsInitialized) return false;
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[4], Id);
          }
          if (hasCommand) {
            output.WriteString(2, field_names[3], Command);
          }
          if (hasAlias) {
            output.WriteString(3, field_names[0], Alias);
          }
          if (hasResult) {
            output.WriteEnum(4, field_names[7], (int) Result, Result);
          }
          if (hasMessage) {
            output.WriteString(5, field_names[5], Message);
          }
          if (perf_.Count > 0) {
            output.WriteMessageArray(6, field_names[6], perf_);
          }
          if (hasSource) {
            output.WriteString(7, field_names[8], Source);
          }
          if (arguments_.Count > 0) {
            output.WriteStringArray(16, field_names[1], arguments_);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[2], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasSource) {
              size += pb::CodedOutputStream.ComputeStringSize(7, Source);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Command);
            }
            if (hasAlias) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Alias);
            }
            {
              int dataSize = 0;
              foreach (string element in ArgumentsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 2 * arguments_.Count;
            }
            if (hasResult) {
              size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Result);
            }
            if (hasMessage) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Message);
            }
            foreach (global::Plugin.Common.Types.PerformanceData element in PerfList) {
              size += pb::CodedOutputStream.ComputeMessageSize(6, element);
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          arguments_.MakeReadOnly();
          perf_.MakeReadOnly();
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.QueryResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.QueryResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.QueryResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasSource) {
              Source = other.Source;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.HasAlias) {
              Alias = other.Alias;
            }
            if (other.arguments_.Count != 0) {
              result.arguments_.Add(other.arguments_);
            }
            if (other.HasResult) {
              Result = other.Result;
            }
            if (other.HasMessage) {
              Message = other.Message;
            }
            if (other.perf_.Count != 0) {
              result.perf_.Add(other.perf_);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 26: {
                  result.hasAlias = input.ReadString(ref result.alias_);
                  break;
                }
                case 32: {
                  object unknown;
                  if(input.ReadEnum(ref result.result_, out unknown)) {
                    result.hasResult = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(4, (ulong)(int)unknown);
                  }
                  break;
                }
                case 42: {
                  result.hasMessage = input.ReadString(ref result.message_);
                  break;
                }
                case 50: {
                  input.ReadMessageArray(tag, field_name, result.perf_, global::Plugin.Common.Types.PerformanceData.DefaultInstance, extensionRegistry);
                  break;
                }
                case 58: {
                  result.hasSource = input.ReadString(ref result.source_);
                  break;
                }
                case 130: {
                  input.ReadStringArray(tag, field_name, result.arguments_);
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasSource {
            get { return result.hasSource; }
          }
          public string Source {
            get { return result.Source; }
            set { SetSource(value); }
          }
          public Builder SetSource(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSource = true;
            result.source_ = value;
            return this;
          }
          public Builder ClearSource() {
            PrepareBuilder();
            result.hasSource = false;
            result.source_ = "";
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public bool HasAlias {
            get { return result.hasAlias; }
          }
          public string Alias {
            get { return result.Alias; }
            set { SetAlias(value); }
          }
          public Builder SetAlias(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAlias = true;
            result.alias_ = value;
            return this;
          }
          public Builder ClearAlias() {
            PrepareBuilder();
            result.hasAlias = false;
            result.alias_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> ArgumentsList {
            get { return PrepareBuilder().arguments_; }
          }
          public int ArgumentsCount {
            get { return result.ArgumentsCount; }
          }
          public string GetArguments(int index) {
            return result.GetArguments(index);
          }
          public Builder SetArguments(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_[index] = value;
            return this;
          }
          public Builder AddArguments(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_.Add(value);
            return this;
          }
          public Builder AddRangeArguments(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.arguments_.Add(values);
            return this;
          }
          public Builder ClearArguments() {
            PrepareBuilder();
            result.arguments_.Clear();
            return this;
          }
          
          public bool HasResult {
           get { return result.hasResult; }
          }
          public global::Plugin.Common.Types.ResultCode Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::Plugin.Common.Types.ResultCode value) {
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = global::Plugin.Common.Types.ResultCode.OK;
            return this;
          }
          
          public bool HasMessage {
            get { return result.hasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.PerformanceData> PerfList {
            get { return PrepareBuilder().perf_; }
          }
          public int PerfCount {
            get { return result.PerfCount; }
          }
          public global::Plugin.Common.Types.PerformanceData GetPerf(int index) {
            return result.GetPerf(index);
          }
          public Builder SetPerf(int index, global::Plugin.Common.Types.PerformanceData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.perf_[index] = value;
            return this;
          }
          public Builder SetPerf(int index, global::Plugin.Common.Types.PerformanceData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.perf_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddPerf(global::Plugin.Common.Types.PerformanceData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.perf_.Add(value);
            return this;
          }
          public Builder AddPerf(global::Plugin.Common.Types.PerformanceData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.perf_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangePerf(scg::IEnumerable<global::Plugin.Common.Types.PerformanceData> values) {
            PrepareBuilder();
            result.perf_.Add(values);
            return this;
          }
          public Builder ClearPerf() {
            PrepareBuilder();
            result.perf_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.QueryResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.QueryResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        foreach (global::Plugin.QueryResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queryResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.QueryResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryResponseMessage result;
      
      private QueryResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryResponseMessage original = result;
          result = new QueryResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.QueryResponseMessage.Descriptor; }
      }
      
      public override QueryResponseMessage DefaultInstanceForType {
        get { return global::Plugin.QueryResponseMessage.DefaultInstance; }
      }
      
      public override QueryResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryResponseMessage) {
          return MergeFrom((QueryResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryResponseMessage other) {
        if (other == global::Plugin.QueryResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.QueryResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.QueryResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.QueryResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.QueryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.QueryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.QueryResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static QueryResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ExecuteRequestMessage : pb::GeneratedMessage<ExecuteRequestMessage, ExecuteRequestMessage.Builder> {
    private ExecuteRequestMessage() { }
    private static readonly ExecuteRequestMessage defaultInstance = new ExecuteRequestMessage().MakeReadOnly();
    private static readonly string[] _executeRequestMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _executeRequestMessageFieldTags = new uint[] { 26, 10, 18 };
    public static ExecuteRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExecuteRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExecuteRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExecuteRequestMessage, ExecuteRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteRequestMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
        private Request() { }
        private static readonly Request defaultInstance = new Request().MakeReadOnly();
        private static readonly string[] _requestFieldNames = new string[] { "arguments", "attachments", "command", "id" };
        private static readonly uint[] _requestFieldTags = new uint[] { 26, 138, 18, 8 };
        public static Request DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Request DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Request ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteRequestMessage_Request__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteRequestMessage_Request__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int CommandFieldNumber = 2;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int ArgumentsFieldNumber = 3;
        private pbc::PopsicleList<string> arguments_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ArgumentsList {
          get { return pbc::Lists.AsReadOnly(arguments_); }
        }
        public int ArgumentsCount {
          get { return arguments_.Count; }
        }
        public string GetArguments(int index) {
          return arguments_[index];
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _requestFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[3], Id);
          }
          if (hasCommand) {
            output.WriteString(2, field_names[2], Command);
          }
          if (arguments_.Count > 0) {
            output.WriteStringArray(3, field_names[0], arguments_);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[1], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Command);
            }
            {
              int dataSize = 0;
              foreach (string element in ArgumentsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 1 * arguments_.Count;
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Request ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Request MakeReadOnly() {
          arguments_.MakeReadOnly();
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Request prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Request cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Request result;
          
          private Request PrepareBuilder() {
            if (resultIsReadOnly) {
              Request original = result;
              result = new Request();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Request MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.ExecuteRequestMessage.Types.Request.Descriptor; }
          }
          
          public override Request DefaultInstanceForType {
            get { return global::Plugin.ExecuteRequestMessage.Types.Request.DefaultInstance; }
          }
          
          public override Request BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Request) {
              return MergeFrom((Request) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Request other) {
            if (other == global::Plugin.ExecuteRequestMessage.Types.Request.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.arguments_.Count != 0) {
              result.arguments_.Add(other.arguments_);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 26: {
                  input.ReadStringArray(tag, field_name, result.arguments_);
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> ArgumentsList {
            get { return PrepareBuilder().arguments_; }
          }
          public int ArgumentsCount {
            get { return result.ArgumentsCount; }
          }
          public string GetArguments(int index) {
            return result.GetArguments(index);
          }
          public Builder SetArguments(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_[index] = value;
            return this;
          }
          public Builder AddArguments(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_.Add(value);
            return this;
          }
          public Builder AddRangeArguments(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.arguments_.Add(values);
            return this;
          }
          public Builder ClearArguments() {
            PrepareBuilder();
            result.arguments_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Request() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.ExecuteRequestMessage.Types.Request> payload_ = new pbc::PopsicleList<global::Plugin.ExecuteRequestMessage.Types.Request>();
    public scg::IList<global::Plugin.ExecuteRequestMessage.Types.Request> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.ExecuteRequestMessage.Types.Request GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        foreach (global::Plugin.ExecuteRequestMessage.Types.Request element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _executeRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.ExecuteRequestMessage.Types.Request element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExecuteRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExecuteRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExecuteRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExecuteRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ExecuteRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExecuteRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExecuteRequestMessage result;
      
      private ExecuteRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          ExecuteRequestMessage original = result;
          result = new ExecuteRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExecuteRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.ExecuteRequestMessage.Descriptor; }
      }
      
      public override ExecuteRequestMessage DefaultInstanceForType {
        get { return global::Plugin.ExecuteRequestMessage.DefaultInstance; }
      }
      
      public override ExecuteRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExecuteRequestMessage) {
          return MergeFrom((ExecuteRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExecuteRequestMessage other) {
        if (other == global::Plugin.ExecuteRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_executeRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _executeRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.ExecuteRequestMessage.Types.Request.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.ExecuteRequestMessage.Types.Request> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.ExecuteRequestMessage.Types.Request GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.ExecuteRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.ExecuteRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.ExecuteRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.ExecuteRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.ExecuteRequestMessage.Types.Request> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static ExecuteRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ExecuteResponseMessage : pb::GeneratedMessage<ExecuteResponseMessage, ExecuteResponseMessage.Builder> {
    private ExecuteResponseMessage() { }
    private static readonly ExecuteResponseMessage defaultInstance = new ExecuteResponseMessage().MakeReadOnly();
    private static readonly string[] _executeResponseMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _executeResponseMessageFieldTags = new uint[] { 26, 10, 18 };
    public static ExecuteResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExecuteResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExecuteResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExecuteResponseMessage, ExecuteResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "arguments", "attachments", "command", "data", "id", "message", "result" };
        private static readonly uint[] _responseFieldTags = new uint[] { 130, 138, 42, 90, 16, 82, 72 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public static class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public sealed partial class ResponseData : pb::GeneratedMessage<ResponseData, ResponseData.Builder> {
            private ResponseData() { }
            private static readonly ResponseData defaultInstance = new ResponseData().MakeReadOnly();
            private static readonly string[] _responseDataFieldNames = new string[] { "alias", "headers", "rows" };
            private static readonly uint[] _responseDataFieldTags = new uint[] { 10, 18, 26 };
            public static ResponseData DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override ResponseData DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override ResponseData ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<ResponseData, ResponseData.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData__FieldAccessorTable; }
            }
            
            #region Nested types
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
            public static class Types {
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
              [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
              public sealed partial class ResponseDataCell : pb::GeneratedMessage<ResponseDataCell, ResponseDataCell.Builder> {
                private ResponseDataCell() { }
                private static readonly ResponseDataCell defaultInstance = new ResponseDataCell().MakeReadOnly();
                private static readonly string[] _responseDataCellFieldNames = new string[] { "data", "tag" };
                private static readonly uint[] _responseDataCellFieldTags = new uint[] { 10, 18 };
                public static ResponseDataCell DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override ResponseDataCell DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override ResponseDataCell ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataCell__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<ResponseDataCell, ResponseDataCell.Builder> InternalFieldAccessors {
                  get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataCell__FieldAccessorTable; }
                }
                
                public const int DataFieldNumber = 1;
                private bool hasData;
                private global::Plugin.Common.Types.AnyDataType data_;
                public bool HasData {
                  get { return hasData; }
                }
                public global::Plugin.Common.Types.AnyDataType Data {
                  get { return data_ ?? global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
                }
                
                public const int TagFieldNumber = 2;
                private bool hasTag;
                private string tag_ = "";
                public bool HasTag {
                  get { return hasTag; }
                }
                public string Tag {
                  get { return tag_; }
                }
                
                public override bool IsInitialized {
                  get {
                    if (!hasData) return false;
                    if (!Data.IsInitialized) return false;
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  int size = SerializedSize;
                  string[] field_names = _responseDataCellFieldNames;
                  if (hasData) {
                    output.WriteMessage(1, field_names[0], Data);
                  }
                  if (hasTag) {
                    output.WriteString(2, field_names[1], Tag);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    
                    size = 0;
                    if (hasData) {
                      size += pb::CodedOutputStream.ComputeMessageSize(1, Data);
                    }
                    if (hasTag) {
                      size += pb::CodedOutputStream.ComputeStringSize(2, Tag);
                    }
                    size += UnknownFields.SerializedSize;
                    memoizedSerializedSize = size;
                    return size;
                  }
                }
                
                public static ResponseDataCell ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static ResponseDataCell ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static ResponseDataCell ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static ResponseDataCell ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static ResponseDataCell ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static ResponseDataCell ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static ResponseDataCell ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static ResponseDataCell ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static ResponseDataCell ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static ResponseDataCell ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private ResponseDataCell MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(ResponseDataCell prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
                public sealed partial class Builder : pb::GeneratedBuilder<ResponseDataCell, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(ResponseDataCell cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private ResponseDataCell result;
                  
                  private ResponseDataCell PrepareBuilder() {
                    if (resultIsReadOnly) {
                      ResponseDataCell original = result;
                      result = new ResponseDataCell();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override ResponseDataCell MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell.Descriptor; }
                  }
                  
                  public override ResponseDataCell DefaultInstanceForType {
                    get { return global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell.DefaultInstance; }
                  }
                  
                  public override ResponseDataCell BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is ResponseDataCell) {
                      return MergeFrom((ResponseDataCell) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(ResponseDataCell other) {
                    if (other == global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasData) {
                      MergeData(other.Data);
                    }
                    if (other.HasTag) {
                      Tag = other.Tag;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_responseDataCellFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _responseDataCellFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          global::Plugin.Common.Types.AnyDataType.Builder subBuilder = global::Plugin.Common.Types.AnyDataType.CreateBuilder();
                          if (result.hasData) {
                            subBuilder.MergeFrom(Data);
                          }
                          input.ReadMessage(subBuilder, extensionRegistry);
                          Data = subBuilder.BuildPartial();
                          break;
                        }
                        case 18: {
                          result.hasTag = input.ReadString(ref result.tag_);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasData {
                   get { return result.hasData; }
                  }
                  public global::Plugin.Common.Types.AnyDataType Data {
                    get { return result.Data; }
                    set { SetData(value); }
                  }
                  public Builder SetData(global::Plugin.Common.Types.AnyDataType value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasData = true;
                    result.data_ = value;
                    return this;
                  }
                  public Builder SetData(global::Plugin.Common.Types.AnyDataType.Builder builderForValue) {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.hasData = true;
                    result.data_ = builderForValue.Build();
                    return this;
                  }
                  public Builder MergeData(global::Plugin.Common.Types.AnyDataType value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    if (result.hasData &&
                        result.data_ != global::Plugin.Common.Types.AnyDataType.DefaultInstance) {
                        result.data_ = global::Plugin.Common.Types.AnyDataType.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
                    } else {
                      result.data_ = value;
                    }
                    result.hasData = true;
                    return this;
                  }
                  public Builder ClearData() {
                    PrepareBuilder();
                    result.hasData = false;
                    result.data_ = null;
                    return this;
                  }
                  
                  public bool HasTag {
                    get { return result.hasTag; }
                  }
                  public string Tag {
                    get { return result.Tag; }
                    set { SetTag(value); }
                  }
                  public Builder SetTag(string value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasTag = true;
                    result.tag_ = value;
                    return this;
                  }
                  public Builder ClearTag() {
                    PrepareBuilder();
                    result.hasTag = false;
                    result.tag_ = "";
                    return this;
                  }
                }
                static ResponseDataCell() {
                  object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
              [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
              public sealed partial class ResponseDataRow : pb::GeneratedMessage<ResponseDataRow, ResponseDataRow.Builder> {
                private ResponseDataRow() { }
                private static readonly ResponseDataRow defaultInstance = new ResponseDataRow().MakeReadOnly();
                private static readonly string[] _responseDataRowFieldNames = new string[] { "cells" };
                private static readonly uint[] _responseDataRowFieldTags = new uint[] { 10 };
                public static ResponseDataRow DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override ResponseDataRow DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override ResponseDataRow ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataRow__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<ResponseDataRow, ResponseDataRow.Builder> InternalFieldAccessors {
                  get { return global::Plugin.Plugin.internal__static_Plugin_ExecuteResponseMessage_Response_ResponseData_ResponseDataRow__FieldAccessorTable; }
                }
                
                public const int CellsFieldNumber = 1;
                private pbc::PopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell> cells_ = new pbc::PopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell>();
                public scg::IList<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell> CellsList {
                  get { return cells_; }
                }
                public int CellsCount {
                  get { return cells_.Count; }
                }
                public global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell GetCells(int index) {
                  return cells_[index];
                }
                
                public override bool IsInitialized {
                  get {
                    foreach (global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell element in CellsList) {
                      if (!element.IsInitialized) return false;
                    }
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  int size = SerializedSize;
                  string[] field_names = _responseDataRowFieldNames;
                  if (cells_.Count > 0) {
                    output.WriteMessageArray(1, field_names[0], cells_);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    
                    size = 0;
                    foreach (global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell element in CellsList) {
                      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
                    }
                    size += UnknownFields.SerializedSize;
                    memoizedSerializedSize = size;
                    return size;
                  }
                }
                
                public static ResponseDataRow ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static ResponseDataRow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static ResponseDataRow ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static ResponseDataRow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static ResponseDataRow ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static ResponseDataRow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static ResponseDataRow ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static ResponseDataRow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static ResponseDataRow ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static ResponseDataRow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private ResponseDataRow MakeReadOnly() {
                  cells_.MakeReadOnly();
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(ResponseDataRow prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
                public sealed partial class Builder : pb::GeneratedBuilder<ResponseDataRow, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(ResponseDataRow cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private ResponseDataRow result;
                  
                  private ResponseDataRow PrepareBuilder() {
                    if (resultIsReadOnly) {
                      ResponseDataRow original = result;
                      result = new ResponseDataRow();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override ResponseDataRow MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.Descriptor; }
                  }
                  
                  public override ResponseDataRow DefaultInstanceForType {
                    get { return global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.DefaultInstance; }
                  }
                  
                  public override ResponseDataRow BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is ResponseDataRow) {
                      return MergeFrom((ResponseDataRow) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(ResponseDataRow other) {
                    if (other == global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.cells_.Count != 0) {
                      result.cells_.Add(other.cells_);
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_responseDataRowFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _responseDataRowFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          input.ReadMessageArray(tag, field_name, result.cells_, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell.DefaultInstance, extensionRegistry);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public pbc::IPopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell> CellsList {
                    get { return PrepareBuilder().cells_; }
                  }
                  public int CellsCount {
                    get { return result.CellsCount; }
                  }
                  public global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell GetCells(int index) {
                    return result.GetCells(index);
                  }
                  public Builder SetCells(int index, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.cells_[index] = value;
                    return this;
                  }
                  public Builder SetCells(int index, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell.Builder builderForValue) {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.cells_[index] = builderForValue.Build();
                    return this;
                  }
                  public Builder AddCells(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.cells_.Add(value);
                    return this;
                  }
                  public Builder AddCells(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell.Builder builderForValue) {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.cells_.Add(builderForValue.Build());
                    return this;
                  }
                  public Builder AddRangeCells(scg::IEnumerable<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataCell> values) {
                    PrepareBuilder();
                    result.cells_.Add(values);
                    return this;
                  }
                  public Builder ClearCells() {
                    PrepareBuilder();
                    result.cells_.Clear();
                    return this;
                  }
                }
                static ResponseDataRow() {
                  object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
                }
              }
              
            }
            #endregion
            
            public const int AliasFieldNumber = 1;
            private bool hasAlias;
            private string alias_ = "";
            public bool HasAlias {
              get { return hasAlias; }
            }
            public string Alias {
              get { return alias_; }
            }
            
            public const int HeadersFieldNumber = 2;
            private bool hasHeaders;
            private global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow headers_;
            public bool HasHeaders {
              get { return hasHeaders; }
            }
            public global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow Headers {
              get { return headers_ ?? global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.DefaultInstance; }
            }
            
            public const int RowsFieldNumber = 3;
            private pbc::PopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow> rows_ = new pbc::PopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow>();
            public scg::IList<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow> RowsList {
              get { return rows_; }
            }
            public int RowsCount {
              get { return rows_.Count; }
            }
            public global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow GetRows(int index) {
              return rows_[index];
            }
            
            public override bool IsInitialized {
              get {
                if (!hasAlias) return false;
                if (HasHeaders) {
                  if (!Headers.IsInitialized) return false;
                }
                foreach (global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow element in RowsList) {
                  if (!element.IsInitialized) return false;
                }
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _responseDataFieldNames;
              if (hasAlias) {
                output.WriteString(1, field_names[0], Alias);
              }
              if (hasHeaders) {
                output.WriteMessage(2, field_names[1], Headers);
              }
              if (rows_.Count > 0) {
                output.WriteMessageArray(3, field_names[2], rows_);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasAlias) {
                  size += pb::CodedOutputStream.ComputeStringSize(1, Alias);
                }
                if (hasHeaders) {
                  size += pb::CodedOutputStream.ComputeMessageSize(2, Headers);
                }
                foreach (global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow element in RowsList) {
                  size += pb::CodedOutputStream.ComputeMessageSize(3, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static ResponseData ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static ResponseData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static ResponseData ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static ResponseData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static ResponseData ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static ResponseData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static ResponseData ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static ResponseData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static ResponseData ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static ResponseData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private ResponseData MakeReadOnly() {
              rows_.MakeReadOnly();
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(ResponseData prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
            public sealed partial class Builder : pb::GeneratedBuilder<ResponseData, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(ResponseData cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private ResponseData result;
              
              private ResponseData PrepareBuilder() {
                if (resultIsReadOnly) {
                  ResponseData original = result;
                  result = new ResponseData();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override ResponseData MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Descriptor; }
              }
              
              public override ResponseData DefaultInstanceForType {
                get { return global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.DefaultInstance; }
              }
              
              public override ResponseData BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is ResponseData) {
                  return MergeFrom((ResponseData) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(ResponseData other) {
                if (other == global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAlias) {
                  Alias = other.Alias;
                }
                if (other.HasHeaders) {
                  MergeHeaders(other.Headers);
                }
                if (other.rows_.Count != 0) {
                  result.rows_.Add(other.rows_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_responseDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _responseDataFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasAlias = input.ReadString(ref result.alias_);
                      break;
                    }
                    case 18: {
                      global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.Builder subBuilder = global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.CreateBuilder();
                      if (result.hasHeaders) {
                        subBuilder.MergeFrom(Headers);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Headers = subBuilder.BuildPartial();
                      break;
                    }
                    case 26: {
                      input.ReadMessageArray(tag, field_name, result.rows_, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.DefaultInstance, extensionRegistry);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasAlias {
                get { return result.hasAlias; }
              }
              public string Alias {
                get { return result.Alias; }
                set { SetAlias(value); }
              }
              public Builder SetAlias(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlias = true;
                result.alias_ = value;
                return this;
              }
              public Builder ClearAlias() {
                PrepareBuilder();
                result.hasAlias = false;
                result.alias_ = "";
                return this;
              }
              
              public bool HasHeaders {
               get { return result.hasHeaders; }
              }
              public global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow Headers {
                get { return result.Headers; }
                set { SetHeaders(value); }
              }
              public Builder SetHeaders(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasHeaders = true;
                result.headers_ = value;
                return this;
              }
              public Builder SetHeaders(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasHeaders = true;
                result.headers_ = builderForValue.Build();
                return this;
              }
              public Builder MergeHeaders(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasHeaders &&
                    result.headers_ != global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.DefaultInstance) {
                    result.headers_ = global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.CreateBuilder(result.headers_).MergeFrom(value).BuildPartial();
                } else {
                  result.headers_ = value;
                }
                result.hasHeaders = true;
                return this;
              }
              public Builder ClearHeaders() {
                PrepareBuilder();
                result.hasHeaders = false;
                result.headers_ = null;
                return this;
              }
              
              public pbc::IPopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow> RowsList {
                get { return PrepareBuilder().rows_; }
              }
              public int RowsCount {
                get { return result.RowsCount; }
              }
              public global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow GetRows(int index) {
                return result.GetRows(index);
              }
              public Builder SetRows(int index, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.rows_[index] = value;
                return this;
              }
              public Builder SetRows(int index, global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.rows_[index] = builderForValue.Build();
                return this;
              }
              public Builder AddRows(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.rows_.Add(value);
                return this;
              }
              public Builder AddRows(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.rows_.Add(builderForValue.Build());
                return this;
              }
              public Builder AddRangeRows(scg::IEnumerable<global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Types.ResponseDataRow> values) {
                PrepareBuilder();
                result.rows_.Add(values);
                return this;
              }
              public Builder ClearRows() {
                PrepareBuilder();
                result.rows_.Clear();
                return this;
              }
            }
            static ResponseData() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int IdFieldNumber = 2;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int CommandFieldNumber = 5;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int ArgumentsFieldNumber = 16;
        private pbc::PopsicleList<string> arguments_ = new pbc::PopsicleList<string>();
        public scg::IList<string> ArgumentsList {
          get { return pbc::Lists.AsReadOnly(arguments_); }
        }
        public int ArgumentsCount {
          get { return arguments_.Count; }
        }
        public string GetArguments(int index) {
          return arguments_[index];
        }
        
        public const int ResultFieldNumber = 9;
        private bool hasResult;
        private global::Plugin.Common.Types.ResultCode result_ = global::Plugin.Common.Types.ResultCode.OK;
        public bool HasResult {
          get { return hasResult; }
        }
        public global::Plugin.Common.Types.ResultCode Result {
          get { return result_; }
        }
        
        public const int MessageFieldNumber = 10;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }
        
        public const int DataFieldNumber = 11;
        private bool hasData;
        private global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData data_;
        public bool HasData {
          get { return hasData; }
        }
        public global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData Data {
          get { return data_ ?? global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.DefaultInstance; }
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            if (!hasResult) return false;
            if (!hasMessage) return false;
            if (HasData) {
              if (!Data.IsInitialized) return false;
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt32(2, field_names[4], Id);
          }
          if (hasCommand) {
            output.WriteString(5, field_names[2], Command);
          }
          if (hasResult) {
            output.WriteEnum(9, field_names[6], (int) Result, Result);
          }
          if (hasMessage) {
            output.WriteString(10, field_names[5], Message);
          }
          if (hasData) {
            output.WriteMessage(11, field_names[3], Data);
          }
          if (arguments_.Count > 0) {
            output.WriteStringArray(16, field_names[0], arguments_);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[1], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Command);
            }
            {
              int dataSize = 0;
              foreach (string element in ArgumentsList) {
                dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
              }
              size += dataSize;
              size += 2 * arguments_.Count;
            }
            if (hasResult) {
              size += pb::CodedOutputStream.ComputeEnumSize(9, (int) Result);
            }
            if (hasMessage) {
              size += pb::CodedOutputStream.ComputeStringSize(10, Message);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeMessageSize(11, Data);
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          arguments_.MakeReadOnly();
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.ExecuteResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.ExecuteResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.ExecuteResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.arguments_.Count != 0) {
              result.arguments_.Add(other.arguments_);
            }
            if (other.HasResult) {
              Result = other.Result;
            }
            if (other.HasMessage) {
              Message = other.Message;
            }
            if (other.HasData) {
              MergeData(other.Data);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 16: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 42: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 72: {
                  object unknown;
                  if(input.ReadEnum(ref result.result_, out unknown)) {
                    result.hasResult = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(9, (ulong)(int)unknown);
                  }
                  break;
                }
                case 82: {
                  result.hasMessage = input.ReadString(ref result.message_);
                  break;
                }
                case 90: {
                  global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Builder subBuilder = global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.CreateBuilder();
                  if (result.hasData) {
                    subBuilder.MergeFrom(Data);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Data = subBuilder.BuildPartial();
                  break;
                }
                case 130: {
                  input.ReadStringArray(tag, field_name, result.arguments_);
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<string> ArgumentsList {
            get { return PrepareBuilder().arguments_; }
          }
          public int ArgumentsCount {
            get { return result.ArgumentsCount; }
          }
          public string GetArguments(int index) {
            return result.GetArguments(index);
          }
          public Builder SetArguments(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_[index] = value;
            return this;
          }
          public Builder AddArguments(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.arguments_.Add(value);
            return this;
          }
          public Builder AddRangeArguments(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.arguments_.Add(values);
            return this;
          }
          public Builder ClearArguments() {
            PrepareBuilder();
            result.arguments_.Clear();
            return this;
          }
          
          public bool HasResult {
           get { return result.hasResult; }
          }
          public global::Plugin.Common.Types.ResultCode Result {
            get { return result.Result; }
            set { SetResult(value); }
          }
          public Builder SetResult(global::Plugin.Common.Types.ResultCode value) {
            PrepareBuilder();
            result.hasResult = true;
            result.result_ = value;
            return this;
          }
          public Builder ClearResult() {
            PrepareBuilder();
            result.hasResult = false;
            result.result_ = global::Plugin.Common.Types.ResultCode.OK;
            return this;
          }
          
          public bool HasMessage {
            get { return result.hasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
          
          public bool HasData {
           get { return result.hasData; }
          }
          public global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder SetData(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = builderForValue.Build();
            return this;
          }
          public Builder MergeData(global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasData &&
                result.data_ != global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.DefaultInstance) {
                result.data_ = global::Plugin.ExecuteResponseMessage.Types.Response.Types.ResponseData.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
            } else {
              result.data_ = value;
            }
            result.hasData = true;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = null;
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.ExecuteResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.ExecuteResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        foreach (global::Plugin.ExecuteResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _executeResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.ExecuteResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExecuteResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExecuteResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExecuteResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExecuteResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExecuteResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ExecuteResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExecuteResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExecuteResponseMessage result;
      
      private ExecuteResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          ExecuteResponseMessage original = result;
          result = new ExecuteResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExecuteResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.ExecuteResponseMessage.Descriptor; }
      }
      
      public override ExecuteResponseMessage DefaultInstanceForType {
        get { return global::Plugin.ExecuteResponseMessage.DefaultInstance; }
      }
      
      public override ExecuteResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExecuteResponseMessage) {
          return MergeFrom((ExecuteResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExecuteResponseMessage other) {
        if (other == global::Plugin.ExecuteResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_executeResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _executeResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.ExecuteResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.ExecuteResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.ExecuteResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.ExecuteResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.ExecuteResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.ExecuteResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.ExecuteResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.ExecuteResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static ExecuteResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SubmitRequestMessage : pb::GeneratedMessage<SubmitRequestMessage, SubmitRequestMessage.Builder> {
    private SubmitRequestMessage() { }
    private static readonly SubmitRequestMessage defaultInstance = new SubmitRequestMessage().MakeReadOnly();
    private static readonly string[] _submitRequestMessageFieldNames = new string[] { "attachments", "channel", "header", "payload" };
    private static readonly uint[] _submitRequestMessageFieldTags = new uint[] { 34, 18, 10, 26 };
    public static SubmitRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SubmitRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SubmitRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_SubmitRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SubmitRequestMessage, SubmitRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_SubmitRequestMessage__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int ChannelFieldNumber = 2;
    private bool hasChannel;
    private string channel_ = "";
    public bool HasChannel {
      get { return hasChannel; }
    }
    public string Channel {
      get { return channel_; }
    }
    
    public const int PayloadFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.QueryResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.QueryResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.QueryResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 4;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!hasChannel) return false;
        if (!Header.IsInitialized) return false;
        foreach (global::Plugin.QueryResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _submitRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[2], Header);
      }
      if (hasChannel) {
        output.WriteString(2, field_names[1], Channel);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(3, field_names[3], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        if (hasChannel) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Channel);
        }
        foreach (global::Plugin.QueryResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SubmitRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SubmitRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SubmitRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubmitRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SubmitRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SubmitRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SubmitRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SubmitRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SubmitRequestMessage result;
      
      private SubmitRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SubmitRequestMessage original = result;
          result = new SubmitRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SubmitRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.SubmitRequestMessage.Descriptor; }
      }
      
      public override SubmitRequestMessage DefaultInstanceForType {
        get { return global::Plugin.SubmitRequestMessage.DefaultInstance; }
      }
      
      public override SubmitRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SubmitRequestMessage) {
          return MergeFrom((SubmitRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SubmitRequestMessage other) {
        if (other == global::Plugin.SubmitRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_submitRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _submitRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasChannel = input.ReadString(ref result.channel_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.QueryResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      public string Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      public Builder SetChannel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.QueryResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.QueryResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.QueryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.QueryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.QueryResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.QueryResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static SubmitRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SubmitResponseMessage : pb::GeneratedMessage<SubmitResponseMessage, SubmitResponseMessage.Builder> {
    private SubmitResponseMessage() { }
    private static readonly SubmitResponseMessage defaultInstance = new SubmitResponseMessage().MakeReadOnly();
    private static readonly string[] _submitResponseMessageFieldNames = new string[] { "attachments", "header", "payload" };
    private static readonly uint[] _submitResponseMessageFieldTags = new uint[] { 26, 10, 18 };
    public static SubmitResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SubmitResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SubmitResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_SubmitResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SubmitResponseMessage, SubmitResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_SubmitResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "attachments", "command", "id", "status" };
        private static readonly uint[] _responseFieldTags = new uint[] { 138, 18, 8, 26 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_SubmitResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_SubmitResponseMessage_Response__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int CommandFieldNumber = 2;
        private bool hasCommand;
        private string command_ = "";
        public bool HasCommand {
          get { return hasCommand; }
        }
        public string Command {
          get { return command_; }
        }
        
        public const int StatusFieldNumber = 3;
        private bool hasStatus;
        private global::Plugin.Common.Types.Status status_;
        public bool HasStatus {
          get { return hasStatus; }
        }
        public global::Plugin.Common.Types.Status Status {
          get { return status_ ?? global::Plugin.Common.Types.Status.DefaultInstance; }
        }
        
        public const int AttachmentsFieldNumber = 17;
        private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
        public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
          get { return attachments_; }
        }
        public int AttachmentsCount {
          get { return attachments_.Count; }
        }
        public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
          return attachments_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasCommand) return false;
            if (!hasStatus) return false;
            if (!Status.IsInitialized) return false;
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[2], Id);
          }
          if (hasCommand) {
            output.WriteString(2, field_names[1], Command);
          }
          if (hasStatus) {
            output.WriteMessage(3, field_names[3], Status);
          }
          if (attachments_.Count > 0) {
            output.WriteMessageArray(17, field_names[0], attachments_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasCommand) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Command);
            }
            if (hasStatus) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, Status);
            }
            foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
              size += pb::CodedOutputStream.ComputeMessageSize(17, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          attachments_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.SubmitResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.SubmitResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.SubmitResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.HasStatus) {
              MergeStatus(other.Status);
            }
            if (other.attachments_.Count != 0) {
              result.attachments_.Add(other.attachments_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 18: {
                  result.hasCommand = input.ReadString(ref result.command_);
                  break;
                }
                case 26: {
                  global::Plugin.Common.Types.Status.Builder subBuilder = global::Plugin.Common.Types.Status.CreateBuilder();
                  if (result.hasStatus) {
                    subBuilder.MergeFrom(Status);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Status = subBuilder.BuildPartial();
                  break;
                }
                case 138: {
                  input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasCommand {
            get { return result.hasCommand; }
          }
          public string Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = "";
            return this;
          }
          
          public bool HasStatus {
           get { return result.hasStatus; }
          }
          public global::Plugin.Common.Types.Status Status {
            get { return result.Status; }
            set { SetStatus(value); }
          }
          public Builder SetStatus(global::Plugin.Common.Types.Status value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStatus = true;
            result.status_ = value;
            return this;
          }
          public Builder SetStatus(global::Plugin.Common.Types.Status.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasStatus = true;
            result.status_ = builderForValue.Build();
            return this;
          }
          public Builder MergeStatus(global::Plugin.Common.Types.Status value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasStatus &&
                result.status_ != global::Plugin.Common.Types.Status.DefaultInstance) {
                result.status_ = global::Plugin.Common.Types.Status.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
            } else {
              result.status_ = value;
            }
            result.hasStatus = true;
            return this;
          }
          public Builder ClearStatus() {
            PrepareBuilder();
            result.hasStatus = false;
            result.status_ = null;
            return this;
          }
          
          public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
            get { return PrepareBuilder().attachments_; }
          }
          public int AttachmentsCount {
            get { return result.AttachmentsCount; }
          }
          public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
            return result.GetAttachments(index);
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_[index] = value;
            return this;
          }
          public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.attachments_.Add(value);
            return this;
          }
          public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.attachments_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
            PrepareBuilder();
            result.attachments_.Add(values);
            return this;
          }
          public Builder ClearAttachments() {
            PrepareBuilder();
            result.attachments_.Clear();
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.SubmitResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.SubmitResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.SubmitResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.SubmitResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public const int AttachmentsFieldNumber = 3;
    private pbc::PopsicleList<global::Plugin.Common.Types.Attachment> attachments_ = new pbc::PopsicleList<global::Plugin.Common.Types.Attachment>();
    public scg::IList<global::Plugin.Common.Types.Attachment> AttachmentsList {
      get { return attachments_; }
    }
    public int AttachmentsCount {
      get { return attachments_.Count; }
    }
    public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
      return attachments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        foreach (global::Plugin.SubmitResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _submitResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], payload_);
      }
      if (attachments_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], attachments_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.SubmitResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::Plugin.Common.Types.Attachment element in AttachmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SubmitResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SubmitResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SubmitResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SubmitResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SubmitResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      attachments_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SubmitResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SubmitResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SubmitResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SubmitResponseMessage result;
      
      private SubmitResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          SubmitResponseMessage original = result;
          result = new SubmitResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SubmitResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.SubmitResponseMessage.Descriptor; }
      }
      
      public override SubmitResponseMessage DefaultInstanceForType {
        get { return global::Plugin.SubmitResponseMessage.DefaultInstance; }
      }
      
      public override SubmitResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SubmitResponseMessage) {
          return MergeFrom((SubmitResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SubmitResponseMessage other) {
        if (other == global::Plugin.SubmitResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        if (other.attachments_.Count != 0) {
          result.attachments_.Add(other.attachments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_submitResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _submitResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.SubmitResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.attachments_, global::Plugin.Common.Types.Attachment.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.SubmitResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.SubmitResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.SubmitResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.SubmitResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.SubmitResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.SubmitResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.SubmitResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.Common.Types.Attachment> AttachmentsList {
        get { return PrepareBuilder().attachments_; }
      }
      public int AttachmentsCount {
        get { return result.AttachmentsCount; }
      }
      public global::Plugin.Common.Types.Attachment GetAttachments(int index) {
        return result.GetAttachments(index);
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_[index] = value;
        return this;
      }
      public Builder SetAttachments(int index, global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachments_.Add(value);
        return this;
      }
      public Builder AddAttachments(global::Plugin.Common.Types.Attachment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachments(scg::IEnumerable<global::Plugin.Common.Types.Attachment> values) {
        PrepareBuilder();
        result.attachments_.Add(values);
        return this;
      }
      public Builder ClearAttachments() {
        PrepareBuilder();
        result.attachments_.Clear();
        return this;
      }
    }
    static SubmitResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Settings : pb::GeneratedMessage<Settings, Settings.Builder> {
    private Settings() { }
    private static readonly Settings defaultInstance = new Settings().MakeReadOnly();
    private static readonly string[] _settingsFieldNames = new string[] {  };
    private static readonly uint[] _settingsFieldTags = new uint[] {  };
    public static Settings DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Settings DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Settings ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_Settings__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Settings, Settings.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_Settings__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Node : pb::GeneratedMessage<Node, Node.Builder> {
        private Node() { }
        private static readonly Node defaultInstance = new Node().MakeReadOnly();
        private static readonly string[] _nodeFieldNames = new string[] { "expression", "path" };
        private static readonly uint[] _nodeFieldTags = new uint[] { 18, 10 };
        public static Node DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Node DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Node ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Node__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Node, Node.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Node__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public static class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public sealed partial class Path : pb::GeneratedMessage<Path, Path.Builder> {
            private Path() { }
            private static readonly Path defaultInstance = new Path().MakeReadOnly();
            private static readonly string[] _pathFieldNames = new string[] { "key", "path" };
            private static readonly uint[] _pathFieldTags = new uint[] { 18, 10 };
            public static Path DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Path DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Path ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Node_Path__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Path, Path.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_Settings_Node_Path__FieldAccessorTable; }
            }
            
            public const int Path_FieldNumber = 1;
            private bool hasPath_;
            private string path_ = "";
            public bool HasPath_ {
              get { return hasPath_; }
            }
            public string Path_ {
              get { return path_; }
            }
            
            public const int KeyFieldNumber = 2;
            private bool hasKey;
            private string key_ = "";
            public bool HasKey {
              get { return hasKey; }
            }
            public string Key {
              get { return key_; }
            }
            
            public override bool IsInitialized {
              get {
                if (!hasPath_) return false;
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _pathFieldNames;
              if (hasPath_) {
                output.WriteString(1, field_names[1], Path_);
              }
              if (hasKey) {
                output.WriteString(2, field_names[0], Key);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                if (hasPath_) {
                  size += pb::CodedOutputStream.ComputeStringSize(1, Path_);
                }
                if (hasKey) {
                  size += pb::CodedOutputStream.ComputeStringSize(2, Key);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static Path ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Path ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Path ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Path ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Path ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Path ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Path ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Path ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Path ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Path ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Path MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Path prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
            public sealed partial class Builder : pb::GeneratedBuilder<Path, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Path cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Path result;
              
              private Path PrepareBuilder() {
                if (resultIsReadOnly) {
                  Path original = result;
                  result = new Path();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Path MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.Settings.Types.Node.Types.Path.Descriptor; }
              }
              
              public override Path DefaultInstanceForType {
                get { return global::Plugin.Settings.Types.Node.Types.Path.DefaultInstance; }
              }
              
              public override Path BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Path) {
                  return MergeFrom((Path) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Path other) {
                if (other == global::Plugin.Settings.Types.Node.Types.Path.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasPath_) {
                  Path_ = other.Path_;
                }
                if (other.HasKey) {
                  Key = other.Key;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_pathFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _pathFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasPath_ = input.ReadString(ref result.path_);
                      break;
                    }
                    case 18: {
                      result.hasKey = input.ReadString(ref result.key_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasPath_ {
                get { return result.hasPath_; }
              }
              public string Path_ {
                get { return result.Path_; }
                set { SetPath_(value); }
              }
              public Builder SetPath_(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPath_ = true;
                result.path_ = value;
                return this;
              }
              public Builder ClearPath_() {
                PrepareBuilder();
                result.hasPath_ = false;
                result.path_ = "";
                return this;
              }
              
              public bool HasKey {
                get { return result.hasKey; }
              }
              public string Key {
                get { return result.Key; }
                set { SetKey(value); }
              }
              public Builder SetKey(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasKey = true;
                result.key_ = value;
                return this;
              }
              public Builder ClearKey() {
                PrepareBuilder();
                result.hasKey = false;
                result.key_ = "";
                return this;
              }
            }
            static Path() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int PathFieldNumber = 1;
        private bool hasPath;
        private global::Plugin.Settings.Types.Node.Types.Path path_;
        public bool HasPath {
          get { return hasPath; }
        }
        public global::Plugin.Settings.Types.Node.Types.Path Path {
          get { return path_ ?? global::Plugin.Settings.Types.Node.Types.Path.DefaultInstance; }
        }
        
        public const int ExpressionFieldNumber = 2;
        private bool hasExpression;
        private string expression_ = "";
        public bool HasExpression {
          get { return hasExpression; }
        }
        public string Expression {
          get { return expression_; }
        }
        
        public override bool IsInitialized {
          get {
            if (HasPath) {
              if (!Path.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _nodeFieldNames;
          if (hasPath) {
            output.WriteMessage(1, field_names[1], Path);
          }
          if (hasExpression) {
            output.WriteString(2, field_names[0], Expression);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasPath) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, Path);
            }
            if (hasExpression) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Expression);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Node ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Node ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Node ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Node ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Node ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Node ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Node ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Node ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Node ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Node ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Node MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Node prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Node, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Node cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Node result;
          
          private Node PrepareBuilder() {
            if (resultIsReadOnly) {
              Node original = result;
              result = new Node();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Node MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.Settings.Types.Node.Descriptor; }
          }
          
          public override Node DefaultInstanceForType {
            get { return global::Plugin.Settings.Types.Node.DefaultInstance; }
          }
          
          public override Node BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Node) {
              return MergeFrom((Node) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Node other) {
            if (other == global::Plugin.Settings.Types.Node.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPath) {
              MergePath(other.Path);
            }
            if (other.HasExpression) {
              Expression = other.Expression;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_nodeFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _nodeFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  global::Plugin.Settings.Types.Node.Types.Path.Builder subBuilder = global::Plugin.Settings.Types.Node.Types.Path.CreateBuilder();
                  if (result.hasPath) {
                    subBuilder.MergeFrom(Path);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Path = subBuilder.BuildPartial();
                  break;
                }
                case 18: {
                  result.hasExpression = input.ReadString(ref result.expression_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasPath {
           get { return result.hasPath; }
          }
          public global::Plugin.Settings.Types.Node.Types.Path Path {
            get { return result.Path; }
            set { SetPath(value); }
          }
          public Builder SetPath(global::Plugin.Settings.Types.Node.Types.Path value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPath = true;
            result.path_ = value;
            return this;
          }
          public Builder SetPath(global::Plugin.Settings.Types.Node.Types.Path.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasPath = true;
            result.path_ = builderForValue.Build();
            return this;
          }
          public Builder MergePath(global::Plugin.Settings.Types.Node.Types.Path value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasPath &&
                result.path_ != global::Plugin.Settings.Types.Node.Types.Path.DefaultInstance) {
                result.path_ = global::Plugin.Settings.Types.Node.Types.Path.CreateBuilder(result.path_).MergeFrom(value).BuildPartial();
            } else {
              result.path_ = value;
            }
            result.hasPath = true;
            return this;
          }
          public Builder ClearPath() {
            PrepareBuilder();
            result.hasPath = false;
            result.path_ = null;
            return this;
          }
          
          public bool HasExpression {
            get { return result.hasExpression; }
          }
          public string Expression {
            get { return result.Expression; }
            set { SetExpression(value); }
          }
          public Builder SetExpression(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasExpression = true;
            result.expression_ = value;
            return this;
          }
          public Builder ClearExpression() {
            PrepareBuilder();
            result.hasExpression = false;
            result.expression_ = "";
            return this;
          }
        }
        static Node() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _settingsFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Settings ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Settings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Settings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Settings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Settings ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Settings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Settings ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Settings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Settings MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Settings prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Settings, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Settings cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Settings result;
      
      private Settings PrepareBuilder() {
        if (resultIsReadOnly) {
          Settings original = result;
          result = new Settings();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Settings MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.Settings.Descriptor; }
      }
      
      public override Settings DefaultInstanceForType {
        get { return global::Plugin.Settings.DefaultInstance; }
      }
      
      public override Settings BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Settings) {
          return MergeFrom((Settings) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Settings other) {
        if (other == global::Plugin.Settings.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_settingsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _settingsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Settings() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuerySettingsRequestMessage : pb::GeneratedMessage<QuerySettingsRequestMessage, QuerySettingsRequestMessage.Builder> {
    private QuerySettingsRequestMessage() { }
    private static readonly QuerySettingsRequestMessage defaultInstance = new QuerySettingsRequestMessage().MakeReadOnly();
    private static readonly string[] _querySettingsRequestMessageFieldNames = new string[] { "header", "payload" };
    private static readonly uint[] _querySettingsRequestMessageFieldTags = new uint[] { 10, 18 };
    public static QuerySettingsRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuerySettingsRequestMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuerySettingsRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuerySettingsRequestMessage, QuerySettingsRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsRequestMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
        private Request() { }
        private static readonly Request defaultInstance = new Request().MakeReadOnly();
        private static readonly string[] _requestFieldNames = new string[] { "default", "fetch_descriptions", "id", "node", "return_type" };
        private static readonly uint[] _requestFieldTags = new uint[] { 26, 32, 8, 18, 136 };
        public static Request DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Request DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Request ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsRequestMessage_Request__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsRequestMessage_Request__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int NodeFieldNumber = 2;
        private bool hasNode;
        private global::Plugin.Settings node_;
        public bool HasNode {
          get { return hasNode; }
        }
        public global::Plugin.Settings Node {
          get { return node_ ?? global::Plugin.Settings.DefaultInstance; }
        }
        
        public const int DefaultFieldNumber = 3;
        private bool hasDefault;
        private string default_ = "";
        public bool HasDefault {
          get { return hasDefault; }
        }
        public string Default {
          get { return default_; }
        }
        
        public const int FetchDescriptionsFieldNumber = 4;
        private bool hasFetchDescriptions;
        private bool fetchDescriptions_;
        public bool HasFetchDescriptions {
          get { return hasFetchDescriptions; }
        }
        public bool FetchDescriptions {
          get { return fetchDescriptions_; }
        }
        
        public const int ReturnTypeFieldNumber = 17;
        private bool hasReturnType;
        private global::Plugin.Common.Types.DataType returnType_ = global::Plugin.Common.Types.DataType.INT;
        public bool HasReturnType {
          get { return hasReturnType; }
        }
        public global::Plugin.Common.Types.DataType ReturnType {
          get { return returnType_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasNode) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _requestFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[2], Id);
          }
          if (hasNode) {
            output.WriteMessage(2, field_names[3], Node);
          }
          if (hasDefault) {
            output.WriteString(3, field_names[0], Default);
          }
          if (hasFetchDescriptions) {
            output.WriteBool(4, field_names[1], FetchDescriptions);
          }
          if (hasReturnType) {
            output.WriteEnum(17, field_names[4], (int) ReturnType, ReturnType);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasNode) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, Node);
            }
            if (hasDefault) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Default);
            }
            if (hasFetchDescriptions) {
              size += pb::CodedOutputStream.ComputeBoolSize(4, FetchDescriptions);
            }
            if (hasReturnType) {
              size += pb::CodedOutputStream.ComputeEnumSize(17, (int) ReturnType);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Request ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Request MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Request prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Request cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Request result;
          
          private Request PrepareBuilder() {
            if (resultIsReadOnly) {
              Request original = result;
              result = new Request();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Request MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.QuerySettingsRequestMessage.Types.Request.Descriptor; }
          }
          
          public override Request DefaultInstanceForType {
            get { return global::Plugin.QuerySettingsRequestMessage.Types.Request.DefaultInstance; }
          }
          
          public override Request BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Request) {
              return MergeFrom((Request) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Request other) {
            if (other == global::Plugin.QuerySettingsRequestMessage.Types.Request.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasNode) {
              MergeNode(other.Node);
            }
            if (other.HasDefault) {
              Default = other.Default;
            }
            if (other.HasFetchDescriptions) {
              FetchDescriptions = other.FetchDescriptions;
            }
            if (other.HasReturnType) {
              ReturnType = other.ReturnType;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 18: {
                  global::Plugin.Settings.Builder subBuilder = global::Plugin.Settings.CreateBuilder();
                  if (result.hasNode) {
                    subBuilder.MergeFrom(Node);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Node = subBuilder.BuildPartial();
                  break;
                }
                case 26: {
                  result.hasDefault = input.ReadString(ref result.default_);
                  break;
                }
                case 32: {
                  result.hasFetchDescriptions = input.ReadBool(ref result.fetchDescriptions_);
                  break;
                }
                case 136: {
                  object unknown;
                  if(input.ReadEnum(ref result.returnType_, out unknown)) {
                    result.hasReturnType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(17, (ulong)(int)unknown);
                  }
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasNode {
           get { return result.hasNode; }
          }
          public global::Plugin.Settings Node {
            get { return result.Node; }
            set { SetNode(value); }
          }
          public Builder SetNode(global::Plugin.Settings value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasNode = true;
            result.node_ = value;
            return this;
          }
          public Builder SetNode(global::Plugin.Settings.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasNode = true;
            result.node_ = builderForValue.Build();
            return this;
          }
          public Builder MergeNode(global::Plugin.Settings value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasNode &&
                result.node_ != global::Plugin.Settings.DefaultInstance) {
                result.node_ = global::Plugin.Settings.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
            } else {
              result.node_ = value;
            }
            result.hasNode = true;
            return this;
          }
          public Builder ClearNode() {
            PrepareBuilder();
            result.hasNode = false;
            result.node_ = null;
            return this;
          }
          
          public bool HasDefault {
            get { return result.hasDefault; }
          }
          public string Default {
            get { return result.Default; }
            set { SetDefault(value); }
          }
          public Builder SetDefault(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDefault = true;
            result.default_ = value;
            return this;
          }
          public Builder ClearDefault() {
            PrepareBuilder();
            result.hasDefault = false;
            result.default_ = "";
            return this;
          }
          
          public bool HasFetchDescriptions {
            get { return result.hasFetchDescriptions; }
          }
          public bool FetchDescriptions {
            get { return result.FetchDescriptions; }
            set { SetFetchDescriptions(value); }
          }
          public Builder SetFetchDescriptions(bool value) {
            PrepareBuilder();
            result.hasFetchDescriptions = true;
            result.fetchDescriptions_ = value;
            return this;
          }
          public Builder ClearFetchDescriptions() {
            PrepareBuilder();
            result.hasFetchDescriptions = false;
            result.fetchDescriptions_ = false;
            return this;
          }
          
          public bool HasReturnType {
           get { return result.hasReturnType; }
          }
          public global::Plugin.Common.Types.DataType ReturnType {
            get { return result.ReturnType; }
            set { SetReturnType(value); }
          }
          public Builder SetReturnType(global::Plugin.Common.Types.DataType value) {
            PrepareBuilder();
            result.hasReturnType = true;
            result.returnType_ = value;
            return this;
          }
          public Builder ClearReturnType() {
            PrepareBuilder();
            result.hasReturnType = false;
            result.returnType_ = global::Plugin.Common.Types.DataType.INT;
            return this;
          }
        }
        static Request() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.QuerySettingsRequestMessage.Types.Request> payload_ = new pbc::PopsicleList<global::Plugin.QuerySettingsRequestMessage.Types.Request>();
    public scg::IList<global::Plugin.QuerySettingsRequestMessage.Types.Request> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.QuerySettingsRequestMessage.Types.Request GetPayload(int index) {
      return payload_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        foreach (global::Plugin.QuerySettingsRequestMessage.Types.Request element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _querySettingsRequestMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], payload_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.QuerySettingsRequestMessage.Types.Request element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuerySettingsRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuerySettingsRequestMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuerySettingsRequestMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuerySettingsRequestMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuerySettingsRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuerySettingsRequestMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuerySettingsRequestMessage result;
      
      private QuerySettingsRequestMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QuerySettingsRequestMessage original = result;
          result = new QuerySettingsRequestMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuerySettingsRequestMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.QuerySettingsRequestMessage.Descriptor; }
      }
      
      public override QuerySettingsRequestMessage DefaultInstanceForType {
        get { return global::Plugin.QuerySettingsRequestMessage.DefaultInstance; }
      }
      
      public override QuerySettingsRequestMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuerySettingsRequestMessage) {
          return MergeFrom((QuerySettingsRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuerySettingsRequestMessage other) {
        if (other == global::Plugin.QuerySettingsRequestMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_querySettingsRequestMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _querySettingsRequestMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.QuerySettingsRequestMessage.Types.Request.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.QuerySettingsRequestMessage.Types.Request> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.QuerySettingsRequestMessage.Types.Request GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.QuerySettingsRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.QuerySettingsRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.QuerySettingsRequestMessage.Types.Request value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.QuerySettingsRequestMessage.Types.Request.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.QuerySettingsRequestMessage.Types.Request> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
    }
    static QuerySettingsRequestMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class QuerySettingsResponseMessage : pb::GeneratedMessage<QuerySettingsResponseMessage, QuerySettingsResponseMessage.Builder> {
    private QuerySettingsResponseMessage() { }
    private static readonly QuerySettingsResponseMessage defaultInstance = new QuerySettingsResponseMessage().MakeReadOnly();
    private static readonly string[] _querySettingsResponseMessageFieldNames = new string[] { "header", "payload" };
    private static readonly uint[] _querySettingsResponseMessageFieldTags = new uint[] { 10, 18 };
    public static QuerySettingsResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QuerySettingsResponseMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QuerySettingsResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QuerySettingsResponseMessage, QuerySettingsResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsResponseMessage__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
        private Response() { }
        private static readonly Response defaultInstance = new Response().MakeReadOnly();
        private static readonly string[] _responseFieldNames = new string[] { "description", "id", "keys", "node", "required_type", "title", "value" };
        private static readonly uint[] _responseFieldTags = new uint[] { 58, 8, 42, 18, 136, 50, 34 };
        public static Response DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Response DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Response ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsResponseMessage_Response__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsResponseMessage_Response__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public static class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public sealed partial class SectionKeys : pb::GeneratedMessage<SectionKeys, SectionKeys.Builder> {
            private SectionKeys() { }
            private static readonly SectionKeys defaultInstance = new SectionKeys().MakeReadOnly();
            private static readonly string[] _sectionKeysFieldNames = new string[] { "key" };
            private static readonly uint[] _sectionKeysFieldTags = new uint[] { 10 };
            public static SectionKeys DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override SectionKeys DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override SectionKeys ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsResponseMessage_Response_SectionKeys__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<SectionKeys, SectionKeys.Builder> InternalFieldAccessors {
              get { return global::Plugin.Plugin.internal__static_Plugin_QuerySettingsResponseMessage_Response_SectionKeys__FieldAccessorTable; }
            }
            
            public const int KeyFieldNumber = 1;
            private pbc::PopsicleList<string> key_ = new pbc::PopsicleList<string>();
            public scg::IList<string> KeyList {
              get { return pbc::Lists.AsReadOnly(key_); }
            }
            public int KeyCount {
              get { return key_.Count; }
            }
            public string GetKey(int index) {
              return key_[index];
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              int size = SerializedSize;
              string[] field_names = _sectionKeysFieldNames;
              if (key_.Count > 0) {
                output.WriteStringArray(1, field_names[0], key_);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                
                size = 0;
                {
                  int dataSize = 0;
                  foreach (string element in KeyList) {
                    dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
                  }
                  size += dataSize;
                  size += 1 * key_.Count;
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
              }
            }
            
            public static SectionKeys ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SectionKeys ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SectionKeys ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static SectionKeys ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static SectionKeys ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SectionKeys ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static SectionKeys ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static SectionKeys ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static SectionKeys ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static SectionKeys ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private SectionKeys MakeReadOnly() {
              key_.MakeReadOnly();
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(SectionKeys prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
            public sealed partial class Builder : pb::GeneratedBuilder<SectionKeys, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(SectionKeys cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private SectionKeys result;
              
              private SectionKeys PrepareBuilder() {
                if (resultIsReadOnly) {
                  SectionKeys original = result;
                  result = new SectionKeys();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override SectionKeys MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.Descriptor; }
              }
              
              public override SectionKeys DefaultInstanceForType {
                get { return global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.DefaultInstance; }
              }
              
              public override SectionKeys BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is SectionKeys) {
                  return MergeFrom((SectionKeys) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(SectionKeys other) {
                if (other == global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.DefaultInstance) return this;
                PrepareBuilder();
                if (other.key_.Count != 0) {
                  result.key_.Add(other.key_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_sectionKeysFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _sectionKeysFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      input.ReadStringArray(tag, field_name, result.key_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public pbc::IPopsicleList<string> KeyList {
                get { return PrepareBuilder().key_; }
              }
              public int KeyCount {
                get { return result.KeyCount; }
              }
              public string GetKey(int index) {
                return result.GetKey(index);
              }
              public Builder SetKey(int index, string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.key_[index] = value;
                return this;
              }
              public Builder AddKey(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.key_.Add(value);
                return this;
              }
              public Builder AddRangeKey(scg::IEnumerable<string> values) {
                PrepareBuilder();
                result.key_.Add(values);
                return this;
              }
              public Builder ClearKey() {
                PrepareBuilder();
                result.key_.Clear();
                return this;
              }
            }
            static SectionKeys() {
              object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId {
          get { return hasId; }
        }
        public long Id {
          get { return id_; }
        }
        
        public const int NodeFieldNumber = 2;
        private bool hasNode;
        private global::Plugin.Settings node_;
        public bool HasNode {
          get { return hasNode; }
        }
        public global::Plugin.Settings Node {
          get { return node_ ?? global::Plugin.Settings.DefaultInstance; }
        }
        
        public const int ValueFieldNumber = 4;
        private bool hasValue;
        private global::Plugin.Common.Types.AnyDataType value_;
        public bool HasValue {
          get { return hasValue; }
        }
        public global::Plugin.Common.Types.AnyDataType Value {
          get { return value_ ?? global::Plugin.Common.Types.AnyDataType.DefaultInstance; }
        }
        
        public const int KeysFieldNumber = 5;
        private bool hasKeys;
        private global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys keys_;
        public bool HasKeys {
          get { return hasKeys; }
        }
        public global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys Keys {
          get { return keys_ ?? global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.DefaultInstance; }
        }
        
        public const int TitleFieldNumber = 6;
        private bool hasTitle;
        private string title_ = "";
        public bool HasTitle {
          get { return hasTitle; }
        }
        public string Title {
          get { return title_; }
        }
        
        public const int DescriptionFieldNumber = 7;
        private bool hasDescription;
        private string description_ = "";
        public bool HasDescription {
          get { return hasDescription; }
        }
        public string Description {
          get { return description_; }
        }
        
        public const int RequiredTypeFieldNumber = 17;
        private bool hasRequiredType;
        private global::Plugin.Common.Types.DataType requiredType_ = global::Plugin.Common.Types.DataType.INT;
        public bool HasRequiredType {
          get { return hasRequiredType; }
        }
        public global::Plugin.Common.Types.DataType RequiredType {
          get { return requiredType_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasNode) return false;
            if (HasValue) {
              if (!Value.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _responseFieldNames;
          if (hasId) {
            output.WriteInt64(1, field_names[1], Id);
          }
          if (hasNode) {
            output.WriteMessage(2, field_names[3], Node);
          }
          if (hasValue) {
            output.WriteMessage(4, field_names[6], Value);
          }
          if (hasKeys) {
            output.WriteMessage(5, field_names[2], Keys);
          }
          if (hasTitle) {
            output.WriteString(6, field_names[5], Title);
          }
          if (hasDescription) {
            output.WriteString(7, field_names[0], Description);
          }
          if (hasRequiredType) {
            output.WriteEnum(17, field_names[4], (int) RequiredType, RequiredType);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
            }
            if (hasNode) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, Node);
            }
            if (hasValue) {
              size += pb::CodedOutputStream.ComputeMessageSize(4, Value);
            }
            if (hasKeys) {
              size += pb::CodedOutputStream.ComputeMessageSize(5, Keys);
            }
            if (hasTitle) {
              size += pb::CodedOutputStream.ComputeStringSize(6, Title);
            }
            if (hasDescription) {
              size += pb::CodedOutputStream.ComputeStringSize(7, Description);
            }
            if (hasRequiredType) {
              size += pb::CodedOutputStream.ComputeEnumSize(17, (int) RequiredType);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Response ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Response MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Response prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Response cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Response result;
          
          private Response PrepareBuilder() {
            if (resultIsReadOnly) {
              Response original = result;
              result = new Response();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Response MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.QuerySettingsResponseMessage.Types.Response.Descriptor; }
          }
          
          public override Response DefaultInstanceForType {
            get { return global::Plugin.QuerySettingsResponseMessage.Types.Response.DefaultInstance; }
          }
          
          public override Response BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Response) {
              return MergeFrom((Response) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Response other) {
            if (other == global::Plugin.QuerySettingsResponseMessage.Types.Response.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasNode) {
              MergeNode(other.Node);
            }
            if (other.HasValue) {
              MergeValue(other.Value);
            }
            if (other.HasKeys) {
              MergeKeys(other.Keys);
            }
            if (other.HasTitle) {
              Title = other.Title;
            }
            if (other.HasDescription) {
              Description = other.Description;
            }
            if (other.HasRequiredType) {
              RequiredType = other.RequiredType;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt64(ref result.id_);
                  break;
                }
                case 18: {
                  global::Plugin.Settings.Builder subBuilder = global::Plugin.Settings.CreateBuilder();
                  if (result.hasNode) {
                    subBuilder.MergeFrom(Node);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Node = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Plugin.Common.Types.AnyDataType.Builder subBuilder = global::Plugin.Common.Types.AnyDataType.CreateBuilder();
                  if (result.hasValue) {
                    subBuilder.MergeFrom(Value);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Value = subBuilder.BuildPartial();
                  break;
                }
                case 42: {
                  global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.Builder subBuilder = global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.CreateBuilder();
                  if (result.hasKeys) {
                    subBuilder.MergeFrom(Keys);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Keys = subBuilder.BuildPartial();
                  break;
                }
                case 50: {
                  result.hasTitle = input.ReadString(ref result.title_);
                  break;
                }
                case 58: {
                  result.hasDescription = input.ReadString(ref result.description_);
                  break;
                }
                case 136: {
                  object unknown;
                  if(input.ReadEnum(ref result.requiredType_, out unknown)) {
                    result.hasRequiredType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(17, (ulong)(int)unknown);
                  }
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public long Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(long value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0L;
            return this;
          }
          
          public bool HasNode {
           get { return result.hasNode; }
          }
          public global::Plugin.Settings Node {
            get { return result.Node; }
            set { SetNode(value); }
          }
          public Builder SetNode(global::Plugin.Settings value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasNode = true;
            result.node_ = value;
            return this;
          }
          public Builder SetNode(global::Plugin.Settings.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasNode = true;
            result.node_ = builderForValue.Build();
            return this;
          }
          public Builder MergeNode(global::Plugin.Settings value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasNode &&
                result.node_ != global::Plugin.Settings.DefaultInstance) {
                result.node_ = global::Plugin.Settings.CreateBuilder(result.node_).MergeFrom(value).BuildPartial();
            } else {
              result.node_ = value;
            }
            result.hasNode = true;
            return this;
          }
          public Builder ClearNode() {
            PrepareBuilder();
            result.hasNode = false;
            result.node_ = null;
            return this;
          }
          
          public bool HasValue {
           get { return result.hasValue; }
          }
          public global::Plugin.Common.Types.AnyDataType Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(global::Plugin.Common.Types.AnyDataType value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder SetValue(global::Plugin.Common.Types.AnyDataType.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = builderForValue.Build();
            return this;
          }
          public Builder MergeValue(global::Plugin.Common.Types.AnyDataType value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasValue &&
                result.value_ != global::Plugin.Common.Types.AnyDataType.DefaultInstance) {
                result.value_ = global::Plugin.Common.Types.AnyDataType.CreateBuilder(result.value_).MergeFrom(value).BuildPartial();
            } else {
              result.value_ = value;
            }
            result.hasValue = true;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = null;
            return this;
          }
          
          public bool HasKeys {
           get { return result.hasKeys; }
          }
          public global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys Keys {
            get { return result.Keys; }
            set { SetKeys(value); }
          }
          public Builder SetKeys(global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasKeys = true;
            result.keys_ = value;
            return this;
          }
          public Builder SetKeys(global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasKeys = true;
            result.keys_ = builderForValue.Build();
            return this;
          }
          public Builder MergeKeys(global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasKeys &&
                result.keys_ != global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.DefaultInstance) {
                result.keys_ = global::Plugin.QuerySettingsResponseMessage.Types.Response.Types.SectionKeys.CreateBuilder(result.keys_).MergeFrom(value).BuildPartial();
            } else {
              result.keys_ = value;
            }
            result.hasKeys = true;
            return this;
          }
          public Builder ClearKeys() {
            PrepareBuilder();
            result.hasKeys = false;
            result.keys_ = null;
            return this;
          }
          
          public bool HasTitle {
            get { return result.hasTitle; }
          }
          public string Title {
            get { return result.Title; }
            set { SetTitle(value); }
          }
          public Builder SetTitle(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasTitle = true;
            result.title_ = value;
            return this;
          }
          public Builder ClearTitle() {
            PrepareBuilder();
            result.hasTitle = false;
            result.title_ = "";
            return this;
          }
          
          public bool HasDescription {
            get { return result.hasDescription; }
          }
          public string Description {
            get { return result.Description; }
            set { SetDescription(value); }
          }
          public Builder SetDescription(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDescription = true;
            result.description_ = value;
            return this;
          }
          public Builder ClearDescription() {
            PrepareBuilder();
            result.hasDescription = false;
            result.description_ = "";
            return this;
          }
          
          public bool HasRequiredType {
           get { return result.hasRequiredType; }
          }
          public global::Plugin.Common.Types.DataType RequiredType {
            get { return result.RequiredType; }
            set { SetRequiredType(value); }
          }
          public Builder SetRequiredType(global::Plugin.Common.Types.DataType value) {
            PrepareBuilder();
            result.hasRequiredType = true;
            result.requiredType_ = value;
            return this;
          }
          public Builder ClearRequiredType() {
            PrepareBuilder();
            result.hasRequiredType = false;
            result.requiredType_ = global::Plugin.Common.Types.DataType.INT;
            return this;
          }
        }
        static Response() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::Plugin.Common.Types.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::Plugin.Common.Types.Header Header {
      get { return header_ ?? global::Plugin.Common.Types.Header.DefaultInstance; }
    }
    
    public const int PayloadFieldNumber = 2;
    private pbc::PopsicleList<global::Plugin.QuerySettingsResponseMessage.Types.Response> payload_ = new pbc::PopsicleList<global::Plugin.QuerySettingsResponseMessage.Types.Response>();
    public scg::IList<global::Plugin.QuerySettingsResponseMessage.Types.Response> PayloadList {
      get { return payload_; }
    }
    public int PayloadCount {
      get { return payload_.Count; }
    }
    public global::Plugin.QuerySettingsResponseMessage.Types.Response GetPayload(int index) {
      return payload_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!Header.IsInitialized) return false;
        foreach (global::Plugin.QuerySettingsResponseMessage.Types.Response element in PayloadList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _querySettingsResponseMessageFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (payload_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], payload_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Plugin.QuerySettingsResponseMessage.Types.Response element in PayloadList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QuerySettingsResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QuerySettingsResponseMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QuerySettingsResponseMessage MakeReadOnly() {
      payload_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QuerySettingsResponseMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<QuerySettingsResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QuerySettingsResponseMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QuerySettingsResponseMessage result;
      
      private QuerySettingsResponseMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QuerySettingsResponseMessage original = result;
          result = new QuerySettingsResponseMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QuerySettingsResponseMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.QuerySettingsResponseMessage.Descriptor; }
      }
      
      public override QuerySettingsResponseMessage DefaultInstanceForType {
        get { return global::Plugin.QuerySettingsResponseMessage.DefaultInstance; }
      }
      
      public override QuerySettingsResponseMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QuerySettingsResponseMessage) {
          return MergeFrom((QuerySettingsResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QuerySettingsResponseMessage other) {
        if (other == global::Plugin.QuerySettingsResponseMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.payload_.Count != 0) {
          result.payload_.Add(other.payload_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_querySettingsResponseMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _querySettingsResponseMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Plugin.Common.Types.Header.Builder subBuilder = global::Plugin.Common.Types.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.payload_, global::Plugin.QuerySettingsResponseMessage.Types.Response.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::Plugin.Common.Types.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::Plugin.Common.Types.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::Plugin.Common.Types.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::Plugin.Common.Types.Header.DefaultInstance) {
            result.header_ = global::Plugin.Common.Types.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Plugin.QuerySettingsResponseMessage.Types.Response> PayloadList {
        get { return PrepareBuilder().payload_; }
      }
      public int PayloadCount {
        get { return result.PayloadCount; }
      }
      public global::Plugin.QuerySettingsResponseMessage.Types.Response GetPayload(int index) {
        return result.GetPayload(index);
      }
      public Builder SetPayload(int index, global::Plugin.QuerySettingsResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_[index] = value;
        return this;
      }
      public Builder SetPayload(int index, global::Plugin.QuerySettingsResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPayload(global::Plugin.QuerySettingsResponseMessage.Types.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.payload_.Add(value);
        return this;
      }
      public Builder AddPayload(global::Plugin.QuerySettingsResponseMessage.Types.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.payload_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePayload(scg::IEnumerable<global::Plugin.QuerySettingsResponseMessage.Types.Response> values) {
        PrepareBuilder();
        result.payload_.Add(values);
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.payload_.Clear();
        return this;
      }
    }
    static QuerySettingsResponseMessage() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LogEntry : pb::GeneratedMessage<LogEntry, LogEntry.Builder> {
    private LogEntry() { }
    private static readonly LogEntry defaultInstance = new LogEntry().MakeReadOnly();
    private static readonly string[] _logEntryFieldNames = new string[] { "entry" };
    private static readonly uint[] _logEntryFieldTags = new uint[] { 10 };
    public static LogEntry DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LogEntry DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogEntry ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Plugin.Plugin.internal__static_Plugin_LogEntry__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LogEntry, LogEntry.Builder> InternalFieldAccessors {
      get { return global::Plugin.Plugin.internal__static_Plugin_LogEntry__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Entry : pb::GeneratedMessage<Entry, Entry.Builder> {
        private Entry() { }
        private static readonly Entry defaultInstance = new Entry().MakeReadOnly();
        private static readonly string[] _entryFieldNames = new string[] { "date", "file", "level", "line", "message", "sender" };
        private static readonly uint[] _entryFieldTags = new uint[] { 48, 26, 8, 32, 42, 18 };
        public static Entry DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Entry DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Entry ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Plugin.Plugin.internal__static_Plugin_LogEntry_Entry__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Entry, Entry.Builder> InternalFieldAccessors {
          get { return global::Plugin.Plugin.internal__static_Plugin_LogEntry_Entry__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public static class Types {
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public enum Level {
            LOG_DEBUG = 500,
            LOG_INFO = 150,
            LOG_WARNING = 50,
            LOG_ERROR = 10,
            LOG_CRITICAL = 1,
          }
          
        }
        #endregion
        
        public const int LevelFieldNumber = 1;
        private bool hasLevel;
        private global::Plugin.LogEntry.Types.Entry.Types.Level level_ = global::Plugin.LogEntry.Types.Entry.Types.Level.LOG_DEBUG;
        public bool HasLevel {
          get { return hasLevel; }
        }
        public global::Plugin.LogEntry.Types.Entry.Types.Level Level {
          get { return level_; }
        }
        
        public const int SenderFieldNumber = 2;
        private bool hasSender;
        private string sender_ = "";
        public bool HasSender {
          get { return hasSender; }
        }
        public string Sender {
          get { return sender_; }
        }
        
        public const int FileFieldNumber = 3;
        private bool hasFile;
        private string file_ = "";
        public bool HasFile {
          get { return hasFile; }
        }
        public string File {
          get { return file_; }
        }
        
        public const int LineFieldNumber = 4;
        private bool hasLine;
        private int line_;
        public bool HasLine {
          get { return hasLine; }
        }
        public int Line {
          get { return line_; }
        }
        
        public const int MessageFieldNumber = 5;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }
        
        public const int DateFieldNumber = 6;
        private bool hasDate;
        private int date_;
        public bool HasDate {
          get { return hasDate; }
        }
        public int Date {
          get { return date_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasLevel) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _entryFieldNames;
          if (hasLevel) {
            output.WriteEnum(1, field_names[2], (int) Level, Level);
          }
          if (hasSender) {
            output.WriteString(2, field_names[5], Sender);
          }
          if (hasFile) {
            output.WriteString(3, field_names[1], File);
          }
          if (hasLine) {
            output.WriteInt32(4, field_names[3], Line);
          }
          if (hasMessage) {
            output.WriteString(5, field_names[4], Message);
          }
          if (hasDate) {
            output.WriteInt32(6, field_names[0], Date);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasLevel) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Level);
            }
            if (hasSender) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Sender);
            }
            if (hasFile) {
              size += pb::CodedOutputStream.ComputeStringSize(3, File);
            }
            if (hasLine) {
              size += pb::CodedOutputStream.ComputeInt32Size(4, Line);
            }
            if (hasMessage) {
              size += pb::CodedOutputStream.ComputeStringSize(5, Message);
            }
            if (hasDate) {
              size += pb::CodedOutputStream.ComputeInt32Size(6, Date);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Entry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Entry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Entry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Entry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Entry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Entry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Entry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Entry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Entry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Entry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Entry MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Entry prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Entry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Entry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Entry result;
          
          private Entry PrepareBuilder() {
            if (resultIsReadOnly) {
              Entry original = result;
              result = new Entry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Entry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Plugin.LogEntry.Types.Entry.Descriptor; }
          }
          
          public override Entry DefaultInstanceForType {
            get { return global::Plugin.LogEntry.Types.Entry.DefaultInstance; }
          }
          
          public override Entry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Entry) {
              return MergeFrom((Entry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Entry other) {
            if (other == global::Plugin.LogEntry.Types.Entry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasLevel) {
              Level = other.Level;
            }
            if (other.HasSender) {
              Sender = other.Sender;
            }
            if (other.HasFile) {
              File = other.File;
            }
            if (other.HasLine) {
              Line = other.Line;
            }
            if (other.HasMessage) {
              Message = other.Message;
            }
            if (other.HasDate) {
              Date = other.Date;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_entryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _entryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.level_, out unknown)) {
                    result.hasLevel = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 18: {
                  result.hasSender = input.ReadString(ref result.sender_);
                  break;
                }
                case 26: {
                  result.hasFile = input.ReadString(ref result.file_);
                  break;
                }
                case 32: {
                  result.hasLine = input.ReadInt32(ref result.line_);
                  break;
                }
                case 42: {
                  result.hasMessage = input.ReadString(ref result.message_);
                  break;
                }
                case 48: {
                  result.hasDate = input.ReadInt32(ref result.date_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasLevel {
           get { return result.hasLevel; }
          }
          public global::Plugin.LogEntry.Types.Entry.Types.Level Level {
            get { return result.Level; }
            set { SetLevel(value); }
          }
          public Builder SetLevel(global::Plugin.LogEntry.Types.Entry.Types.Level value) {
            PrepareBuilder();
            result.hasLevel = true;
            result.level_ = value;
            return this;
          }
          public Builder ClearLevel() {
            PrepareBuilder();
            result.hasLevel = false;
            result.level_ = global::Plugin.LogEntry.Types.Entry.Types.Level.LOG_DEBUG;
            return this;
          }
          
          public bool HasSender {
            get { return result.hasSender; }
          }
          public string Sender {
            get { return result.Sender; }
            set { SetSender(value); }
          }
          public Builder SetSender(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSender = true;
            result.sender_ = value;
            return this;
          }
          public Builder ClearSender() {
            PrepareBuilder();
            result.hasSender = false;
            result.sender_ = "";
            return this;
          }
          
          public bool HasFile {
            get { return result.hasFile; }
          }
          public string File {
            get { return result.File; }
            set { SetFile(value); }
          }
          public Builder SetFile(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasFile = true;
            result.file_ = value;
            return this;
          }
          public Builder ClearFile() {
            PrepareBuilder();
            result.hasFile = false;
            result.file_ = "";
            return this;
          }
          
          public bool HasLine {
            get { return result.hasLine; }
          }
          public int Line {
            get { return result.Line; }
            set { SetLine(value); }
          }
          public Builder SetLine(int value) {
            PrepareBuilder();
            result.hasLine = true;
            result.line_ = value;
            return this;
          }
          public Builder ClearLine() {
            PrepareBuilder();
            result.hasLine = false;
            result.line_ = 0;
            return this;
          }
          
          public bool HasMessage {
            get { return result.hasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
          
          public bool HasDate {
            get { return result.hasDate; }
          }
          public int Date {
            get { return result.Date; }
            set { SetDate(value); }
          }
          public Builder SetDate(int value) {
            PrepareBuilder();
            result.hasDate = true;
            result.date_ = value;
            return this;
          }
          public Builder ClearDate() {
            PrepareBuilder();
            result.hasDate = false;
            result.date_ = 0;
            return this;
          }
        }
        static Entry() {
          object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int EntryFieldNumber = 1;
    private pbc::PopsicleList<global::Plugin.LogEntry.Types.Entry> entry_ = new pbc::PopsicleList<global::Plugin.LogEntry.Types.Entry>();
    public scg::IList<global::Plugin.LogEntry.Types.Entry> EntryList {
      get { return entry_; }
    }
    public int EntryCount {
      get { return entry_.Count; }
    }
    public global::Plugin.LogEntry.Types.Entry GetEntry(int index) {
      return entry_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Plugin.LogEntry.Types.Entry element in EntryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _logEntryFieldNames;
      if (entry_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], entry_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Plugin.LogEntry.Types.Entry element in EntryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LogEntry ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogEntry ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogEntry ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LogEntry ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LogEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LogEntry ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogEntry MakeReadOnly() {
      entry_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LogEntry prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LogEntry, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogEntry cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogEntry result;
      
      private LogEntry PrepareBuilder() {
        if (resultIsReadOnly) {
          LogEntry original = result;
          result = new LogEntry();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogEntry MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Plugin.LogEntry.Descriptor; }
      }
      
      public override LogEntry DefaultInstanceForType {
        get { return global::Plugin.LogEntry.DefaultInstance; }
      }
      
      public override LogEntry BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LogEntry) {
          return MergeFrom((LogEntry) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogEntry other) {
        if (other == global::Plugin.LogEntry.DefaultInstance) return this;
        PrepareBuilder();
        if (other.entry_.Count != 0) {
          result.entry_.Add(other.entry_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logEntryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.entry_, global::Plugin.LogEntry.Types.Entry.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::Plugin.LogEntry.Types.Entry> EntryList {
        get { return PrepareBuilder().entry_; }
      }
      public int EntryCount {
        get { return result.EntryCount; }
      }
      public global::Plugin.LogEntry.Types.Entry GetEntry(int index) {
        return result.GetEntry(index);
      }
      public Builder SetEntry(int index, global::Plugin.LogEntry.Types.Entry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_[index] = value;
        return this;
      }
      public Builder SetEntry(int index, global::Plugin.LogEntry.Types.Entry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntry(global::Plugin.LogEntry.Types.Entry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entry_.Add(value);
        return this;
      }
      public Builder AddEntry(global::Plugin.LogEntry.Types.Entry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entry_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntry(scg::IEnumerable<global::Plugin.LogEntry.Types.Entry> values) {
        PrepareBuilder();
        result.entry_.Add(values);
        return this;
      }
      public Builder ClearEntry() {
        PrepareBuilder();
        result.entry_.Clear();
        return this;
      }
    }
    static LogEntry() {
      object.ReferenceEquals(global::Plugin.Plugin.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
