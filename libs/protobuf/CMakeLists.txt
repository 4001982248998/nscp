cmake_minimum_required(VERSION 2.6)

WRAP_PROTO(PROTO_PLUGIN_SRC plugin.proto)
WRAP_PROTO(PROTO_IPC_SRC ipc.proto)

SET(TARGET protobuf)

SET(SRCS
	plugin.proto
	ipc.proto
	${PROTO_PLUGIN_SRC_C}
	${PROTO_IPC_SRC_C}
)
IF(USE_STATIC_RUNTIME)
	ADD_LIBRARY(${TARGET} STATIC ${SRCS})
ELSE(USE_STATIC_RUNTIME)
	ADD_LIBRARY(${TARGET} SHARED ${SRCS})
	MESSAGE(STATUS "Adding fpic -- ${BUILD_SHARED_LIBS}")
	IF(CMAKE_COMPILER_IS_GNUCXX AND "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND NOT APPLE)
		SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS -fPIC)
	ENDIF(CMAKE_COMPILER_IS_GNUCXX AND "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND NOT APPLE)
	SET_LIBRARY_OUT_FOLDER(${TARGET})
ENDIF(USE_STATIC_RUNTIME)
IF(WIN32)
	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "/FI\"${BUILD_ROOT_FOLDER}\\include\\nscapi\\dll_defines_protobuf.hpp\"")
ELSE(WIN32)
	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "-include \"${BUILD_ROOT_FOLDER}/include/nscapi/dll_defines_protobuf.hpp\"")
ENDIF(WIN32) 

SET_TARGET_PROPERTIES(${TARGET} PROPERTIES FOLDER "libraries")
TARGET_LINK_LIBRARIES(${TARGET}
	${PROTOBUF_LIBRARY}
)

IF(PROTOC_GEN_JSON_FOUND AND JSON_SPIRIT_FOUND)
	SET(TARGET json_pb)

	SET(SRCS
		plugin.proto
		${PROTO_PLUGIN_SRC_JSON_C}
	)

	INCLUDE_DIRECTORIES(${JSON_SPIRIT_INCLUDE_DIR})
	ADD_DEFINITIONS(-DHAVE_JSON_SPIRIT ${NSCP_GLOBAL_DEFINES})
	INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/libs/protobuf)
	
	IF(USE_STATIC_RUNTIME)
		ADD_DEFINITIONS(-Djson_protobuf_NOLIB)
		ADD_DEFINITIONS(-DJSON_SPIRIT_STATIC_LINKED)
		ADD_LIBRARY(${TARGET} STATIC ${SRCS})
	ELSE(USE_STATIC_RUNTIME)
		ADD_LIBRARY(${TARGET} SHARED ${SRCS})
		SET_LIBRARY_OUT_FOLDER(${TARGET})
		IF(CMAKE_COMPILER_IS_GNUCXX AND "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND NOT APPLE)
			SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS -fPIC)
		ENDIF(CMAKE_COMPILER_IS_GNUCXX AND "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND NOT APPLE)
	ENDIF(USE_STATIC_RUNTIME)
	IF(WIN32)
		SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "/FI\"${BUILD_ROOT_FOLDER}\\include\\nscapi\\dll_defines_protobuf.hpp\"")
	ELSE(WIN32)
		SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "-include \"${BUILD_ROOT_FOLDER}/include/nscapi/dll_defines_protobuf.hpp\"")
	ENDIF(WIN32) 

	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES FOLDER "libraries")
	TARGET_LINK_LIBRARIES(${TARGET}
		${PROTOBUF_LIBRARY}
		protobuf
		json_spirit
	)
ENDIF()


IF (PROTOC_GEN_LUA_FOUND AND HAVE_LUA)
	SET(TARGET lua_pb)

	SET(SRCS
		plugin.proto
		${PROTO_PLUGIN_SRC_LUA_C}
	)
	MESSAGE(STATUS ${SRCS})
	INCLUDE_DIRECTORIES(${LUA_INCLUE_DIR})
	INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR}/libs/protobuf)
	ADD_DEFINITIONS(${NSCP_GLOBAL_DEFINES})
	
	IF(MSVC)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4267;4244;4702;4800")
	ENDIF(MSVC)

	IF(USE_STATIC_RUNTIME)
		ADD_DEFINITIONS(-Dlua_protobuf_NOLIB)
		ADD_LIBRARY(${TARGET} STATIC ${SRCS})
	ELSE(USE_STATIC_RUNTIME)
		ADD_DEFINITIONS(-Dlua_protobuf_EXPORTS)
		ADD_LIBRARY(${TARGET} SHARED ${SRCS})
		SET_LIBRARY_OUT_FOLDER(${TARGET})
		IF(CMAKE_COMPILER_IS_GNUCXX AND "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND NOT APPLE)
			SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS -fPIC)
		ENDIF(CMAKE_COMPILER_IS_GNUCXX AND "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND NOT APPLE)
	ENDIF(USE_STATIC_RUNTIME)

	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES FOLDER "libraries")
	TARGET_LINK_LIBRARIES(${TARGET}
		${PROTOBUF_LIBRARY}
		protobuf
		${LUA_LIB}
	)

	IF(WIN32)
		SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "/FI\"${BUILD_ROOT_FOLDER}\\include\\nscapi\\dll_defines_protobuf.hpp\"")
	ELSE(WIN32)
		SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "-include \"${BUILD_ROOT_FOLDER}/include/nscapi/dll_defines_protobuf.hpp\"")
	ENDIF(WIN32) 
ENDIF (PROTOC_GEN_LUA_FOUND AND HAVE_LUA)