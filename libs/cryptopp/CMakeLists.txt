cmake_minimum_required(VERSION 2.6)

IF (HAVE_CRYPTOPP)
	message(STATUS "Found CACHED Crypto++ in ${CRYPTOPP_SOURCE_DIR}")
ELSE (HAVE_CRYPTOPP)
	FIND_PATH(CRYPTOPP_SOURCE_DIR cryptlib.h ${CRYPTOPP_DIR})
	
	IF (CRYPTOPP_SOURCE_DIR)
		message(STATUS "Found Crypto++ in ${CRYPTOPP_SOURCE_DIR}")
		SET(HAVE_CRYPTOPP TRUE PARENT_SCOPE)
		SET(HAVE_CRYPTOPP TRUE)
	ELSE (CRYPTOPP_SOURCE_DIR)
		message(STATUS "Crypto++ was not found in ${CRYPTOPP_SOURCE_DIR} (CRYPTOPP_SOURCE_DIR)")
	ENDIF (CRYPTOPP_SOURCE_DIR)

ENDIF (HAVE_CRYPTOPP)


IF (HAVE_CRYPTOPP)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/des.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/rijndael.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/cast.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/tea.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/3way.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/blowfish.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/twofish.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/rc2.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/arc4.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/serpent.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/gost.cpp)
	
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/filters.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/osrng.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/modes.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/cryptlib.cpp)
	LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/misc.cpp)
	
	LIST(APPEND cryptopp_SOURCES cryptopp.cpp)
	IF (WIN32)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/des.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/aes.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/cast.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/tea.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/3way.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/blowfish.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/twofish.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/rc2.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/arc4.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/serpent.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/gost.h)
		
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/filters.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/osrng.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/modes.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/cryptlib.h)
		LIST(APPEND cryptopp_SOURCES ${CRYPTOPP_SOURCE_DIR}/misc.h)
		
		LIST(APPEND cryptopp_SOURCES ${NSCP_INCLUDEDIR}/cryptopp/cryptopp.hpp)
	ENDIF (WIN32)
	message(STATUS "Using Crypto++ from ${CRYPTOPP_SOURCE_DIR}")
	IF (MSVC)
	#	ADD_DEFINITIONS (-DCRYPTOPP_GENERATE_X64_MASM)
	#	ADD_DEFINITIONS (-DCRYPTOPP_DISABLE_ASM)
	#	ADD_DEFINITIONS (-DNDEBUG)
		CMAKE_POLICY(SET CMP0008 NEW)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Oi")
	ENDIF (MSVC)

	# TODO add asm 		echo $(.source)/x64masm.asm ;
	#		obj x64masm.obj : $(.source)/x64masm.asm ;
	#enable_language(ASM_MASM)
	#if(CMAKE_ASM_MASM_COMPILER_WORKS)
	#	set(can_use_assembler TRUE)
	#	SET(cryptopp_SOURCES ${cryptopp_SOURCES}  "${CRYPTOPP_SOURCE_DIR}/x64masm.asm")
	#else(CMAKE_ASM_MASM_COMPILER_WORKS)
	#	MESSAGE(WARNING "Failed to find mnasm")
	#endif(CMAKE_ASM_MASM_COMPILER_WORKS)
	IF (WIN32)
		ADD_DEFINITIONS (-DCRYPTOPP_DISABLE_ASM -DUNICODE  -D_UNICODE)
	ENDIF (WIN32)
	
	INCLUDE_DIRECTORIES(${NSCP_INCLUDEDIR})

	#ADD_LIBRARY (cryptopp SHARED ${cryptopp_SOURCES})
	#SET_TARGET_PROPERTIES(cryptopp PROPERTIES FOLDER "libraries")
	#IF(NOT WIN32)
	ADD_LIBRARY(cryptopp_static STATIC  ${cryptopp_SOURCES})
	SET_TARGET_PROPERTIES(cryptopp_static PROPERTIES FOLDER "libraries")

	#	SET_TARGET_PROPERTIES(cryptopp_static PROPERTIES OUTPUT_NAME cryptopp)
	#ENDIF(NOT WIN32)

	IF (WIN32)
		#TARGET_LINK_LIBRARIES (cryptopp Ws2_32.lib)
		TARGET_LINK_LIBRARIES (cryptopp_static Ws2_32.lib)
		# We cannot build static versions of this in windows for some reason
	ENDIF (WIN32)

	IF(APPLE)
	   #SET_TARGET_PROPERTIES(cryptopp PROPERTIES COMPILE_FLAGS "-fPIC -w -DOSX  -DNDEBUG -finline-functions -O3 -DCRYPTOPP_DISABLE_ASM")
	   SET_TARGET_PROPERTIES(cryptopp_static PROPERTIES COMPILE_FLAGS "-w -DOSX  -DNDEBUG -finline-functions -O3 -DCRYPTOPP_DISABLE_ASM")
	ELSEIF(UNIX AND NOT APPLE)
	  #SET_TARGET_PROPERTIES(cryptopp PROPERTIES COMPILE_FLAGS "-fPIC -w -pipe -DNDEBUG -DLINUX -finline-functions -O3")
	  SET_TARGET_PROPERTIES(cryptopp_static PROPERTIES COMPILE_FLAGS " -w -pipe -DNDEBUG -DLINUX -finline-functions -O3")
	ELSEIF(WIN32)
	  IF(NOT MSVC)
		#SET_TARGET_PROPERTIES(cryptopp PROPERTIES COMPILE_FLAGS "-mthreads -w -finline-functions -O3 -DNDEBUG -D__MINGW__ -DWIN32 -D_WIN32_WINNT=0x0501 -D_WIN32")
		SET_TARGET_PROPERTIES(cryptopp_static PROPERTIES COMPILE_FLAGS "-mthreads -w -finline-functions -O3 -DNDEBUG -D__MINGW__ -DWIN32 -D_WIN32_WINNT=0x0501 -D_WIN32")
	  ENDIF(NOT MSVC)
	ENDIF(APPLE)
ENDIF (HAVE_CRYPTOPP)
	