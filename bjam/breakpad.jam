import feature : feature ;
import project ;
import "class" : new ;
import targets ;
import property-set ;
import common ;
import type ;
import toolset : flags ;

# Make this module into a project.
project.initialize $(__name__) ;
project breakpad ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
   .debug-configuration = true ;
}

rule initialized ( )
{
    return $(.initialized) ;
}


rule isEnabled ( )
{
    return $(.enabled) ;
}

rule isDebug ( )
{
    return $(.debug-configuration) ;
}

rule printEnv ( ) 
{
	echo "Google Breakpad LIBRARIES : $(.libraries) change with --with-breakpad-lib=<path>" ;
	echo "Google Breakpad HEADERS : $(.headers) change with --with-breakpad=<path>" ;
}


# Initialize
rule init (
    version ? :
    headers         # Location of header files
    libraries *     # Location of libraries, lib and bin subdirs of STLport.
    )
{

	if $(.initialized)
	{
		errors.error "Attempt the reinitialize google breakpad!" ;
	}
	else
	{
		.initialized = true ;

		.libraries = $(libraries) ;
		.headers = $(headers) ;
		
	    local project = [ project.current ] ;
		
		local has-breakpad = [ MATCH "^--with-breakpad=(.*)" : [ modules.peek : ARGV ] ] ;
		local has-generic-hdr = [ MATCH "^--include-path=(.*)" : [ modules.peek : ARGV ] ] ;
		if $(has-breakpad) {
			.headers = $(has-breakpad) ;
		} else if $(has-generic-hdr) {
			.headers = $(has-generic-hdr) ;
		}
		local has-breakpad-lib = [ MATCH "^--with-breakpad-lib=(.*)" : [ modules.peek : ARGV ] ] ;
		local has-generic-lib = [ MATCH "^--library-path=(.*)" : [ modules.peek : ARGV ] ] ;
		if $(has-breakpad-lib) {
			.libraries = $(has-breakpad-lib) ;
		} else if $(has-generic-lib) {
			.libraries = $(has-generic-lib) ;
		}
		
		import toolset : flags ;

		if ( ( --with-breakpad in  [ modules.peek : ARGV ] ) || $(has-breakpad) || $(has-breakpad-lib) )  
			&& ! ( --without-breakpad in  [ modules.peek : ARGV ] ) {
			.enabled = true ;
		} else {
			.enabled = false ;
		}
				
		project.pop-current ;
	}
}

lib exception_handler
	: # source
	: # requirements
		<name>google-breakpad-exception_handler
		<conditional>@requirements
	: # default-build
	: # usage-requirements
		<conditional>@usage-requirements
	;

lib crash_generation_client
	: # source
	: # requirements
		<name>google-breakpad-crash_generation_client
		<conditional>@requirements
	: # default-build
	: # usage-requirements
		<conditional>@usage-requirements
	;

lib crash_report_sender
	: # source
	: # requirements
		<name>google-breakpad-crash_report_sender
		<conditional>@requirements
	: # default-build
	: # usage-requirements
		<conditional>@usage-requirements
	;

lib common
	: # source
	: # requirements
		<name>google-breakpad-common
		<conditional>@requirements
	: # default-build
	: # usage-requirements
		<conditional>@usage-requirements
	;

rule usage-requirements ( properties * )
{
	local result ;
	if ( $(.enabled) = true ) {
		result += <define>USE_BREAKPAD ;
		result += <include>$(.headers) ;
	}
	return $(result) ;
}

rule requirements ( properties * )
{
	local result ;
	if ( $(.enabled) = true ) {
		#result += <library-path>$(.libraries) ;
		result += <search>$(.libraries) ;
	}
	return $(result) ;
}

