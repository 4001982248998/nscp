import feature : feature ;
import project ;
import "class" : new ;
import targets ;
import property-set ;
import common ;
import type ;
import toolset : flags ;

# Make this module into a project.
project.initialize $(__name__) ;
project openssl ;


if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
   .debug-configuration = true ;
}

rule initialized ( )
{
    return $(.initialized) ;
}

rule isEnabled ( )
{
    return $(.enabled) ;
}

rule isDebug ( )
{
    return $(.debug-configuration) ;
}


rule getHeaders ( ) {
	return $(.headers) ;
}
rule getLibraries ( ) {
	return $(.libraries) ;
}

rule printEnv ( ) 
{
	echo "OPENSSL LIBRARIES : $(.libraries) change with --with-openssl-lib=<path>" ;
	echo "OPENSSL HEADERS : $(.headers) change with --with-openssl=<path>" ;
}


# Initialize openssl support.
rule init (
    version ? :
    headers         # Location of header files
    libraries *     # Location of libraries, lib and bin subdirs of STLport.
    )
{

	if $(.initialized)
	{
		errors.error "Attempt the reinitialize openssl!" ;
	}
	else
	{

		.initialized = true ;
		.headers = $(headers) ;
		.libraries = $(libraries) ;

		local has-openssl = [ MATCH "^--with-openssl=(.*)" : [ modules.peek : ARGV ] ] ;
		local has-generic-hdr = [ MATCH "^--include-path=(.*)" : [ modules.peek : ARGV ] ] ;
		if $(has-openssl) {
			.headers = $(has-openssl) ;
		} else if $(has-generic-hdr) {
			.headers = $(has-generic-hdr) ;
		}
		local has-openssl-lib = [ MATCH "^--with-openssl-lib=(.*)" : [ modules.peek : ARGV ] ] ;
		local has-generic-lib = [ MATCH "^--library-path=(.*)" : [ modules.peek : ARGV ] ] ;
		if $(has-openssl-lib) {
			.libraries = $(has-openssl-lib) ;
		} else if $(has-generic-lib) {
			.libraries = $(has-generic-lib) ;
		}
		
		import toolset : flags ;

		if ( ( --with-openssl in  [ modules.peek : ARGV ] ) || $(has-openssl) || $(has-openssl-lib) )  
			&& ! ( --without-openssl in  [ modules.peek : ARGV ] ) {
			.enabled = true ;
		} else {
			.enabled = false ;
		}
		
	    local project = [ project.current ] ;
		project.pop-current ;
	}
}

rule generate-lib-usage-requirements ( properties * )
{
	local result ;
	result += <include>$(.headers) ;
	result += <library-path>$(.libraries) ;
	result += <threading>multi ;
	result += <allow>openssl ;
	return $(result) ;
}


lib libeay32 : $(main)
	: # requirements
	  <name>libeay32
	: # default-build
	: # usage-requirements
		<conditional>@generate-lib-usage-requirements
	;
lib ssleay32 : $(main)
	: # requirements
	  <name>ssleay32
	: # default-build
	: # usage-requirements
		<conditional>@generate-lib-usage-requirements
	;
lib gdi32 ;

alias openssl 
	: # source
	: # requirements
		<conditional>@requirements
	  #<name>openssl
	: # default-build
	: # usage-requirements
		<conditional>@usage-requirements
	;


rule requirements ( properties * )
{
	local result ;
	if ( $(.enabled) = true ) {
		result += <source>libeay32 ;
		result += <source>ssleay32 ;
		result += <source>gdi32 ;
	}
	return $(result) ;
}
rule usage-requirements ( properties * )
{
	local result ;
	if ( $(.enabled) = true ) {
		result += <define>USE_OPENSSL ;
		result += <define>USE_SSL ;
	}
	return $(result) ;
}

alias socket 
	: # source
	: # requirements
		<conditional>@socket-requirements
	  #<name>openssl
	: # default-build
	: # usage-requirements
	;

rule socket-requirements ( properties * )
{
	local result ;
	result += <source>include/Socket.cpp ;
	if ( $(.enabled) = true ) {
		result += <source>include/sslSocket.cpp ;
		result += <source>openssl ;
	}
	return $(result) ;
}

