import feature : feature ;
import project ;
import "class" : new ;
import targets ;
import property-set ;
import common ;
import type ;
import toolset : flags ;

# Make this module into a project.
project.initialize $(__name__) ;
project cryptopp ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
   .debug-configuration = true ;
}

rule initialized ( )
{
    return $(.initialized) ;
}

rule isEnabled ( )
{
    return $(.enabled) ;
}

rule isDebug ( )
{
    return $(.debug-configuration) ;
}

rule printEnv ( ) 
{
	echo "Crypto++ SOURCE : change with --with-cryptopp=<source>" ;
	echo "Crypto++ SOURCE : $(.source) (change with --with-cryptopp=<source>" ;
}

# Initialize Lua support.
rule init (
    version ? :
    source         # Location of source files
    )
{

	if $(.initialized)
	{
		errors.error "Attempt the reinitialize Lua!" ;
	}
	else
	{
		.initialized = true ;
		.source = $(source) ;

		local has-cryptopp = [ MATCH "^--with-cryptopp=(.*)" : [ modules.peek : ARGV ] ] ;
		if $(has-cryptopp) {
			.source = $(has-cryptopp) ;
		}
		
		if ( ( --with-cryptopp in  [ modules.peek : ARGV ] ) || $(has-cryptopp) )  
			&& ! ( --without-cryptopp in  [ modules.peek : ARGV ] ) {
			.enabled = true ;
			} else {
			.enabled = false ;
		}

		echo $(.source)/x64masm.asm ;
		obj x64masm.obj : $(.source)/x64masm.asm ;
		
	    local project = [ project.current ] ;
		project.pop-current ;
	}
}

rule generate-asm-source ( properties * )
{
	local path = $(.source) ;
	result += <source>$(path)/x64masm.asm ;
	local result ;
}


#obj x64masm.obj : : @generate-asm-source ;
# echo $(.source)/x64masm.asm ;
obj x64masm.obj : $(.source)/x64masm.asm ;

#	: # sources
#	: # requirements
#		<conditional>@generate-asm-source
#	: # default-build
#	: # usage-requirements
#		$(usage-requirements) 
#	;

rule generate-source ( properties * )
{

	local path = $(.source) ;
	local result ;

	result += <source>$(path)/3way.cpp ;
	result += <source>$(path)/adhoc.cpp.proto ;
	result += <source>$(path)/adler32.cpp ;
	result += <source>$(path)/algebra.cpp ;
	result += <source>$(path)/algparam.cpp ;
	result += <source>$(path)/arc4.cpp ;
	result += <source>$(path)/asn.cpp ;
	result += <source>$(path)/base32.cpp ;
	result += <source>$(path)/base64.cpp ;
	result += <source>$(path)/basecode.cpp ;
	result += <source>$(path)/bfinit.cpp ;
	result += <source>$(path)/blowfish.cpp ;
	result += <source>$(path)/blumshub.cpp ;
	result += <source>$(path)/camellia.cpp ;
	result += <source>$(path)/cast.cpp ;
	result += <source>$(path)/casts.cpp ;
	result += <source>$(path)/cbcmac.cpp ;
	result += <source>$(path)/channels.cpp ;
	result += <source>$(path)/cpu.cpp ;
	result += <source>$(path)/crc.cpp ;
	result += <source>$(path)/cryptlib.cpp ;
	result += <source>$(path)/default.cpp ;
	result += <source>$(path)/des.cpp ;
	result += <source>$(path)/dessp.cpp ;
	result += <source>$(path)/dh.cpp ;
	result += <source>$(path)/dh2.cpp ;
	result += <source>$(path)/dll.cpp ;
	result += <source>$(path)/dsa.cpp ;
	result += <source>$(path)/ec2n.cpp ;
	result += <source>$(path)/eccrypto.cpp ;
	result += <source>$(path)/ecp.cpp ;
	result += <source>$(path)/elgamal.cpp ;
	result += <source>$(path)/emsa2.cpp ;
	result += <source>$(path)/eprecomp.cpp ;
	result += <source>$(path)/esign.cpp ;
	result += <source>$(path)/files.cpp ;
	result += <source>$(path)/filters.cpp ;
	result += <source>$(path)/fips140.cpp ;
	result += <source>$(path)/fipstest.cpp ;
	result += <source>$(path)/gf256.cpp ;
	result += <source>$(path)/gf2_32.cpp ;
	result += <source>$(path)/gf2n.cpp ;
	result += <source>$(path)/gfpcrypt.cpp ;
	result += <source>$(path)/gost.cpp ;
	result += <source>$(path)/gzip.cpp ;
	result += <source>$(path)/hex.cpp ;
	result += <source>$(path)/hmac.cpp ;
	result += <source>$(path)/hrtimer.cpp ;
	result += <source>$(path)/ida.cpp ;
	result += <source>$(path)/idea.cpp ;
	result += <source>$(path)/integer.cpp ;
	result += <source>$(path)/iterhash.cpp ;
	result += <source>$(path)/luc.cpp ;
	result += <source>$(path)/mars.cpp ;
	result += <source>$(path)/marss.cpp ;
	result += <source>$(path)/md2.cpp ;
	result += <source>$(path)/md4.cpp ;
	result += <source>$(path)/md5.cpp ;
	result += <source>$(path)/misc.cpp ;
	result += <source>$(path)/modes.cpp ;
	result += <source>$(path)/mqueue.cpp ;
	result += <source>$(path)/mqv.cpp ;
	result += <source>$(path)/nbtheory.cpp ;
	result += <source>$(path)/network.cpp ;
	result += <source>$(path)/oaep.cpp ;
	result += <source>$(path)/osrng.cpp ;
	result += <source>$(path)/panama.cpp ;
	result += <source>$(path)/pch.cpp ;
	result += <source>$(path)/pkcspad.cpp ;
	result += <source>$(path)/polynomi.cpp ;
	result += <source>$(path)/pssr.cpp ;
	result += <source>$(path)/pubkey.cpp ;
	result += <source>$(path)/queue.cpp ;
	result += <source>$(path)/rabin.cpp ;
	result += <source>$(path)/randpool.cpp ;
	result += <source>$(path)/rc2.cpp ;
	result += <source>$(path)/rc5.cpp ;
	result += <source>$(path)/rc6.cpp ;
	result += <source>$(path)/rdtables.cpp ;
	result += <source>$(path)/rijndael.cpp ;
	result += <source>$(path)/ripemd.cpp ;
	result += <source>$(path)/rng.cpp ;
	result += <source>$(path)/rsa.cpp ;
	result += <source>$(path)/rw.cpp ;
	result += <source>$(path)/safer.cpp ;
	result += <source>$(path)/salsa.cpp ;
	result += <source>$(path)/seal.cpp ;
	result += <source>$(path)/serpent.cpp ;
	result += <source>$(path)/sha.cpp ;
	result += <source>$(path)/shacal2.cpp ;
	result += <source>$(path)/shark.cpp ;
	result += <source>$(path)/sharkbox.cpp ;
	result += <source>$(path)/simple.cpp ;
	result += <source>$(path)/skipjack.cpp ;
	result += <source>$(path)/socketft.cpp ;
	result += <source>$(path)/sosemanuk.cpp ;
	result += <source>$(path)/square.cpp ;
	result += <source>$(path)/squaretb.cpp ;
	result += <source>$(path)/strciphr.cpp ;
	result += <source>$(path)/tea.cpp ;
	result += <source>$(path)/tftables.cpp ;
	result += <source>$(path)/tiger.cpp ;
	result += <source>$(path)/tigertab.cpp ;
	result += <source>$(path)/trdlocal.cpp ;
	result += <source>$(path)/ttmac.cpp ;
	result += <source>$(path)/twofish.cpp ;
	result += <source>$(path)/vmac.cpp ;
	result += <source>$(path)/wait.cpp ;
	result += <source>$(path)/wake.cpp ;
	result += <source>$(path)/whrlpool.cpp ;
	result += <source>$(path)/winpipes.cpp ;

# TODO readd this for 64 bit!
	if <address-model>64 in $(properties) {
#		result += <source>x64masm.obj ;
		result += <source>$(path)/x64masm.asm ;
#		result += <source>x64masm.obj ;
#		<implicit-dependency>$(path)/x64masm.asm ;
	}
	result += <source>$(path)/xtr.cpp ;
	result += <source>$(path)/xtrcrypt.cpp ;
	result += <source>$(path)/zdeflate.cpp ;
	result += <source>$(path)/zinflate.cpp ;
	result += <source>$(path)/zlib.cpp ;

	return $(result) ;
}
rule generate-usage-requirements ( properties * )
{
	local result ;
	if ( $(.enabled) = true ) {
		result += <include>$(.source) ;
		result += <define>HAVE_LIBCRYPTOPP ;
		result += <library>libcryptopp ;
	}
	return $(result) ;
}

lib libcryptopp
	: # sources
	: # requirements
		<conditional>@generate-source
		<link>static
	: # default-build
	: # usage-requirements
	;

alias embedded
	: # source
	: # requirements
	: # default-build
	: # usage-requirements
		<conditional>@generate-usage-requirements
	;
