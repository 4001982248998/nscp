cmake_minimum_required(VERSION 2.6)

SET(TARGET nscp)

PROJECT(service)
INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIRS})
IF(JSON_SPIRIT_FOUND)
	INCLUDE_DIRECTORIES(${JSON_SPIRIT_INCLUDE_DIR})
	ADD_DEFINITIONS(-DJSON_SPIRIT)
	SET(JSON_LIB json_spirit_static)
ELSE(JSON_SPIRIT_FOUND)
	SET(JSON_LIB)
ENDIF(JSON_SPIRIT_FOUND)


LINK_DIRECTORIES(${BOOST_LIB_DIRS})

SET(service_SRCS
	StdAfx.cpp
	NSClient++.cpp
	NSCPlugin.cpp
	core_api.cpp
	logger_impl.cpp

	${NSCP_INCLUDEDIR}/nscapi/nscapi_helper.cpp
	${NSCP_INCLUDEDIR}/settings/client/settings_client.cpp
	${NSCP_INCLUDEDIR}/nsclient/base_logger_impl.cpp

	${NSCP_INCLUDEDIR}/simpleini/ConvertUTF.c
	${NSCP_INCLUDEDIR}/b64/b64.c
	${NSCP_INCLUDEDIR}/arrayBuffer.cpp

	../resources/nsclient.ico
)

IF(WIN32)
	SET(service_SRCS ${service_SRCS}
		${NSCP_INCLUDEDIR}/ServiceCmd.cpp
	)
	SET(service_SRCS ${service_SRCS}
		StdAfx.h
		NSClient++.h
		NSClient++.rc
		NSCPlugin.h
		core_api.h
		simple_client.hpp
		settings_client.hpp
		cli_parser.hpp
		
		plugin_list.hpp
		commands.hpp
		channels.hpp
		routers.hpp
		logger_impl.hpp
		service_manager.hpp

		${NSCP_INCLUDEDIR}/charEx.h
		${NSCP_INCLUDEDIR}/config.h
		${NSCP_INCLUDEDIR}/com_helpers.hpp
		${NSCP_INCLUDEDIR}/dll/dll.hpp
		${NSCP_INCLUDEDIR}/dll/impl_unix.hpp
		${NSCP_INCLUDEDIR}/dll/impl_w32.hpp
#		${NSCP_INCLUDEDIR}/nsclient_session.hpp

		${NSCP_INCLUDEDIR}/service/system_service.hpp
		${NSCP_INCLUDEDIR}/service/win32_service.hpp
		${NSCP_INCLUDEDIR}/nscapi/nscapi_helper.hpp
		${NSCP_INCLUDEDIR}/nsclient/base_logger_impl.hpp
		${NSCP_INCLUDEDIR}/nsclient/logger.hpp

	)
	SET(service_SRCS ${service_SRCS}
		${CMAKE_CURRENT_SOURCE_DIR}/NSClient++.manifest
	)
	
	ADD_DEFINITIONS(-D_WIN32_DCOM)
ENDIF(WIN32)

ADD_DEFINITIONS(${NSCP_GLOBAL_DEFINES})

# Add python
IF(PYTHONLIBSEX_FOUND)
	SET(EXTRA_LIBS ${EXTRA_LIBS} ${PYTHON_LIBRARIES})
ENDIF(PYTHONLIBSEX_FOUND)

# Add breakpad
IF(BREAKPAD_FOUND)
	ADD_EXECUTABLE(${TARGET}nobp ${service_SRCS})

	TARGET_LINK_LIBRARIES(${TARGET}nobp
		${Boost_FILESYSTEM_LIBRARY}
		${Boost_PROGRAM_OPTIONS_LIBRARY}
		${Boost_THREAD_LIBRARY}
		${NSCP_DEF_PLUGIN_LIB}
		${EXTRA_LIBS}
		settings_manager
	)
	INSTALL(TARGETS ${TARGET}nobp RUNTIME DESTINATION .)
	IF(WIN32)
		INSTALL(CODE "SET(PDB_FULL_PATH ${BUILD_TARGET_EXE_PATH}/${TARGET}nobp.pdb)")
		INSTALL(CODE "FILE(INSTALL DESTINATION \${CMAKE_INSTALL_PREFIX} TYPE EXECUTABLE FILES \${PDB_FULL_PATH})")
	ENDIF(WIN32)
	SET_TARGET_PROPERTIES(${TARGET}nobp PROPERTIES FOLDER "core")


	SET(service_SRCS ${service_SRCS} ${NSCP_INCLUDEDIR}/breakpad/exception_handler_win32.cpp)
	IF(WIN32)
		SET(service_SRCS ${service_SRCS} ${NSCP_INCLUDEDIR}/breakpad/exception_handler_win32.hpp)
	ENDIF(WIN32)
	SET(EXTRA_LIBS ${BREAKPAD_COMMON_LIBRARY} ${BREAKPAD_EXCEPTION_HANDLER_LIBRARY} ${BREAKPAD_CRASH_GENERATION_CLIENT_LIBRARY})
	INCLUDE_DIRECTORIES(${BREAKPAD_INCLUDE_DIR})
ENDIF(BREAKPAD_FOUND)



ADD_EXECUTABLE(${TARGET} ${service_SRCS})
IF(BREAKPAD_FOUND)
	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS -DUSE_BREAKPAD)
ENDIF(BREAKPAD_FOUND)

TARGET_LINK_LIBRARIES(${TARGET}
	${Boost_FILESYSTEM_LIBRARY}
	${Boost_PROGRAM_OPTIONS_LIBRARY}
	${Boost_THREAD_LIBRARY}
	${NSCP_DEF_PLUGIN_LIB}
	${EXTRA_LIBS}
	${JSON_LIB}
	settings_manager
)
INSTALL(TARGETS ${TARGET} RUNTIME DESTINATION .)
IF(WIN32)
	INSTALL(CODE "SET(PDB_FULL_PATH ${BUILD_TARGET_EXE_PATH}/${TARGET}.pdb)")
	INSTALL(CODE "FILE(INSTALL DESTINATION \${CMAKE_INSTALL_PREFIX} TYPE EXECUTABLE FILES \${PDB_FULL_PATH})")
ENDIF(WIN32)
SET_TARGET_PROPERTIES(${TARGET} PROPERTIES FOLDER "core")
SET_TARGET_PROPERTIES(${TARGET} PROPERTIES FOLDER "core")
IF(MSVC11)
	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${BUILD_TARGET_EXE_PATH})
	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG ${BUILD_TARGET_EXE_PATH})
	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE ${BUILD_TARGET_EXE_PATH})
	SET_TARGET_PROPERTIES(${TARGET} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${BUILD_TARGET_EXE_PATH})
ENDIF(MSVC11)

SOURCE_GROUP("NSCP API" REGULAR_EXPRESSION .*include/nscapi/.*)
SOURCE_GROUP("Settings" REGULAR_EXPRESSION .*include/settings/.*)
SOURCE_GROUP("Common Files" REGULAR_EXPRESSION .*include/.*)


IF(GTEST_FOUND)
	INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIR})
	SET(SRCS
		performance_data_test.cpp
	)
	ADD_EXECUTABLE(${TARGET}_test ${SRCS})
	ADD_TEST(${TARGET}_test ${TARGET}_test)
	TARGET_LINK_LIBRARIES(${TARGET}_test
		${GTEST_GTEST_LIBRARY}
		${GTEST_GTEST_MAIN_LIBRARY}

#		${Boost_FILESYSTEM_LIBRARY}
#		${Boost_PROGRAM_OPTIONS_LIBRARY}
#		${Boost_THREAD_LIBRARY}
		${NSCP_DEF_PLUGIN_LIB}
		${EXTRA_LIBS}
		settings_manager
	)
	IF (MSVC11)
		SET_TARGET_PROPERTIES(${TARGET}_test PROPERTIES COMPILE_FLAGS "-DGTEST_HAS_TR1_TUPLE=1 -D_VARIADIC_MAX=10 -DGTEST_USE_OWN_TR1_TUPLE=0")
	ENDIF(MSVC11)
	SET_TARGET_PROPERTIES(${TARGET}_test PROPERTIES FOLDER "tests")
ENDIF(GTEST_FOUND)
